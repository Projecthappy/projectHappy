{"title":"SpringSecurity6.0.1中角色继承无效的问题","uid":"412b935590a2bd04a88ed613c59b5969","slug":"SpringSecurity6.0.1中角色继承无效的问题","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:01.692Z","comments":true,"path":"api/articles/SpringSecurity6.0.1中角色继承无效的问题.json","keywords":null,"cover":[],"content":"<h1 id=\"一、简述\"><a href=\"#一、简述\" class=\"headerlink\" title=\"一、简述\"></a>一、简述</h1><p>&ensp;&ensp;我在 SpringSecurity 中做了不少的实验，但总感觉对这个框架还是有点模糊，最近在复习 SpringSecurity，进行到角色继承时，发现角色继承并没有起作用，折腾了很久最后在 SpringSecurity 的 issue 中找到了解决方法，主要问题就是 6.0.1 的版本还没有很好地兼容 RoleHierarchy 这个 Bean。</p>\n<h1 id=\"二、通常做法\"><a href=\"#二、通常做法\" class=\"headerlink\" title=\"二、通常做法\"></a>二、通常做法</h1><p>&ensp;&ensp;通常我们做角色继承只需要自定义注入一个 <code>RoleHierarchy</code> 的 Bean 就可以了，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> RoleHierarchy <span class=\"title function_\">roleHierarchy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RoleHierarchyImpl</span> <span class=\"variable\">hierarchy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyImpl</span>();</span><br><span class=\"line\">        hierarchy.setHierarchy(<span class=\"string\">&quot;ROLE_ADMIN &gt; ROLE_user&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hierarchy;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、试验\"><a href=\"#三、试验\" class=\"headerlink\" title=\"三、试验\"></a>三、试验</h1><p>&ensp;&ensp;准备三个接口，其中 <code>getAll</code> 不设置访问权限，<code>getUser</code> 只允许有 User 权限的用户访问，<code>getAdmin</code> 只允许有 Admin 权限的用户访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getAll</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg + <span class=\"string\">&quot; ALL&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getUser</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg + <span class=\"string\">&quot; USER&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getAdmin&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getAdmin</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg + <span class=\"string\">&quot; ADMIN&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后向登录接口发送请求，在这里用户 1111 的角色是管理员，111 则是普通用户，这两个账号是在保存再数据库中的，登录成功后返回用户名</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157532410.png#pic_center\" alt=\"1678157532410\"></p>\n<p>之后访问 <code>getAll</code></p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157741520.png\" alt=\"1678157741520\"></p>\n<p>访问成功,再访问 <code>getAdmin</code></p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157776037.png\" alt=\"1678157776037\"><br>也能访问到，最后再访问 <code>getUser</code> 看看角色继承是否有效<br><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157826069.png\" alt=\"1678157826069\"></p>\n<p>这里报 403 禁止访问了，为了探究是哪出的问题，我们在类 <code>SecurityExpressionRoot</code> 的 <code>hasRole</code> 方法中打个断点，之后一直步入到方法 <code>hasAnyAuthorityName</code>，该方法的第一行是将方法 <code>getAuthoritySet</code> 的结果放到 <code>roleSet</code> 中，根据名字这个方法应该是获取当前用户的角色集合。</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678158151080.png\" alt=\"1678158151080\"></p>\n<p>步过该方法，发现这集合里面只有 ROLE*ADMIN</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678159673712.png\" alt=\"1678159673712\"></p>\n<p>方法 <code>hasAnyAuthorityName</code> 后面的部分则是把 <code>haseRole</code> 中的角色加上前缀 ROLE*，并判断这个角色是否在 <code>roleSet</code> 里，那这肯定是不包括的，最后返回 False，所以就访问不到这个接口了。<br>我们重新在发送一次请求到 <code>getUser</code>，步入方法 <code>getAuthoritySet</code>，</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678159809157.png\" alt=\"1678159809157\"></p>\n<p>其中关键的第三行可以看到就是判断当前对象的 <code>roleHierachy</code> 是否为空，不为空则将返回所有可访问权限的集合</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678161022293.png\" alt=\"1678161022293\"></p>\n<p>之后将权限集合转换为 <code>Set</code></p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678161087471.png\" alt=\"1678161087471\"></p>\n<p>但在这里 <code>roleHierachy</code> 是 null 啊，what？我们配置的角色继承哪去了？</p>\n<p>后面去翻了翻 <a href=\"https://docs.spring.io/spring-security/reference/6.0.1/servlet/authorization/architecture.html#authz-hierarchical-roles\">SpringSecurity 的文档</a>，它给的示例是这样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">AccessDecisionVoter <span class=\"title function_\">hierarchyVoter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">RoleHierarchy</span> <span class=\"variable\">hierarchy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyImpl</span>();</span><br><span class=\"line\">    hierarchy.setHierarchy(<span class=\"string\">&quot;ROLE_ADMIN &gt; ROLE_STAFF\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;ROLE_STAFF &gt; ROLE_USER\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyVoter</span>(hierarchy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照这个方法写了之后依旧还是不行。。。<br>idea 也提示类 <code>AccessDecisionVoter</code> 和 <code>RoleHierarchyVoter</code> 已经弃用了，进入这两个类都提示改用 <code>AuthorizationManager</code></p>\n<p>在 SpringSecurity 的<a href=\"https://github.com/spring-projects/spring-security/issues/12766\">一个 issue</a> 中发现有关文档中给的示例无效的问题<br>后面的回复中有一个解决方法。</p>\n<blockquote>\n<p>Thanks for the report, @istoony. <code>RoleHierarchy</code> bean configuration is not fully ported over as of 6.0.x. As such, I think what should be done here is add a note about that in the documentation and then update it once completed. I’ve also added #12783 detailing what needs to be done to support <code>RoleHierarchy</code> bean configuration.<br>In the meantime, to configure <code>RoleHierarchy</code> for pre-post method security, use <code>DefaultMethodSecurityExpressionHandler</code>:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> RoleHierarchy <span class=\"title function_\">roleHierarchy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">RoleHierarchy</span> <span class=\"variable\">hierarchy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyImpl</span>();</span><br><span class=\"line\">    hierarchy.setHierarchy(<span class=\"string\">&quot;ROLE_ADMIN &gt; ROLE_STAFF\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;ROLE_STAFF &gt; ROLE_USER\\n&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyVoter</span>(hierarchy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> DefaultMethodSecurityExpressionHandler <span class=\"title function_\">methodSecurityExpressionHandler</span><span class=\"params\">(RoleHierarchy roleHierarchy)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">DefaultMethodSecurityExpressionHandler</span> <span class=\"variable\">expressionHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMethodSecurityExpressionHandler</span>();</span><br><span class=\"line\">    expressionHandler.setRoleHierarchy(roleHierarchy);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> expressionHandler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>And to configure it for filter security, use the <code>access(AuthorizationManager)</code> method instead of <code>hasRole</code>, like so:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorityAuthorizationManager&lt;RequestAuthorizationContext&gt; hasRoleUser =</span><br><span class=\"line\">    AuthorityAuthorizationManager.hasRole(<span class=\"string\">&quot;USER&quot;</span>);</span><br><span class=\"line\">hasRoleUser.setRoleHierarchy(roleHierarchy);</span><br><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">    .authorizeHttpRequests((authorize) -&gt; authorize</span><br><span class=\"line\">        .requestMatchers(<span class=\"string\">&quot;/needs/user/**&quot;</span>).access(hasRoleUser)</span><br><span class=\"line\">        .anyRequest().authenticated()</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>按照这个示例将角色继承的配置修改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> RoleHierarchy <span class=\"title function_\">roleHierarchy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RoleHierarchyImpl</span> <span class=\"variable\">hierarchy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleHierarchyImpl</span>();</span><br><span class=\"line\">        hierarchy.setHierarchy(<span class=\"string\">&quot;ROLE_ADMIN &gt; ROLE_user&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hierarchy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> DefaultMethodSecurityExpressionHandler <span class=\"title function_\">methodSecurityExpressionHandler</span><span class=\"params\">(RoleHierarchy roleHierarchy)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultMethodSecurityExpressionHandler</span> <span class=\"variable\">expressionHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMethodSecurityExpressionHandler</span>();</span><br><span class=\"line\">        expressionHandler.setRoleHierarchy(roleHierarchy);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expressionHandler;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过测试，角色为 ADMIN 的用户都可以访问到 <code>hasRole(&quot;user&quot;)</code>的接口，并且 user 角色也还是访问不了 <code>hasRole(&quot;ADMIN&quot;)</code>的接口，角色继承生效了！</p>\n<h1 id=\"通常做法无效的原因\"><a href=\"#通常做法无效的原因\" class=\"headerlink\" title=\"通常做法无效的原因\"></a>通常做法无效的原因</h1><p>在 6.1.0-SNAPSHOT 版本的文档中对应角色继承的位置有这么一个提示</p>\n<p><img src=\"/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678168778522.png\" alt=\"1678168778522\"><br><code>RoleHierarchy</code> 这个 Bean 还没有适配@EnableMethodSecurity 这个注解，需要等到这个 issues 修完。</p>\n","text":"一、简述&ensp;&ensp;我在 SpringSecurity 中做了不少的实验，但总感觉对这个框架还是有点模糊，最近在复习 SpringSecurity，...","permalink":"/post/SpringSecurity6.0.1中角色继承无效的问题","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">一、简述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%80%9A%E5%B8%B8%E5%81%9A%E6%B3%95\"><span class=\"toc-text\">二、通常做法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%AF%95%E9%AA%8C\"><span class=\"toc-text\">三、试验</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%9A%E5%B8%B8%E5%81%9A%E6%B3%95%E6%97%A0%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">通常做法无效的原因</span></a></li></ol>","author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JVM","uid":"0b1381c4a63c09e41167c5168339035a","slug":"JVM","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.481Z","comments":true,"path":"api/articles/JVM.json","keywords":null,"cover":null,"text":"一、内容整理类加载器什么是类加载器类加载器是将 class 文件加载到 jvm 中，jvm 中有四个类加载器 启动类加载器：由 C++编写，加载 java 的核...","permalink":"/post/JVM","photos":[],"count_time":{"symbolsCount":445,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Windows搭建RabbitMq集群","uid":"2dc49ca3755c310977384158e8e18daf","slug":"Windows搭建RabbitMq集群","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:32:55.616Z","comments":true,"path":"api/articles/Windows搭建RabbitMq集群.json","keywords":null,"cover":[],"text":"一、简述&ensp;&ensp;RabbitMQ 在 Linux 端的集群搭建可参考的教程很多，但 windows 端的相对较少，虽然生产环境肯定还是要在 Li...","permalink":"/post/Windows搭建RabbitMq集群","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}