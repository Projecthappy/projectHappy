{"title":"并发编程","uid":"be447ed25be14672c8ade5d39be9da07","slug":"并发编程","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.841Z","comments":true,"path":"api/articles/并发编程.json","keywords":null,"cover":null,"content":"<h1 id=\"一、内容整理\"><a href=\"#一、内容整理\" class=\"headerlink\" title=\"一、内容整理\"></a>一、内容整理</h1><h2 id=\"多线程基础\"><a href=\"#多线程基础\" class=\"headerlink\" title=\"多线程基础\"></a>多线程基础</h2><h4 id=\"线程和进程的区别？\"><a href=\"#线程和进程的区别？\" class=\"headerlink\" title=\"线程和进程的区别？\"></a>线程和进程的区别？</h4><p>当系统从磁盘中将硬盘中的某个程序代码到内存，就开启了一个进程，一个进程可以有多个线程，线程由一条一条的指令组成</p>\n<p>进程是运行中程序的实例，包含了线程，以便同时执行多个任务<br>进程间的内存空间不是共享的，但线程中的空间对进程中的线程是共享的<br>线程更轻量，上下文切换的成本比进程更低</p>\n<h4 id=\"并行和并发有什么区别？\"><a href=\"#并行和并发有什么区别？\" class=\"headerlink\" title=\"并行和并发有什么区别？\"></a>并行和并发有什么区别？</h4><p>并发是不同的线程以极短的时间在 cpu 中交替执行<br>并行是多个线程在不同的 cpu 核心中执行<br>并行是同时执行多个任务的能力，并发是可以应对多个任务的能力</p>\n<h4 id=\"创建线程的方式\"><a href=\"#创建线程的方式\" class=\"headerlink\" title=\"创建线程的方式\"></a>创建线程的方式</h4><ul>\n<li>继承 <code>Thread</code>类，重写 <code>run</code> 方法</li>\n<li>实现 <code>Runnable</code> 接口，实现 <code>run</code> 方法</li>\n<li>实现 <code>Callable</code> 接口，实现 <code>call</code> 方法</li>\n<li>使用线程池创建线程</li>\n</ul>\n<h4 id=\"runnable-和-callable-有什么区别\"><a href=\"#runnable-和-callable-有什么区别\" class=\"headerlink\" title=\"runnable 和 callable 有什么区别\"></a>runnable 和 callable 有什么区别</h4><ul>\n<li>Runnable 接口的方法没有返回值，Callable 接口可以有返回值，通过 FutureTask 中的 get 方法获取异步执行的返回值，但执行这个方法会阻塞主进程</li>\n<li>Runnable 不能抛出异常，Callable 可以抛出异常</li>\n</ul>\n<h4 id=\"线程的-run-和-start-有什么区别？\"><a href=\"#线程的-run-和-start-有什么区别？\" class=\"headerlink\" title=\"线程的 run()和 start()有什么区别？\"></a>线程的 run()和 start()有什么区别？</h4><ul>\n<li>run 只是调用普通方法，可以多次执行</li>\n<li>start 方法会启动线程，会调用 native 的 start0 方法，只能调用一次</li>\n</ul>\n<h4 id=\"线程包括哪些状态，状态之间是如何变化的\"><a href=\"#线程包括哪些状态，状态之间是如何变化的\" class=\"headerlink\" title=\"线程包括哪些状态，状态之间是如何变化的\"></a>线程包括哪些状态，状态之间是如何变化的</h4><ul>\n<li>New</li>\n<li>Runnable</li>\n<li>Blocked</li>\n<li>Waitting</li>\n<li>TimeWaitting</li>\n<li>Terminated</li>\n</ul>\n<p>创建线程时时 New 状态，调用 start 方法后会进入 Runnable 状态，Runnable 状态中会根据争抢 cpu 时间片的情况会在就绪和运行状态来回切换，如果出现需要等待锁，会进入 Blocked 状态，拿到锁后再次变成 Runnable 状态，线程中调用了 wait 方法时会进入 Waitting 状态，调用 notify 或者 notifyAll 方法后，线程被唤醒，进入 Runnable 状态，运行中遇到 sleep 会进入 TimeWaitting 状态，执行完毕或线程死亡后会进入 Terminated 状态。</p>\n<h4 id=\"新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？\"><a href=\"#新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？\" class=\"headerlink\" title=\"新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？\"></a>新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</h4><p>在 t2 中调用 t1 的 join 方法，在 t3 中调用 t2 的 join 方法</p>\n<h4 id=\"notify-和-notifyAll-有什么区别？\"><a href=\"#notify-和-notifyAll-有什么区别？\" class=\"headerlink\" title=\"notify()和 notifyAll()有什么区别？\"></a>notify()和 notifyAll()有什么区别？</h4><p>notify 只会随机唤醒一个线程，notifyAll 会唤醒所有的线程</p>\n<h4 id=\"在-java-中-wait-和-sleep-方法的不同？\"><a href=\"#在-java-中-wait-和-sleep-方法的不同？\" class=\"headerlink\" title=\"在 java 中 wait 和 sleep 方法的不同？\"></a>在 java 中 wait 和 sleep 方法的不同？</h4><ul>\n<li>wait 是 Object 类中的方法，可以被唤醒，必须先获取 wait 对象的锁，会释放锁，</li>\n<li>sleep 是 Thread 中的静态方法，不可以被唤醒， 不会释放锁</li>\n</ul>\n<h4 id=\"如何停止一个正在运行的线程？\"><a href=\"#如何停止一个正在运行的线程？\" class=\"headerlink\" title=\"如何停止一个正在运行的线程？\"></a>如何停止一个正在运行的线程？</h4><p>使用线程的 interrupt 方法</p>\n<h2 id=\"线程中并发锁\"><a href=\"#线程中并发锁\" class=\"headerlink\" title=\"线程中并发锁\"></a>线程中并发锁</h2><h4 id=\"讲一下-synchronized-关键字的底层原理？\"><a href=\"#讲一下-synchronized-关键字的底层原理？\" class=\"headerlink\" title=\"讲一下 synchronized 关键字的底层原理？\"></a>讲一下 synchronized 关键字的底层原理？</h4><p>底层是由 Monitor 实现的，Moniter 是用 C++编写的，进入 synchronized 方法块时，对象锁会先关联 Monitor，Monitor 中存在三个属性，owner：持有锁的线程、entrylist：处于阻塞状态的线程 和 waitset 处于 waitting 状态的线程</p>\n<h4 id=\"synchronized-关键字的底层原理-进阶\"><a href=\"#synchronized-关键字的底层原理-进阶\" class=\"headerlink\" title=\"synchronized 关键字的底层原理-进阶\"></a>synchronized 关键字的底层原理-进阶</h4><h4 id=\"你谈谈-JMM（Java-内存模型）\"><a href=\"#你谈谈-JMM（Java-内存模型）\" class=\"headerlink\" title=\"你谈谈 JMM（Java 内存模型）\"></a>你谈谈 JMM（Java 内存模型）</h4><p>是 java 虚拟机规范中定义的一种内存模型，每个线程中都有自己的工作内存，线程之间无法互相访问，共享的变量存放在主内存中，线程工作时，需要用到共享变量的话会在自己的工作内存中创建一个共享变量的副本，线程只能操作自己工作内存中的副本，由 JMM 负责将副本同步到共享内存和将共享变量加载到线程的工作内存中</p>\n<h4 id=\"CAS-你知道吗？\"><a href=\"#CAS-你知道吗？\" class=\"headerlink\" title=\"CAS 你知道吗？\"></a>CAS 你知道吗？</h4><p>比较并交换，保证操作的原子性，比较旧的值相同才会将旧的值更改为新的值，CAS 中包含自旋锁，是一种乐观锁，发现旧值不相同时会不断地重置，CAS 的底层时使用 Unsafe 类中的 native 方法，</p>\n<h4 id=\"请谈谈你对-volatile-的理解\"><a href=\"#请谈谈你对-volatile-的理解\" class=\"headerlink\" title=\"请谈谈你对 volatile 的理解\"></a>请谈谈你对 volatile 的理解</h4><ul>\n<li>保证可见性：保证不同线程对变量操作的可见性，会强制将对副本修改的值立刻同步到主存中，其目的时防止 JIT 编译器对代码进行优化</li>\n<li>防止指令重排：在变量的操作中加入屏障，防止其他的写操作到该变量写下面，防止其他读的操作到该变量读上面</li>\n</ul>\n<h4 id=\"什么是-AQS？\"><a href=\"#什么是-AQS？\" class=\"headerlink\" title=\"什么是 AQS？\"></a>什么是 AQS？</h4><p>抽象同步队列，是构建锁和同步组件的基础框架，包含了锁的状态，拿到锁的线程，等待队列的头节点和尾节点，时一种非公平锁</p>\n<h4 id=\"ReentrantLock-的实现原理\"><a href=\"#ReentrantLock-的实现原理\" class=\"headerlink\" title=\"ReentrantLock 的实现原理\"></a>ReentrantLock 的实现原理</h4><p>是由 CAS 和 AQS 实现的，它支持公平锁和非公平锁</p>\n<h4 id=\"synchronized-和-Lock-有什么区别\"><a href=\"#synchronized-和-Lock-有什么区别\" class=\"headerlink\" title=\"synchronized 和 Lock 有什么区别\"></a>synchronized 和 Lock 有什么区别</h4><p>synchronized 是关键字，由 c++实现，lock 是接口，由 java 语言实现<br>Lock 支持更细粒度的锁控制，功能更多，支持公平锁，可打断，可超时，多条件变量，有多种不同的实现</p>\n<h4 id=\"死锁产生的条件以及死锁排查方案\"><a href=\"#死锁产生的条件以及死锁排查方案\" class=\"headerlink\" title=\"死锁产生的条件以及死锁排查方案\"></a>死锁产生的条件以及死锁排查方案</h4><p>线程中同时获取多把锁的情况，jps 获取线程的 PID，再用 jstack 获取线程的运行情况</p>\n<h4 id=\"聊一下-ConcurrentHashMap\"><a href=\"#聊一下-ConcurrentHashMap\" class=\"headerlink\" title=\"聊一下 ConcurrentHashMap\"></a>聊一下 ConcurrentHashMap</h4><p>是线程安全版本的 HashMap，数据结构和 HashMap 一样，它在空节点插入时是 CAS 的操作，在链表或者红黑树的节点是锁的头节点。</p>\n<h4 id=\"导致并发程序出现问题的根本原因是什么\"><a href=\"#导致并发程序出现问题的根本原因是什么\" class=\"headerlink\" title=\"导致并发程序出现问题的根本原因是什么\"></a>导致并发程序出现问题的根本原因是什么</h4><p>并发编程三大特性是</p>\n<ul>\n<li>原子性：线程要么执行要么不执行</li>\n<li>可见性：对数据副本的修改能及时同步到别的线程</li>\n<li>有序性：防止指令重排<br>违反了特性就可能产生问题</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><h4 id=\"说一下线程池的核心参数（线程池的执行原理知道嘛）\"><a href=\"#说一下线程池的核心参数（线程池的执行原理知道嘛）\" class=\"headerlink\" title=\"说一下线程池的核心参数（线程池的执行原理知道嘛）\"></a>说一下线程池的核心参数（线程池的执行原理知道嘛）</h4><p>线程池有七大参数</p>\n<ul>\n<li>核心线程池数</li>\n<li>最大线程数</li>\n<li>非核心线程存活时间</li>\n<li>非核心线程存活时间单位</li>\n<li>阻塞队列</li>\n<li>线程工厂</li>\n<li>拒绝策略</li>\n</ul>\n<p>其中拒绝策略是达到最大先乘除，并且阻塞队列也满了的时候拒绝策略分为</p>\n<ul>\n<li>AbortPolicy：直接抛出异常，默认策略</li>\n<li>CallerRunsPolicy：用调用者所在的线程来执行任务</li>\n<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务</li>\n<li>DiscardPolicy：直接丢弃任务</li>\n</ul>\n<h4 id=\"线程池中有哪些常见的阻塞队列\"><a href=\"#线程池中有哪些常见的阻塞队列\" class=\"headerlink\" title=\"线程池中有哪些常见的阻塞队列\"></a>线程池中有哪些常见的阻塞队列</h4><p>常见的有 ArrayBlokingQueue 和 LinkedBlokingQueue<br>不同之处：</p>\n<ul>\n<li>ArrayBlokingQueue 是有界的，LinkedBlokingQueue 则是可以设置为无界</li>\n<li>ArrayBlokingQueue 只有一把锁，锁整个数组，而 LinkedBlokingQueue 有头节点和尾节点两把锁，相对来说加入和取出元素的时候 LinkedBlokingQueue 效率更高一些</li>\n</ul>\n<h4 id=\"如何确定核心线程数\"><a href=\"#如何确定核心线程数\" class=\"headerlink\" title=\"如何确定核心线程数\"></a>如何确定核心线程数</h4><ul>\n<li>高并发，任务时间短：N+1，可以减少上下文切换</li>\n<li>并发不高，任务时间较长<ul>\n<li>IO 密集型的任务使用 2N+1</li>\n<li>cpu 密集型使用 N+1</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"为什么不建议用-Executors-创建线程池\"><a href=\"#为什么不建议用-Executors-创建线程池\" class=\"headerlink\" title=\"为什么不建议用 Executors 创建线程池\"></a>为什么不建议用 Executors 创建线程池</h4><p>记得 java 开发手册里这个是强制的，因为 Executors 创建的线程有最大线程数、阻塞队列的长度为 Integer.MAX_VALUE 的，可能会导致 OOM</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h4 id=\"线程池使用场景\"><a href=\"#线程池使用场景\" class=\"headerlink\" title=\"线程池使用场景\"></a>线程池使用场景</h4><ul>\n<li>使用 java 操作大量的数据的时候，操作全部可能导致 OOM，可以使用 CountDownLatch 和线程池分成一个一个的任务执行</li>\n<li>数据汇总，当一个接口需要多个远程调用时，可以将多个调用提交到线程池中同步执行，提高速度</li>\n<li>异步调用，一个接口值的返回不需要等某一个方法执行结束，比如搜索内容是，记录搜索记录和返回搜索结果，添加记录可以提交到线程池中异步执行</li>\n</ul>\n<h4 id=\"如何控制某个方法允许并发访问线程的数量\"><a href=\"#如何控制某个方法允许并发访问线程的数量\" class=\"headerlink\" title=\"如何控制某个方法允许并发访问线程的数量\"></a>如何控制某个方法允许并发访问线程的数量</h4><p>使用 Semaphore，保存的是一个信号量，进入线程的时候请求信号，信号量-1，只有信号量大于 0 才能请求成功，方法结束后，调用释放信号的方法，把信号量加回去。</p>\n<h2 id=\"谈谈你对-ThreadLocal-的理解\"><a href=\"#谈谈你对-ThreadLocal-的理解\" class=\"headerlink\" title=\"谈谈你对 ThreadLocal 的理解\"></a>谈谈你对 ThreadLocal 的理解</h2><p>ThreadLocal 是解决线程安全的一个操作类，将数据存储到各自线程中，有 set，get 和 remove 三个主要方法</p>\n","text":"一、内容整理多线程基础线程和进程的区别？当系统从磁盘中将硬盘中的某个程序代码到内存，就开启了一个进程，一个进程可以有多个线程，线程由一条一条的指令组成 进程是运...","permalink":"/post/并发编程","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%86%85%E5%AE%B9%E6%95%B4%E7%90%86\"><span class=\"toc-text\">一、内容整理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">多线程基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">线程和进程的区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E5%92%8C%E5%B9%B6%E5%8F%91%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">并行和并发有什么区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">创建线程的方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#runnable-%E5%92%8C-callable-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">runnable 和 callable 有什么区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E7%9A%84-run-%E5%92%8C-start-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">线程的 run()和 start()有什么区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B%E7%8A%B6%E6%80%81%EF%BC%8C%E7%8A%B6%E6%80%81%E4%B9%8B%E9%97%B4%E6%98%AF%E5%A6%82%E4%BD%95%E5%8F%98%E5%8C%96%E7%9A%84\"><span class=\"toc-text\">线程包括哪些状态，状态之间是如何变化的</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA-T1%E3%80%81T2%E3%80%81T3-%E4%B8%89%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%83%E4%BB%AC%E6%8C%89%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%EF%BC%9F\"><span class=\"toc-text\">新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#notify-%E5%92%8C-notifyAll-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">notify()和 notifyAll()有什么区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8-java-%E4%B8%AD-wait-%E5%92%8C-sleep-%E6%96%B9%E6%B3%95%E7%9A%84%E4%B8%8D%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">在 java 中 wait 和 sleep 方法的不同？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">如何停止一个正在运行的线程？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%B9%B6%E5%8F%91%E9%94%81\"><span class=\"toc-text\">线程中并发锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%B2%E4%B8%80%E4%B8%8B-synchronized-%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">讲一下 synchronized 关键字的底层原理？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#synchronized-%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">synchronized 关键字的底层原理-进阶</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%A0%E8%B0%88%E8%B0%88-JMM%EF%BC%88Java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">你谈谈 JMM（Java 内存模型）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CAS-%E4%BD%A0%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">CAS 你知道吗？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9-volatile-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">请谈谈你对 volatile 的理解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-AQS%EF%BC%9F\"><span class=\"toc-text\">什么是 AQS？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ReentrantLock-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">ReentrantLock 的实现原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#synchronized-%E5%92%8C-Lock-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">synchronized 和 Lock 有什么区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">死锁产生的条件以及死锁排查方案</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%81%8A%E4%B8%80%E4%B8%8B-ConcurrentHashMap\"><span class=\"toc-text\">聊一下 ConcurrentHashMap</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E8%87%B4%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">导致并发程序出现问题的根本原因是什么</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0%EF%BC%88%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E7%9F%A5%E9%81%93%E5%98%9B%EF%BC%89\"><span class=\"toc-text\">说一下线程池的核心参数（线程池的执行原理知道嘛）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97\"><span class=\"toc-text\">线程池中有哪些常见的阻塞队列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%95%B0\"><span class=\"toc-text\">如何确定核心线程数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%94%A8-Executors-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">为什么不建议用 Executors 创建线程池</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">线程池使用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6%E6%9F%90%E4%B8%AA%E6%96%B9%E6%B3%95%E5%85%81%E8%AE%B8%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">如何控制某个方法允许并发访问线程的数量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9-ThreadLocal-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">谈谈你对 ThreadLocal 的理解</span></a></li></ol></li></ol>","author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"redis","uid":"eb5f3adb17521be888d5fac1c7b84dc0","slug":"redis","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.633Z","comments":true,"path":"api/articles/redis.json","keywords":null,"cover":[],"text":"一、内容整理缓存1. 缓存穿透有大量的请求访问不存在的 key，首先访问 redis，发现不存在当前 key 后 后再访问数据库，因为并不存在这条数据，当前查询...","permalink":"/post/redis","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"MarkDown_All_In_One","date":"2023-12-07T16:06:54.038Z","updated":"2023-12-08T01:32:55.308Z","comments":true,"path":"api/articles/MarkDown_All_In_One.json","keywords":null,"cover":[],"text":"标题二级标题 {ignore&#x3D;true}三级标题四级标题五级标题六级标题文本样式强调文本加粗文本 &#x3D;&#x3D;标记文本&#x3D;&#x3...","permalink":"/post/MarkDown_All_In_One","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}