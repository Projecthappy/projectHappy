{"title":"集合类","uid":"3d7e70cb4fa6869d52e41f2f04e3c805","slug":"collection","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.237Z","comments":true,"path":"api/articles/collection.json","keywords":null,"cover":null,"content":"<h1 id=\"一、内容整理\"><a href=\"#一、内容整理\" class=\"headerlink\" title=\"一、内容整理\"></a>一、内容整理</h1><h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><h4 id=\"底层原理及构造函数相关\"><a href=\"#底层原理及构造函数相关\" class=\"headerlink\" title=\"底层原理及构造函数相关\"></a>底层原理及构造函数相关</h4><p>ArrayList 底层维护一个数组 elementData，共有三个构造函数</p>\n<ul>\n<li>无参构造：将一个空数组赋值给 elementData</li>\n<li>参数 int initialCapacity：初始化手动指定数组长度，小于 0 抛出异常，等于 0 将 elementData 赋值为空数组，大于 0 赋值为指定长度的数组</li>\n<li>参数 Collection&lt;? extends E&gt; c：将 c 转化为数组后更具情况赋值</li>\n</ul>\n<p>在增加元素时，首先会判断当前数组的空间是否足够，如果不够，调用 grow 方法需要扩容为原大小的 1.5 倍，然后再将元素存储到数组中 size 的位置中</p>\n<h4 id=\"如何实现数组和-List-之间的转换\"><a href=\"#如何实现数组和-List-之间的转换\" class=\"headerlink\" title=\"如何实现数组和 List 之间的转换\"></a>如何实现数组和 List 之间的转换</h4><p>List 转数组，调用 List 的 toArray 方法，更改数组，list 不会变，因为是将数据拷贝到数组<br>数组转 List，工具类 Arrays 的 asList 方法（注意：返回的 ArrayList 不能操作，因为返回的是 Arrays 内部的类，不是常见的那个），更改数组，list 会变，因为底层只是将数组的地址赋给了 ArrayList 中的数组</p>\n<h4 id=\"ArrayList-和-LinkedList-的区别是什么？\"><a href=\"#ArrayList-和-LinkedList-的区别是什么？\" class=\"headerlink\" title=\"ArrayList 和 LinkedList 的区别是什么？\"></a>ArrayList 和 LinkedList 的区别是什么？</h4><p>ArrayList 底层为数组，LinkedList 底层为链表<br>访问元素时，ArrayList 的时间复杂度为 O(1)，链表为 O(n)<br>LinkedList 在头尾增加或删除时间复杂度为 O(1)，其他部分需要遍历链表时间复杂度为 O(n)<br>ArrayList 在后面增加元素时间复杂度为 O(1)，其他部分需要时间复杂度为 O(n)</p>\n<p>链表占用的空间会大一些，因为还需要存储两个指针</p>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><h4 id=\"HashMap-的实现原理\"><a href=\"#HashMap-的实现原理\" class=\"headerlink\" title=\"HashMap 的实现原理\"></a>HashMap 的实现原理</h4><p>根据 key 计算出 hash 值得到一个索引的位置，然后将元素放置到对应的位置，如果存在元素就将元素挂载到已有元素的下方，变成一个双向链表，当链表长度大于 8，数组长度大于 64 时，会将对应索引位置的链表转换成红黑树</p>\n<h4 id=\"put-方法的具体流程\"><a href=\"#put-方法的具体流程\" class=\"headerlink\" title=\"put 方法的具体流程\"></a>put 方法的具体流程</h4><p>首先判断当前的数组是否为空，不充足则先扩容，然后再计算 key 的索引值，再查看索引位置是否有元素，已经存在元素则比较索引位置值的 key 和插入数据的 key 是否相同，相同就直接更新，不相同判断是否为红黑树，不是红黑树那就是链表，随后遍历链表，如果存在相同的 key 则更新，遍历完还没有相同的，直接在尾部插入，判断长度是否大于 8，考虑是否需要转化成红黑树，如果是红黑树，则直接执行红黑树的插入方法，插入完成后判断++size 和四分之三数组长度的大小，大于则需要扩容</p>\n<h4 id=\"HashMap-的扩容机制\"><a href=\"#HashMap-的扩容机制\" class=\"headerlink\" title=\"HashMap 的扩容机制\"></a>HashMap 的扩容机制</h4><p>首先判断是否大于 0，否则直接设置数组容量为 16，阈值为 12 并且新建数组，如果大于 0，则创建值为现在长度的两倍的变量作为新数组的长度，并且创建一个新数组，之后需要遍历数组，如果只有下标位置一个元素就直接放入新数组的对应位置，对应位置由索引模新数组长度计算得到，如果下标位置之后还有元素再判断是否为红黑树，是红黑树则直接添加红黑树，不是红黑树，那么说明是链表，需要遍历链表，对链表的元素做拆分的操作，链表元素的 hash 值模老数组的长度，等于 0 则直接添加到新数组相同下标，其他情况添加到新数组中下标为下标值加上老数组的长度</p>\n<h4 id=\"HashMap-的寻址算法和数组长度为什么是-2-的-n-次幂\"><a href=\"#HashMap-的寻址算法和数组长度为什么是-2-的-n-次幂\" class=\"headerlink\" title=\"HashMap 的寻址算法和数组长度为什么是 2 的 n 次幂\"></a>HashMap 的寻址算法和数组长度为什么是 2 的 n 次幂</h4><p>因为一个值模 2 的 n 次幂可以转换成（值-1）&amp;2 的 n 次幂<br>便于扩容时对 hash 值进行计算</p>\n<h1 id=\"二、面试题\"><a href=\"#二、面试题\" class=\"headerlink\" title=\"二、面试题\"></a>二、面试题</h1>","text":"一、内容整理ArrayList底层原理及构造函数相关ArrayList 底层维护一个数组 elementData，共有三个构造函数 无参构造：将一个空数组赋值给...","permalink":"/post/collection","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%86%85%E5%AE%B9%E6%95%B4%E7%90%86\"><span class=\"toc-text\">一、内容整理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ArrayList\"><span class=\"toc-text\">ArrayList</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%8F%8A%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">底层原理及构造函数相关</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%92%8C-List-%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">如何实现数组和 List 之间的转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ArrayList-%E5%92%8C-LinkedList-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">ArrayList 和 LinkedList 的区别是什么？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HashMap\"><span class=\"toc-text\">HashMap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HashMap-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">HashMap 的实现原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#put-%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">put 方法的具体流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HashMap-%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">HashMap 的扩容机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HashMap-%E7%9A%84%E5%AF%BB%E5%9D%80%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-2-%E7%9A%84-n-%E6%AC%A1%E5%B9%82\"><span class=\"toc-text\">HashMap 的寻址算法和数组长度为什么是 2 的 n 次幂</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">二、面试题</span></a></li></ol>","author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Windows搭建RabbitMq集群","uid":"2dc49ca3755c310977384158e8e18daf","slug":"Windows搭建RabbitMq集群","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:32:55.616Z","comments":true,"path":"api/articles/Windows搭建RabbitMq集群.json","keywords":null,"cover":[],"text":"一、简述&ensp;&ensp;RabbitMQ 在 Linux 端的集群搭建可参考的教程很多，但 windows 端的相对较少，虽然生产环境肯定还是要在 Li...","permalink":"/post/Windows搭建RabbitMq集群","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"框架","uid":"71abd5ae262d1609d9544498b5f6da4f","slug":"framework","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.241Z","comments":true,"path":"api/articles/framework.json","keywords":null,"cover":null,"text":"一、内容整理Spring1. 单例 bean 线程安全单例 bean 不是线程安全的 2. Spring-AOP面向切面编程，可以增强某些类的功能，其中需要设置...","permalink":"/post/framework","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}