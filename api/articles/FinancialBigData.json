{"title":"金融大数据学习笔记","uid":"a50bc63133e87d6dc96d8b59bc058e1e","slug":"FinancialBigData","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:32:55.304Z","comments":true,"path":"api/articles/FinancialBigData.json","keywords":null,"cover":[],"content":"<h1 id=\"学习笔记\"><a href=\"#学习笔记\" class=\"headerlink\" title=\"学习笔记\"></a>学习笔记</h1><h3 id=\"大数据-2001-孙啸冬\"><a href=\"#大数据-2001-孙啸冬\" class=\"headerlink\" title=\"大数据 2001 孙啸冬\"></a>大数据 2001 孙啸冬</h3><ul>\n<li>1.爬取数据<ul>\n<li>(1) 爬取时以股票代码作为 URL 中的参数传入，但遇到没有当前股票代码时 DOM 树的结构和正常的不一样，导致运行报错<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：在爬取前先用request库中的get方法获取URL的状态码，状态码为<span class=\"number\">200</span>时再继续</span><br></pre></td></tr></table></figure></li>\n<li>(2) 爬取的页面中的数据是通过 js 渲染的，一开始爬取的发现表格只有表头没有内容<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决方法：用HTML_Session库</span><br><span class=\"line\">//创建HTMLSession对象</span><br><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">//session设置URL</span><br><span class=\"line\">first_page = session.get(url)</span><br><span class=\"line\">//渲染<span class=\"number\">0.5</span>s</span><br><span class=\"line\">first_page.html.render(sleep=<span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure></li>\n<li>(3) 在爬取东方财富网中的数据时，每爬几个就会出现连接被断开的情况，寻找解决方法时想到了用 PowerAutomate 来自动化运行，流程如下图所示：当 vscode 运行窗口出现报错时将 Ctrl+Shift+F5 发送到 vscode 窗口重新运行<br><img src=\"/image/FinancialBigData/1680161235760.png\" alt=\"1680161235760\"></li>\n<li>(4) 通过 <code>tushare</code>的 api 获取数据，将股票代码依次传入 api，在这个过程中碰到了一个问题是判断有没有返回的数据，使用 <code>result==None</code>的话，返回正常的 <code>DataFrame</code>的时候报错说不支持这样的操作，建议用 <code>empty</code>方法判断是否为空，但是没有找到的画返回的又是 <code>None</code>，最后用 <code>isinstance</code>方法解决，返回对象是否是某类示例的 boolean 值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isinstance</span>(tmp, pd.DataFrame)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>2.处理 JSON 数据<br>JSON 中的列表可以用列表表示，对象则可以用字典来表示，本次使用中最后直接把字典传入 <code>json.dump</code>函数中即可<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;result.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">result = &#123;date: date <span class=\"keyword\">for</span> date <span class=\"keyword\">in</span> dates[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> date <span class=\"keyword\">in</span> dates[<span class=\"number\">1</span>:-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    b = a.get_group(date)</span><br><span class=\"line\">    s = []</span><br><span class=\"line\">    h = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, i <span class=\"keyword\">in</span> b[b.<span class=\"built_in\">type</span> == <span class=\"string\">&#x27;深市&#x27;</span>].iterrows():</span><br><span class=\"line\">        s.append([i[<span class=\"string\">&quot;成交量&quot;</span>], i[<span class=\"string\">&quot;净流出&quot;</span>], i[<span class=\"string\">&#x27;code&#x27;</span>],  i[<span class=\"string\">&#x27;name&#x27;</span>], <span class=\"string\">&#x27;深市&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, i <span class=\"keyword\">in</span> b[b.<span class=\"built_in\">type</span> == <span class=\"string\">&#x27;沪市&#x27;</span>].iterrows():</span><br><span class=\"line\">        h.append([i[<span class=\"string\">&quot;成交量&quot;</span>], i[<span class=\"string\">&quot;净流出&quot;</span>], i[<span class=\"string\">&#x27;code&#x27;</span>],  i[<span class=\"string\">&#x27;name&#x27;</span>], <span class=\"string\">&#x27;沪市&#x27;</span>])<span class=\"number\">1</span></span><br><span class=\"line\">    result[date] = &#123;<span class=\"string\">&quot;S&quot;</span>: s, <span class=\"string\">&quot;H&quot;</span>: h&#125;</span><br><span class=\"line\">json.dump(result, f, ensure_ascii=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure></li>\n<li>3.vue 中的问题<ul>\n<li>(1) 动态图定时器<br>vue 中主要问题在最后动态的散点图中，我是想实现一个点击暂定，点击播放继续播放的效果，理想的实现方式是开始播放时创建定时器，点击停止时销毁定时器，根据文档，在 <code>setOption</code>方法将图挂载到 DOM 后就设置定时器，这样的话第一次有效，问题是每次播放后都会再创建一个定时器，定时器中是否更改数据是根据绑定的 <code>playing</code>决定的，如果 <code>playing==true</code>才更改数据，从而使图表会有根据时间动态播放的效果。于是和往常一样在组件中定义一个变量 <code>interval</code>，在挂在后调用初始化方法，在初始化时创建定时器并将值赋给 <code>interval</code>，后面根据 <code>playing</code>属性的改变创建和销毁定时器，但在实际中发现会有多个定时器同时在工作，多次点击日历后，会出现多个定时器以相隔很短的时间到达设定时间，散点图会出现抽风的情况，目前还未能解决。</li>\n<li>(2) 图表展示过后再回到前面的图表，控制台会有警告说当前画图的元素已经在 DOM 树上了，可是我看了下也没有在，只存在当前图标元素，可能和 UI 框架切换标签的逻辑有关，目前也还没有解决。</li>\n</ul>\n</li>\n<li>4.非技术问题<ul>\n<li>(1)审题不清：一开始没有看仔细导致后面发现还有缺的数据</li>\n<li>(2)沟通问题：爬数据和处理数据没有沟通好，导致后面字段不能很好理解</li>\n<li>(3)规划问题：分配好工作后大家都是按照自己的那部分切入，往往是遇到问题了再去解决，很多时候就只能放弃一些效果或者做了无用功，应该一开始就有大致的规划，需要哪些数据，画什么图，要怎样的效果，大家商量一些，有个较为细致的工作内容后再开始工作。</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"学习笔记大数据 2001 孙啸冬 1.爬取数据 (1) 爬取时以股票代码作为 URL 中的参数传入，但遇到没有当前股票代码时 DOM 树的结构和正常的不一样，导...","permalink":"/post/FinancialBigData","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">学习笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E6%8D%AE-2001-%E5%AD%99%E5%95%B8%E5%86%AC\"><span class=\"toc-text\">大数据 2001 孙啸冬</span></a></li></ol></li></ol></li></ol>","author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"python学习笔记","uid":"1951cfc2ab359a36c0a77eb791770e2c","slug":"python","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:32:55.464Z","comments":true,"path":"api/articles/python.json","keywords":null,"cover":null,"text":"学习笔记大数据 2001 孙啸冬 1.DataFrame 类读取一列的方式为 dataFrame[‘列名’] 2.DataFrame 类中一列为 Series ...","permalink":"/post/python","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"微服务","uid":"4323338174440016aba5335d086cc950","slug":"微服务","date":"2023-12-07T16:34:56.000Z","updated":"2023-12-08T01:33:08.865Z","comments":true,"path":"api/articles/微服务.json","keywords":null,"cover":null,"text":"一、内容整理常见组件有哪些 注册中心：nacos 负载均衡：ribben 远程调用：feign 服务熔断降级：sentinel 网关：gateway 服务注册和...","permalink":"/post/微服务","photos":[],"count_time":{"symbolsCount":875,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"孙冬冬","slug":"blog-author","avatar":"/image/avatar.jpg","link":"/","description":"哈哈哈","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}