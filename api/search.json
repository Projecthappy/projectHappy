[{"id":"5453e6ed3ec87ccc7ede230d55c20b84","title":"记录SpringSecurity的一次实践","content":"前言&ensp;&ensp;在项目中需要有用户和管理员登录的功能，用户登陆后观看视频记录观看时长，起先那做的真的时太潦草了完全没有意识，user 一张表，admin 一张表，然后不同的 RequestMapping，后来猛然惊醒，那用户不是可以在不同地方一起登录，一起看视频刷多倍的时长了么，这可不行啊，后来百度了一大圈，最后决定还是用 springsecurity，其实也不是很确定用哪个，但是就感觉它主流一点?\n&ensp;&ensp;一开始看别人的博客的时候都是一头雾水，这怎么怎么就可以了，很少有对每个部分有详细的解释的，后来看了松哥的教程才渐渐的理解，链接：江南一点雨，这篇博客也是看了松哥文章后的一次总结。\n\n一、简述SpringSecurity 是一个权限管理框架，包括验证用户的密码是否正确，用户的角色是普通用户还是管理员，某项操作是否得到授权等，框架的作用就是让我们少些代码少配置，缺点就是对于初学者来说就一开始比较难上手，在 springboot 中，它可以很方便和其他部分结合，只需要引入依赖就可以保护所有的接口。我们操作的主要是三个部分\n\n\n实体类 User，它就是 SpringSecurity 给我们定义的实体类从源码中我们可以看到它实现了 UserDetails 接口，但是他这里实例变量很多，我们可以自己创建实体类并实现 UserDetails 接口\n\n\n\nUserDetailsService 它是用来获取用户信息，返回 UserDetails 类，我们也可以创建一个类并实现 UserDetailsService 来自定义返回的内容，例如我在项目中的实现：在数据库中查找是否有对应 userId 的用户没有就抛出 UsernameNotFound 异常，然后在授权中加入用户的角色，最后返回 userBean。\n\n\n3.WebSecurityConfig 配置类\n\n二、使用步骤1.引入依赖在 pom.xml 中加入以下依赖：\n1234&lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;\n\n引入依赖后我们可以先直接运行试一下\n2.读入数据总结","slug":"记录SpringSecurity的一次实践","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"1951cfc2ab359a36c0a77eb791770e2c","title":"python学习笔记","content":"学习笔记大数据 2001 孙啸冬\n1.DataFrame 类读取一列的方式为 dataFrame[‘列名’]\n2.DataFrame 类中一列为 Series 类\n3.将字符串转为时间对象为：\n\n1time.strptime(字符串,&quot;%a, %d %b %Y %H:%M:%S GMT&quot;)\n\n\n4.时间对象转换为时间戳：\n\n1time.mktime(struct_time)\n\n\n5.遍历 DataFrame 时可以用\n\n1for index, row in dataFrame.iterrows():\n\n\n6.解析 JSON 方式为 json.loads(Str)\n7.将 Series 中每项都进行处理可以用 map，例如把数据中作者那列的字符串用空格分隔并转化为列表：\n\n1dataRaw[&#x27;authors&#x27;].map(lambda x: np.array(x.split(&#x27;,&#x27;)))\n\n\n8.选取 DataFrame 中的多列\n\n1dataRaw[[&#x27;id&#x27;, &#x27;title&#x27;&#x27;versionsCount&#x27;, &#x27;diff&#x27;,&#x27;categories&#x27;, &#x27;update_date&#x27;]]\n\n\n9.选取 DataFrame 中符合一定条件的行，例如选取 id 列中专业符合正则表达式的行\n\n1dataRaw[&#x27;id&#x27;][dataRaw.categories.str.contains(&#x27;math.[A-Z]+&#x27;)]\n\n\n10.画图时显示调用 plt.show()即可不显示相关文字\n11.画图时设置 x 轴标签的大小和旋转角度可以用以下方式\n\n1plt.xticks(range(32), labels=tmp[&#x27;type&#x27;], rotation=43, fontsize=8)\n\n\n12.对 Series 统计可以用以下方式\n\n1dataRaw[&#x27;update_date&#x27;].value_counts()\n\n\n13.对 Series 排序\n\n1dataRaw[&#x27;update_date&#x27;].sort_index()\n\n\n14.在画时间序列图的时候发现 x 轴时这一整年的刻度，全部挤在一起看着非常难受，百度后发现以下方式更改子图的刻度密度，缺点是上面会多出一张多余的空白子图\n\n1234567plt.xticks(rotation=43, fontsize=8)fig, ax = plt.subplots(1, 1)ax.plot(dataRaw[&#x27;update_date&#x27;].value_counts().sort_index())ax.xaxis.set_major_locator(ticker.MultipleLocator(20))plt.axis()plt.xticks(rotation=43)plt.show()\n\n\n15.画词云图的方式：\n\n12345678910111213141516171819202122232425import osfrom os import pathfrom wordcloud import WordCloud, ImageColorGenerator# 需要绘制的目标字符串string = &#x27;&#x27;# 停止词stopword = [&#x27;in&#x27;, &#x27;the&#x27;, &#x27;and&#x27;, &#x27;for&#x27;, &#x27;of&#x27;, &#x27;with&#x27;,            &#x27;by&#x27;, &#x27;a&#x27;, &#x27;from&#x27;, &#x27;on&#x27;, &#x27;to&#x27;]# 读取文件设置词云图的底图d = path.dirname(__file__) if &quot;__file__&quot; in locals() else os.getcwd()alice_mask = np.array(Image.open(path.join(d, &quot;alice_mask.png&quot;)))# 用相关属性构造WordCloud对象wc = WordCloud(    background_color=&#x27;white&#x27;,    width=1000,    height=800,    mask=alice_mask,    stopwords=stopword)# 生成每个词出现的频率wc.generate_from_text(string)# 将词的颜色设置为底图位置上对应的颜色wc.recolor(color_func=ImageColorGenerator(alice_mask))# 绘制图片wc.to_image()\n","slug":"python","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"a50bc63133e87d6dc96d8b59bc058e1e","title":"金融大数据学习笔记","content":"学习笔记大数据 2001 孙啸冬\n1.爬取数据\n(1) 爬取时以股票代码作为 URL 中的参数传入，但遇到没有当前股票代码时 DOM 树的结构和正常的不一样，导致运行报错1解决方法：在爬取前先用request库中的get方法获取URL的状态码，状态码为200时再继续\n(2) 爬取的页面中的数据是通过 js 渲染的，一开始爬取的发现表格只有表头没有内容1234567解决方法：用HTML_Session库//创建HTMLSession对象session = HTMLSession()//session设置URLfirst_page = session.get(url)//渲染0.5sfirst_page.html.render(sleep=0.5)\n(3) 在爬取东方财富网中的数据时，每爬几个就会出现连接被断开的情况，寻找解决方法时想到了用 PowerAutomate 来自动化运行，流程如下图所示：当 vscode 运行窗口出现报错时将 Ctrl+Shift+F5 发送到 vscode 窗口重新运行\n(4) 通过 tushare的 api 获取数据，将股票代码依次传入 api，在这个过程中碰到了一个问题是判断有没有返回的数据，使用 result==None的话，返回正常的 DataFrame的时候报错说不支持这样的操作，建议用 empty方法判断是否为空，但是没有找到的画返回的又是 None，最后用 isinstance方法解决，返回对象是否是某类示例的 boolean 值1isinstance(tmp, pd.DataFrame)\n\n\n2.处理 JSON 数据JSON 中的列表可以用列表表示，对象则可以用字典来表示，本次使用中最后直接把字典传入 json.dump函数中即可123456789101112with open(&#x27;result.json&#x27;, &#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:result = &#123;date: date for date in dates[1:-1]&#125;for date in dates[1:-1]:    b = a.get_group(date)    s = []    h = []    for index, i in b[b.type == &#x27;深市&#x27;].iterrows():        s.append([i[&quot;成交量&quot;], i[&quot;净流出&quot;], i[&#x27;code&#x27;],  i[&#x27;name&#x27;], &#x27;深市&#x27;])    for index, i in b[b.type == &#x27;沪市&#x27;].iterrows():        h.append([i[&quot;成交量&quot;], i[&quot;净流出&quot;], i[&#x27;code&#x27;],  i[&#x27;name&#x27;], &#x27;沪市&#x27;])1    result[date] = &#123;&quot;S&quot;: s, &quot;H&quot;: h&#125;json.dump(result, f, ensure_ascii=False)\n3.vue 中的问题\n(1) 动态图定时器vue 中主要问题在最后动态的散点图中，我是想实现一个点击暂定，点击播放继续播放的效果，理想的实现方式是开始播放时创建定时器，点击停止时销毁定时器，根据文档，在 setOption方法将图挂载到 DOM 后就设置定时器，这样的话第一次有效，问题是每次播放后都会再创建一个定时器，定时器中是否更改数据是根据绑定的 playing决定的，如果 playing==true才更改数据，从而使图表会有根据时间动态播放的效果。于是和往常一样在组件中定义一个变量 interval，在挂在后调用初始化方法，在初始化时创建定时器并将值赋给 interval，后面根据 playing属性的改变创建和销毁定时器，但在实际中发现会有多个定时器同时在工作，多次点击日历后，会出现多个定时器以相隔很短的时间到达设定时间，散点图会出现抽风的情况，目前还未能解决。\n(2) 图表展示过后再回到前面的图表，控制台会有警告说当前画图的元素已经在 DOM 树上了，可是我看了下也没有在，只存在当前图标元素，可能和 UI 框架切换标签的逻辑有关，目前也还没有解决。\n\n\n4.非技术问题\n(1)审题不清：一开始没有看仔细导致后面发现还有缺的数据\n(2)沟通问题：爬数据和处理数据没有沟通好，导致后面字段不能很好理解\n(3)规划问题：分配好工作后大家都是按照自己的那部分切入，往往是遇到问题了再去解决，很多时候就只能放弃一些效果或者做了无用功，应该一开始就有大致的规划，需要哪些数据，画什么图，要怎样的效果，大家商量一些，有个较为细致的工作内容后再开始工作。\n\n\n\n","slug":"FinancialBigData","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"4323338174440016aba5335d086cc950","title":"微服务","content":"一、内容整理常见组件有哪些\n注册中心：nacos\n负载均衡：ribben\n远程调用：feign\n服务熔断降级：sentinel\n网关：gateway\n\n服务注册和发现是什么意思？服务将自己的服务名和 ip 端口号信息发送到注册中心，注册中心保存这些信息并且定时发送心跳信息，判断服务的存活状态服务发现是服务和注册中心会推送和拉取服务信息，发起远程调用时根据负载均衡策略向目标服务发起请求\n注册中心 nacosnacos同时支持配置中心，集群默认采用AP模式\nribbon 负载均衡，负载均衡策略，自定义负载均衡feign中已经集成了ribbon，发起调用时，会先从注册中心拉去服务的地址，按照负载均衡策略选择一个地址发送负载均衡有轮询，随机，权重和地域的方式可以通过实现IRule接口自定义，这是全局的负载均衡策略也可以通过再配置文件中配置调用每个服务的负载均衡策略\n服务雪崩、熔断降级服务雪崩是指服务的调用链路较长时，后面的服务发生了阻塞等问题，导致整个服务链路的不可用可以使用服务熔断和服务降级的方式避免服务降级：当调用的服务出现异常时的策略服务熔断：当对服务的多次请求出现失败时，会触发熔断机制\n微服务的监控-skywalking可以监控接口服务的状态，可以看到哪些服务和结构速度较慢，可以进行针对性的优化\n微服务限流（漏桶算法、令牌桶算法）分布式系统理论-CAP 和 BASECAP是分布式项目的一个理论，包括一致性，可用性，分区容错性\n对分布式系统来说分区容错性是必须的，另外在一致性和可用性中只能二选一\nBASE是CAP中AP的延申，主要思想是采取一些措施，使得数据达到最终的一致性。\n分布式事务解决方案主要是使用MQ实现的分布式事务，对数据的即时性要求没有那么高，数据是最终一致性的\n分布式服务的接口幂等性如何设计使用token的方式，比如在打开订单页面的时候后端返回一个toke给前端，前端提交订单信息时携带token，后端检查token是否存在，存在就往下执行，然后删除token\n你们项目中使用了什么分布式任务调度-xxl-job","slug":"微服务","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"0b1381c4a63c09e41167c5168339035a","title":"JVM","content":"一、内容整理类加载器什么是类加载器类加载器是将 class 文件加载到 jvm 中，jvm 中有四个类加载器\n\n启动类加载器：由 C++编写，加载 java 的核心类\n扩展类加载器：加载 java 的扩展类\n应用程序加载器：加载 classPath 中的类，也就是用户自己编写的类\n自定义类加载器：用户自定义\n\n什么是双亲委派模型加载一个类时如果类有上级类加载器，则将类的加载委托给上级，如果上级类加载器不能加载这个类，就将这个类的请求向下传递，让下级的类加载器加载\n原因：\n\n确保 JVM 中类的唯一性，防止重复加载\n保证类库 API 的安全性\n\n类加载过程\n加载：将类的字节码加载成 java 类模型，创建这个类的 Class 对象\n验证：检查这个类是否符合 JVM 规范\n准备：为static修饰的变量赋初始值，static final的直接赋值\n解析：将类中的符号引用转换为直接引用\n初始化：为类变量赋值，执行静态代码块\n使用：从main方法中开始执行\n销毁：销毁Class对象\n\n","slug":"JVM","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"412b935590a2bd04a88ed613c59b5969","title":"SpringSecurity6.0.1中角色继承无效的问题","content":"一、简述&ensp;&ensp;我在 SpringSecurity 中做了不少的实验，但总感觉对这个框架还是有点模糊，最近在复习 SpringSecurity，进行到角色继承时，发现角色继承并没有起作用，折腾了很久最后在 SpringSecurity 的 issue 中找到了解决方法，主要问题就是 6.0.1 的版本还没有很好地兼容 RoleHierarchy 这个 Bean。\n二、通常做法&ensp;&ensp;通常我们做角色继承只需要自定义注入一个 RoleHierarchy 的 Bean 就可以了，就像这样：\n123456@Bean    static RoleHierarchy roleHierarchy() &#123;        RoleHierarchyImpl hierarchy = new RoleHierarchyImpl();        hierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_user&quot;);        return hierarchy;    &#125;\n\n三、试验&ensp;&ensp;准备三个接口，其中 getAll 不设置访问权限，getUser 只允许有 User 权限的用户访问，getAdmin 只允许有 Admin 权限的用户访问。\n1234567891011121314151617@RequestMapping(&quot;/getAll&quot;)public String getAll(@RequestParam(&quot;msg&quot;) String msg) &#123;    return msg + &quot; ALL&quot;;&#125;@RequestMapping(&quot;/getUser&quot;)@PreAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)public String getUser(@RequestParam(&quot;msg&quot;) String msg) &#123;    return msg + &quot; USER&quot;;&#125;@RequestMapping(&quot;/getAdmin&quot;)@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)public String getAdmin(@RequestParam(&quot;msg&quot;) String msg) &#123;    return msg + &quot; ADMIN&quot;;&#125;\n\n然后向登录接口发送请求，在这里用户 1111 的角色是管理员，111 则是普通用户，这两个账号是在保存再数据库中的，登录成功后返回用户名\n\n之后访问 getAll\n\n访问成功,再访问 getAdmin\n也能访问到，最后再访问 getUser 看看角色继承是否有效\n这里报 403 禁止访问了，为了探究是哪出的问题，我们在类 SecurityExpressionRoot 的 hasRole 方法中打个断点，之后一直步入到方法 hasAnyAuthorityName，该方法的第一行是将方法 getAuthoritySet 的结果放到 roleSet 中，根据名字这个方法应该是获取当前用户的角色集合。\n\n步过该方法，发现这集合里面只有 ROLE*ADMIN\n\n方法 hasAnyAuthorityName 后面的部分则是把 haseRole 中的角色加上前缀 ROLE*，并判断这个角色是否在 roleSet 里，那这肯定是不包括的，最后返回 False，所以就访问不到这个接口了。我们重新在发送一次请求到 getUser，步入方法 getAuthoritySet，\n\n其中关键的第三行可以看到就是判断当前对象的 roleHierachy 是否为空，不为空则将返回所有可访问权限的集合\n\n之后将权限集合转换为 Set\n\n但在这里 roleHierachy 是 null 啊，what？我们配置的角色继承哪去了？\n后面去翻了翻 SpringSecurity 的文档，它给的示例是这样的\n12345678@BeanAccessDecisionVoter hierarchyVoter() &#123;    RoleHierarchy hierarchy = new RoleHierarchyImpl();    hierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_STAFF\\n&quot; +            &quot;ROLE_STAFF &gt; ROLE_USER\\n&quot; +            &quot;ROLE_USER &gt; ROLE_GUEST&quot;);    return new RoleHierarchyVoter(hierarchy);&#125;\n\n按照这个方法写了之后依旧还是不行。。。idea 也提示类 AccessDecisionVoter 和 RoleHierarchyVoter 已经弃用了，进入这两个类都提示改用 AuthorizationManager\n在 SpringSecurity 的一个 issue 中发现有关文档中给的示例无效的问题后面的回复中有一个解决方法。\n\nThanks for the report, @istoony. RoleHierarchy bean configuration is not fully ported over as of 6.0.x. As such, I think what should be done here is add a note about that in the documentation and then update it once completed. I’ve also added #12783 detailing what needs to be done to support RoleHierarchy bean configuration.In the meantime, to configure RoleHierarchy for pre-post method security, use DefaultMethodSecurityExpressionHandler:\n\n123456789101112131415@Beanstatic RoleHierarchy roleHierarchy() &#123;    RoleHierarchy hierarchy = new RoleHierarchyImpl();    hierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_STAFF\\n&quot; +            &quot;ROLE_STAFF &gt; ROLE_USER\\n&quot; +            &quot;ROLE_USER &gt; ROLE_GUEST&quot;);    return new RoleHierarchyVoter(hierarchy);&#125;@Beanstatic DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler(RoleHierarchy roleHierarchy) &#123;    DefaultMethodSecurityExpressionHandler expressionHandler = new DefaultMethodSecurityExpressionHandler();    expressionHandler.setRoleHierarchy(roleHierarchy);    return expressionHandler;&#125;\n\n\nAnd to configure it for filter security, use the access(AuthorizationManager) method instead of hasRole, like so:\n\n12345678910AuthorityAuthorizationManager&lt;RequestAuthorizationContext&gt; hasRoleUser =    AuthorityAuthorizationManager.hasRole(&quot;USER&quot;);hasRoleUser.setRoleHierarchy(roleHierarchy);http    .authorizeHttpRequests((authorize) -&gt; authorize        .requestMatchers(&quot;/needs/user/**&quot;).access(hasRoleUser)        .anyRequest().authenticated()    )    // ...\n\n按照这个示例将角色继承的配置修改为\n12345678910111213@Bean    static RoleHierarchy roleHierarchy() &#123;        RoleHierarchyImpl hierarchy = new RoleHierarchyImpl();        hierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_user&quot;);        return hierarchy;    &#125;    @Bean    static DefaultMethodSecurityExpressionHandler methodSecurityExpressionHandler(RoleHierarchy roleHierarchy) &#123;        DefaultMethodSecurityExpressionHandler expressionHandler = new DefaultMethodSecurityExpressionHandler();        expressionHandler.setRoleHierarchy(roleHierarchy);        return expressionHandler;    &#125;\n\n经过测试，角色为 ADMIN 的用户都可以访问到 hasRole(&quot;user&quot;)的接口，并且 user 角色也还是访问不了 hasRole(&quot;ADMIN&quot;)的接口，角色继承生效了！\n通常做法无效的原因在 6.1.0-SNAPSHOT 版本的文档中对应角色继承的位置有这么一个提示\nRoleHierarchy 这个 Bean 还没有适配@EnableMethodSecurity 这个注解，需要等到这个 issues 修完。\n","slug":"SpringSecurity6.0.1中角色继承无效的问题","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"2dc49ca3755c310977384158e8e18daf","title":"Windows搭建RabbitMq集群","content":"一、简述&ensp;&ensp;RabbitMQ 在 Linux 端的集群搭建可参考的教程很多，但 windows 端的相对较少，虽然生产环境肯定还是要在 Linux 上整的，但是本着不整好不痛快的精神，参考了好几篇博客，踩了一些坑，终于搭好了。😆😆😆\n二、步骤集群包括一个主节点，两个从节点，以下是操作步骤\n\n打开 windows 命令提示符，注意不是 powershell(后续需要在这个终端设置变量)\n\n新建三个命令提示符，每个终端负责每个节点的环境配置和启动，在每个命令提示符中依次执行设置环境变量，启动节点的命令。第一、三行命令中的值是端口号，第二行的值是节点名称，可以根据需求更改\n12345# 配置主节点set RABBITMQ_NODE_PORT=5673set RABBITMQ_NODENAME=masterset RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15673&#125;]rabbitmq-server.bat\n\n12345# 配置从1节点set RABBITMQ_NODE_PORT=5674set RABBITMQ_NODENAME=slave1set RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15674&#125;]rabbitmq-server.bat\n\n12345# 配置从2节点set RABBITMQ_NODE_PORT=5675set RABBITMQ_NODENAME=slave2set RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15675&#125;]rabbitmq-server.bat\n新建一个终端，在终端内停止每个节点的运行并重置每个节点(防止创建集群时出现不同步等问题)\n12345678rabbitmqctl.bat -n master stop_apprabbitmqctl.bat -n master resetrabbitmqctl.bat -n slave1 stop_apprabbitmqctl.bat -n slave1 resetrabbitmqctl.bat -n slave2 stop_apprabbitmqctl.bat -n slave2 reset\n启动主节点\n1rabbitmqctl.bat -n master start_app\n从节点挂载到主节点下\n12rabbitmqctl.bat -n slave1 join_cluster master@workMachinerabbitmqctl.bat -n slave2 join_cluster master@workMachine\n启动从节点\n12rabbitmqctl.bat -n slave1 start_apprabbitmqctl.bat -n slave2 start_app\n\n完成这时再进入主节点的控制界面就可以看到三个节点都在线了通过命令 rabbitmqctl.bat cluster_status -n master也可以看到三个节点的运行状况\n123456789101112131415161718192021222324252627282930C:\\Users\\hahaha&gt; rabbitmqctl.bat cluster_status -n masterCluster status of node master@workMachine ...BasicsCluster name: master@workMachineTotal CPU cores available cluster-wide: 48Disk Nodesmaster@workMachineslave1@workMachineslave2@workMachineRunning Nodesmaster@workMachineslave1@workMachineslave2@workMachineVersionsmaster@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1slave1@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1slave2@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1CPU CoresNode: master@workMachine, available CPU cores: 16Node: slave1@workMachine, available CPU cores: 16Node: slave2@workMachine, available CPU cores: 16\n","slug":"Windows搭建RabbitMq集群","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"3d7e70cb4fa6869d52e41f2f04e3c805","title":"集合类","content":"一、内容整理ArrayList底层原理及构造函数相关ArrayList 底层维护一个数组 elementData，共有三个构造函数\n\n无参构造：将一个空数组赋值给 elementData\n参数 int initialCapacity：初始化手动指定数组长度，小于 0 抛出异常，等于 0 将 elementData 赋值为空数组，大于 0 赋值为指定长度的数组\n参数 Collection&lt;? extends E&gt; c：将 c 转化为数组后更具情况赋值\n\n在增加元素时，首先会判断当前数组的空间是否足够，如果不够，调用 grow 方法需要扩容为原大小的 1.5 倍，然后再将元素存储到数组中 size 的位置中\n如何实现数组和 List 之间的转换List 转数组，调用 List 的 toArray 方法，更改数组，list 不会变，因为是将数据拷贝到数组数组转 List，工具类 Arrays 的 asList 方法（注意：返回的 ArrayList 不能操作，因为返回的是 Arrays 内部的类，不是常见的那个），更改数组，list 会变，因为底层只是将数组的地址赋给了 ArrayList 中的数组\nArrayList 和 LinkedList 的区别是什么？ArrayList 底层为数组，LinkedList 底层为链表访问元素时，ArrayList 的时间复杂度为 O(1)，链表为 O(n)LinkedList 在头尾增加或删除时间复杂度为 O(1)，其他部分需要遍历链表时间复杂度为 O(n)ArrayList 在后面增加元素时间复杂度为 O(1)，其他部分需要时间复杂度为 O(n)\n链表占用的空间会大一些，因为还需要存储两个指针\nHashMapHashMap 的实现原理根据 key 计算出 hash 值得到一个索引的位置，然后将元素放置到对应的位置，如果存在元素就将元素挂载到已有元素的下方，变成一个双向链表，当链表长度大于 8，数组长度大于 64 时，会将对应索引位置的链表转换成红黑树\nput 方法的具体流程首先判断当前的数组是否为空，不充足则先扩容，然后再计算 key 的索引值，再查看索引位置是否有元素，已经存在元素则比较索引位置值的 key 和插入数据的 key 是否相同，相同就直接更新，不相同判断是否为红黑树，不是红黑树那就是链表，随后遍历链表，如果存在相同的 key 则更新，遍历完还没有相同的，直接在尾部插入，判断长度是否大于 8，考虑是否需要转化成红黑树，如果是红黑树，则直接执行红黑树的插入方法，插入完成后判断++size 和四分之三数组长度的大小，大于则需要扩容\nHashMap 的扩容机制首先判断是否大于 0，否则直接设置数组容量为 16，阈值为 12 并且新建数组，如果大于 0，则创建值为现在长度的两倍的变量作为新数组的长度，并且创建一个新数组，之后需要遍历数组，如果只有下标位置一个元素就直接放入新数组的对应位置，对应位置由索引模新数组长度计算得到，如果下标位置之后还有元素再判断是否为红黑树，是红黑树则直接添加红黑树，不是红黑树，那么说明是链表，需要遍历链表，对链表的元素做拆分的操作，链表元素的 hash 值模老数组的长度，等于 0 则直接添加到新数组相同下标，其他情况添加到新数组中下标为下标值加上老数组的长度\nHashMap 的寻址算法和数组长度为什么是 2 的 n 次幂因为一个值模 2 的 n 次幂可以转换成（值-1）&amp;2 的 n 次幂便于扩容时对 hash 值进行计算\n二、面试题","slug":"collection","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"71abd5ae262d1609d9544498b5f6da4f","title":"框架","content":"一、内容整理Spring1. 单例 bean 线程安全单例 bean 不是线程安全的\n2. Spring-AOP面向切面编程，可以增强某些类的功能，其中需要设置切面，比如设置加了注解的类方法、某个包下的类，抛出某些异常的类等，另外可以设置环绕或者前置后置等方法\n3. 事务失效的场景\n方法中存在 trycatch，异常已经被内部捕获处理，可以在处理异常时再向外抛出\n方法抛出了检查异常，再注解中加入 rollbackFor = Exception.class 让事务根据所有的异常回滚\n方法不是 public\n\n4. bean 的生命周期\n构造函数创建 bean\n注入相关依赖\n处理 Aware 接口，bean 实现了 Aware 接口就会重写方法执行\n执行后置处理器 BeanPostProcessor 的前置\n执行初始化方法，比如加了 PostContruct 注解的方法\n执行后置处理器 BeanPostProcessor 的后置，通常会对类进行增强\n销毁\n\n5. bean 的循环依赖比如 A 中注入了 B，B 中注入了 Aspring 能为我们解决大多数的循环依赖问题，因为 spring 中存在三个保存 bean 的区域，第一个是单例池，是已经初始化完成的类，第二个保存的是早期的 bean，第三个是保存类工厂\n\n先实例 A 对象，同时会创建 ObjectFactory 对象存入三级缓存 singletonFactories\nA 在初始化的时候需要 B 对象，这个走 B 的创建的逻辑\nB 实例化完成，也会创建 ObjectFactory 对象存入三级缓存 singletonFactories\nB 需要注入 A，通过三级缓存中获取 ObjectFactory 来生成一个 A 的对象同时存入二级缓存，这个是有两种情况，一个是可能是 A 的普通对象，另外一个是 A 的代理对象，都可以让 ObjectFactory 来生产对应的对象，这也是三级缓存的关键\nB 通过从通过二级缓存 earlySingletonObjects 获得到 A 的对象后可以正常注入，B 创建成功，存入一级缓存 singletonObjects\n回到 A 对象初始化，因为 B 对象已经创建完成，则可以直接注入 B，A 创建成功存入一次缓存 singletonObjects\n二级缓存中的临时对象 A 清除\n\nspring 无法解决构造方法中的循环引用，可以再构造方法中加入@Lazy 注解等到需要用到依赖类的时候再创建依赖类\nSpringmvc-执行流程\n请求进来后进入 DispatcherServlet\nDispatcherServlet 调用 HandlerMapper，Handler 根据路径找到对应的处理器，如果有过滤器也一起打包返回给 DispatcherServlet\nDispatcherServlet 再调用 HandlerHandlerAdapter，HandlerHandlerAdapter 负责处理参数和返回值，如果是纯接口将执行的结果转换并且返回，如果是模板，则将结果返回给 DispatcherServlet，之后再由视图解析器解析成 html 返回\n\nSpringboot-自动配置原理@SpringBootApplication 注解中包含 @EnableAutoConfiguration 、@SpringBootConfigration 和 @ComponentScan，关键在于 @EnableAutoConfiguration，该注解通过 @Import注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的 Jar 包的的 classpath 路径下META-INF&#x2F;spring.factories文件中的所配置的类的全类名。\n在这些配置类中所定义的 Bean 会根据条件注解所指定的条件来决定是否需要将其导入到 Spring 容器中。\n一般条件判断会有像 @ConditionalOnClass这样的注解，判断是否有对应的 class 文件，如果有则加载该类，把这个配置类的所有的 Bean 放入 spring 容器中使用。\nspring 框架常见的注解（spring、springmvc、springboot）\nSpring\n配置：@Configuration、@ComponentScan、@Bean\n依赖注入：@Autowired、@Qualifier、@Resourse\n声明 bean：@Component、@Service、@Repository、@Controller\naop：@Aspect、@Before、@After、@Around、@Pointcut\n\n\nSpringMVC：@RequestMapping、@RequestBody、@RequestParam、@PathViriable\nSpringBoot：@SpringBootApplication\n\nMyBatis1. 执行流程\n读取配置文件\n创建 SqlSessionFactory\n使用 SqlSessionFactory 创建 SqlSession\n创建 Excutor\n在 Excutor 中执行，其中包含 MappedStatement 保存了映射信息\n将 java 对象转化成数据库类型\n之后执行\n将类型转化成 java 对象并返回\n\n2. 延迟加载使用及原理在一个对象中存在其他的对象，比如用户实体中存在订单实体，xml 文件中查找用户的订单也是单独的 sql 语句，此时可以设置查找订单的语句为延迟加载，只有访问用户实体中的订单时才会从数据库中查找，延迟加载在底层主要使用的 CGLIB 动态代理完成的\n\n使用 CGLIB 创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的 mapper\n当调用目标方法时，进入拦截器 invoke 方法，发现目标方法是 null 值，再执行 sql 查询\n获取数据以后，调用 set 方法设置属性值，再继续查询目标方法，就有值了\n\n3. 一级、二级缓存二、面试题","slug":"framework","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"723f0bc187c0d9e9f528c9cd6627a1c3","title":"mysql","content":"一、内容整理优化1. 如何定位慢查询使用 skywalking 等工具，追踪分析接口的执行时长，使用 mysql 的慢查询日志\n2. sql 语句执行的很慢，如何分析使用 explan 语句分析 sql 的执行计划，结果会展示走了哪个索引，索引长度走了多少，语句的优化建议等信息。\n3. 索引概念及索引底层数据结构索引是 mysql 额外维护的一些数据，用于快速查找到数据，和排序数据，底层是 B+树，和 B-树相比，B+树每个数据都储存在叶子节点，并且数据之间使用前后指针相连，形成一个双向链表，便于对数据进行范围查询，查找效率也更稳定。\n4. 聚簇索引和非聚簇索引、回表查询聚簇索引是指索引下的是一行的数据，非聚簇索引是指索引下的数据不是完整的一行，回表查询是指走了非聚集索引，但非聚集索引下的数据不完整，需要根据非聚集索引中的聚集索引再去聚集索引中找到完整的数据\n5. 覆盖索引、超大分页优化索引覆盖是指，走非聚集索引，非聚集索引中包含了要查找的所有字段，因此不需要再回表查询，因此我们常常将经常查找的字段设为联合索引，超大分页优化是使用子查询，在子查询中查找到主键的范围，然后再去聚簇索引中查找对应的行，提高性能。\n6. 索引创建的原则\n很长的字段作为索引时使用前缀索引\n对需要经常一起查询的数据创建联合索引\n\n7. 什么情况下索引会失效\n违反最左前缀法则\n索引字段出现条件右边的索引会失效\n出现字符串左边的模糊匹配\n在索引的字段上进行计算\n字符串没有加引号\n\n8. 谈一谈你对 sql 优化的经验\n建表时根据数据的实际情况使用适合的数据类型\n如果字段定长，使用固定长度 char 类型，相比于不定长效率会更高\n为经常一起查询的字段建立索引\n分库分表\n\n事务1. 事务的特性\nA：原子性，一个事务是执行的最小单元\nC：一致性，要么全都执行成功，要么全部执行失败\nI：隔离性，别的事务的操作不会影响当前事务\nD：持久性，事务提交后对数据的更改是永久的\n\n2. 并发事务问题、隔离级别在并发事务中存在三个问题\n\n脏读，读取到了别的事务还没有提交的事务\n不可重复读，一个事务中两次读取到的同一条记录中有字段值不同\n幻读，查找时不存在这条记录，插入时却发现已经存在了这条记录\n\n为了解决这三个问题，事务又有四个不同的隔离级别\n\n读未提交，脏读、不可重复读和幻读都可能出现\n读已提交：只能避免脏读\n可重复读：可以避免脏读和不可重复读\n串行化：可以避免所有问题mysql 默认的隔离级别时可重复读，这四个隔离级别中越往下数据安全性越高，但是性能越差\n\n3. 事务-undo log 和 redo log 的区别undo log 储存的是事务的回滚语句，比如事务中执行 delete，redo log 会生成 insert 语句。\nredo log 储存的是数据页的物理变化，mysql 直接操作的是内存中的缓冲池中的片，按照一定的频率同步到磁盘中，但有可能出现宕机，数据未同步到磁盘，造成数据丢失的情况，undo log 就是记录这种情况下的操作，数据库恢复时，读取 undo log 恢复未同步的数据\n解释一下 mvccmvcc 是多版本并发控制，用于记录多个事务对数据的操作的版本，是的读操作和写操作没有冲突，主要由隐藏字段、undo log 和读视图组成 。\n\n隐藏字段：在每个表中mysql 会默认生成几个字段，包括了当前事务的 id，上一个版本的指针等信息。\nundo log：存储版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本\n\n readView 解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务 id 判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是 rc 隔离级别，每一次执行快照读时生成 ReadView，如果是 rr 隔离级别仅在事务中第一次执行快照读时生成 ReadView，后续复用\n主从同步主库将 DML 和 DDL 生成 binlog 二进制文件，但不包括 selet 和 show 命令，然后从机获取主机中的 binlog，加载到从机的中间日志，从机读取中间日志，执行命令，完成同步\n分库分表二、面试题","slug":"mysql","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"eb5f3adb17521be888d5fac1c7b84dc0","title":"redis","content":"一、内容整理缓存1. 缓存穿透有大量的请求访问不存在的 key，首先访问 redis，发现不存在当前 key 后 后再访问数据库，因为并不存在这条数据，当前查询的结果为 null，也不会在 redis 中建立缓存，导致所有的请求全都打在数据库上，导致数据库崩溃\n\n缓存中添加空值优点：实现简单缺点：造成内存资源的浪费\n布隆过滤器：创建一个比较大的数组，利用比特位，通过计算 key 的多个 hash 值，将对应位的值变为 1，请求时先经过布隆过滤器，通过计算目标 key 的 hash 判断对应位置的值是否全为 1 判断是否存在，但有误判的可能：一个 key 的 hash 对应到两个不同 key 的 hash 的比特位。优点：不会造成内存资源的浪费缺点：增加过滤器，会降低一些性能，实现较为复杂，有一定概率会误判。\n\n1. 缓存击穿某个热点 key 突然失效，所有的请求都打到数据库，导致数据库的崩溃\n\n设置互斥锁：当缓存失效后，通过 setnx 设置一个互斥锁，拿到这把锁的线程去进行缓存重建优点：数据一致性较强缺点：性能较低，可能产生死锁问题\n设置逻辑过期时间：在建立缓存时当前缓存不设置过期时间，而是加入一个逻辑过期时间，查询后直接返回值并判断比较当前时间和逻辑过期时间，如果过期，开启另一个线程进行数据的同步。优点：效率较高，性能不会有明显下降缺点：过期后，返回的仍旧是旧数据，数据一致性较差\n\n2. 缓存雪崩在某个时间，大量的 key 同时失效\n\n在创建缓存时，在设置的过期时间后添加一个随机数\n\n3. 双写一致性数据库和缓存数据的一致性\n\n可以接受一定延时：双删，删除缓存，更新数据库，再删除一次缓存更新数据时分为先更新数据库和先删除缓存，两者都有可能产生数据的不一致其中先删数据库的方式发生的概率要远远小于先删除缓存优点：实现较为简单缺点：延时的时长不好控制，有一定的概率产生脏数据，可以使用消息队列，对缓存进行更改，避免脏数据的产生（canal）\n强一致性：采用的是 redisson 实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据\n\n4. 持久化\nRDB（内存快照）保存的是 redis 某一时刻的数据快照，主线程 fork 一个子线程，在内存空间中共享一个页表，能够访问到相同的内存，子线程完成内存快照的保存，可以通过配置 save 设置多少时间内修改多少个 key 保存快照优点：数据量较小缺点：发生宕机时，丢失的数据相对较多\nAOF（命令）保存的是一条一条的 redis 命令，可以通过更改 appendfsync 配置保存增加命令的时间间隔，通过！！！配置将指令重排，将对同一个 key 的多次操作合并成一个，以减少数据量优点：发生宕机时丢失数据相对较少缺点：数据量较大\n\n5. 数据过期策略当到了 key 设置的过期时间后，从内存中删除 key 的策略\n\n惰性删除：到了过期时间后，不会立即删除内存中的 key 而是等到再次访问这个 key 的时候返回 null并从内存中删除\n定期删除：按照一定的时间间隔扫描所有的 key，发现到了过期时间了再删除，该操作的时间不能超过设置的时长，超过设置时长会直接结束，等待下一轮\n\n6. 数据淘汰策略当系统无可用内存时 redis 的行为，默认设置的是直接拒绝设置 key 的请求，另外还可以设置淘汰策略，例如随机，按照访问频率等，其中有两个重要概念 LRU 和 LFU，LRU（最近最少使用）当前时间减去每个 key 最后一次访问的时间，得到每个 key 没有被访问的时长，LFU（最少频率使用）一段时间内每个 key 的访问次数\n分布式锁\n使用场景分布式系统中一个应用部署在多台服务器上，内存不在同一个空间\n分布式锁-实现原理（setnx、redisson）使用 setnx 命令（实际使用 set lock 1 nx ex 10 的形式，相比 setnx 保证锁和过期时间命令的原子性），如果返回 true 说明拿到了锁，false 则表示没有拿到锁。使用 redisson，redisson 可以控制锁的失效时间和等待时间，执行过程中，会引入一个看门狗机制，每个一段时间会检查业务是否还持有锁，还有锁就给这把锁延长失效时间，没有锁就释放锁。一个客户持有锁的时候，另外的客户进来不会立刻拒绝而是会自旋等待，提高性能，锁可以重入\n\n主从复制\n主从复制、主从同步流程从机发起 replication 请求，携带 repid（数据集 Id）和 offside，主机根据从机 repid 和自己的 repid 是否一致选择全量同步还是增量同步，全量同步时，fork 子线程执行 bgsave 生成 RDB 文件，传输到从机，从机清空数据，加载 RDB，主机生成 RDB 文件时若有新的操作，会将操作加载到一个日志文件，发送 RDB 后再发送日志文件，保证数据的一致性，增量同步时，\n哨兵模式、集群脑裂使用哨兵集群对集群进行监控，发现主节点下线后后，从从节点中选举新的主节点，并通知客户端要往新的主节点写。集群脑裂是指因为网络等原因哨兵发现主节点下线，从从机中选举新主节点，但实际主节点并没有下线，客户端仍旧在主节点写入数据，后续网络恢复正常后，旧的主节点加入集群会变成从节点，会删除已有的所有数据，导致客户端后续写入内容的丢失。\n分片集群、数据读写规则Redis 有数据分片！！！在该模式下，每个数据节点都是含有主从节点的集群，哈希槽，设置 key 时，更具 key 的 hash 值计算出对应的数据节点位置，并且自动路由到对应的数据节点主节点\n\n二、面试题1.2. docker run –name redis -p 6379:6379 -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;data&#x2F;:&#x2F;data&#x2F; -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;log&#x2F;redis-server.log:&#x2F;log&#x2F;redis-server.log -d redis:7.2.2 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf3. docker run –name redis -p 6379:6379 -d redis:7.2.2\n","slug":"redis","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"be447ed25be14672c8ade5d39be9da07","title":"并发编程","content":"一、内容整理多线程基础线程和进程的区别？当系统从磁盘中将硬盘中的某个程序代码到内存，就开启了一个进程，一个进程可以有多个线程，线程由一条一条的指令组成\n进程是运行中程序的实例，包含了线程，以便同时执行多个任务进程间的内存空间不是共享的，但线程中的空间对进程中的线程是共享的线程更轻量，上下文切换的成本比进程更低\n并行和并发有什么区别？并发是不同的线程以极短的时间在 cpu 中交替执行并行是多个线程在不同的 cpu 核心中执行并行是同时执行多个任务的能力，并发是可以应对多个任务的能力\n创建线程的方式\n继承 Thread类，重写 run 方法\n实现 Runnable 接口，实现 run 方法\n实现 Callable 接口，实现 call 方法\n使用线程池创建线程\n\nrunnable 和 callable 有什么区别\nRunnable 接口的方法没有返回值，Callable 接口可以有返回值，通过 FutureTask 中的 get 方法获取异步执行的返回值，但执行这个方法会阻塞主进程\nRunnable 不能抛出异常，Callable 可以抛出异常\n\n线程的 run()和 start()有什么区别？\nrun 只是调用普通方法，可以多次执行\nstart 方法会启动线程，会调用 native 的 start0 方法，只能调用一次\n\n线程包括哪些状态，状态之间是如何变化的\nNew\nRunnable\nBlocked\nWaitting\nTimeWaitting\nTerminated\n\n创建线程时时 New 状态，调用 start 方法后会进入 Runnable 状态，Runnable 状态中会根据争抢 cpu 时间片的情况会在就绪和运行状态来回切换，如果出现需要等待锁，会进入 Blocked 状态，拿到锁后再次变成 Runnable 状态，线程中调用了 wait 方法时会进入 Waitting 状态，调用 notify 或者 notifyAll 方法后，线程被唤醒，进入 Runnable 状态，运行中遇到 sleep 会进入 TimeWaitting 状态，执行完毕或线程死亡后会进入 Terminated 状态。\n新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？在 t2 中调用 t1 的 join 方法，在 t3 中调用 t2 的 join 方法\nnotify()和 notifyAll()有什么区别？notify 只会随机唤醒一个线程，notifyAll 会唤醒所有的线程\n在 java 中 wait 和 sleep 方法的不同？\nwait 是 Object 类中的方法，可以被唤醒，必须先获取 wait 对象的锁，会释放锁，\nsleep 是 Thread 中的静态方法，不可以被唤醒， 不会释放锁\n\n如何停止一个正在运行的线程？使用线程的 interrupt 方法\n线程中并发锁讲一下 synchronized 关键字的底层原理？底层是由 Monitor 实现的，Moniter 是用 C++编写的，进入 synchronized 方法块时，对象锁会先关联 Monitor，Monitor 中存在三个属性，owner：持有锁的线程、entrylist：处于阻塞状态的线程 和 waitset 处于 waitting 状态的线程\nsynchronized 关键字的底层原理-进阶你谈谈 JMM（Java 内存模型）是 java 虚拟机规范中定义的一种内存模型，每个线程中都有自己的工作内存，线程之间无法互相访问，共享的变量存放在主内存中，线程工作时，需要用到共享变量的话会在自己的工作内存中创建一个共享变量的副本，线程只能操作自己工作内存中的副本，由 JMM 负责将副本同步到共享内存和将共享变量加载到线程的工作内存中\nCAS 你知道吗？比较并交换，保证操作的原子性，比较旧的值相同才会将旧的值更改为新的值，CAS 中包含自旋锁，是一种乐观锁，发现旧值不相同时会不断地重置，CAS 的底层时使用 Unsafe 类中的 native 方法，\n请谈谈你对 volatile 的理解\n保证可见性：保证不同线程对变量操作的可见性，会强制将对副本修改的值立刻同步到主存中，其目的时防止 JIT 编译器对代码进行优化\n防止指令重排：在变量的操作中加入屏障，防止其他的写操作到该变量写下面，防止其他读的操作到该变量读上面\n\n什么是 AQS？抽象同步队列，是构建锁和同步组件的基础框架，包含了锁的状态，拿到锁的线程，等待队列的头节点和尾节点，时一种非公平锁\nReentrantLock 的实现原理是由 CAS 和 AQS 实现的，它支持公平锁和非公平锁\nsynchronized 和 Lock 有什么区别synchronized 是关键字，由 c++实现，lock 是接口，由 java 语言实现Lock 支持更细粒度的锁控制，功能更多，支持公平锁，可打断，可超时，多条件变量，有多种不同的实现\n死锁产生的条件以及死锁排查方案线程中同时获取多把锁的情况，jps 获取线程的 PID，再用 jstack 获取线程的运行情况\n聊一下 ConcurrentHashMap是线程安全版本的 HashMap，数据结构和 HashMap 一样，它在空节点插入时是 CAS 的操作，在链表或者红黑树的节点是锁的头节点。\n导致并发程序出现问题的根本原因是什么并发编程三大特性是\n\n原子性：线程要么执行要么不执行\n可见性：对数据副本的修改能及时同步到别的线程\n有序性：防止指令重排违反了特性就可能产生问题\n\n线程池说一下线程池的核心参数（线程池的执行原理知道嘛）线程池有七大参数\n\n核心线程池数\n最大线程数\n非核心线程存活时间\n非核心线程存活时间单位\n阻塞队列\n线程工厂\n拒绝策略\n\n其中拒绝策略是达到最大先乘除，并且阻塞队列也满了的时候拒绝策略分为\n\nAbortPolicy：直接抛出异常，默认策略\nCallerRunsPolicy：用调用者所在的线程来执行任务\nDiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务\nDiscardPolicy：直接丢弃任务\n\n线程池中有哪些常见的阻塞队列常见的有 ArrayBlokingQueue 和 LinkedBlokingQueue不同之处：\n\nArrayBlokingQueue 是有界的，LinkedBlokingQueue 则是可以设置为无界\nArrayBlokingQueue 只有一把锁，锁整个数组，而 LinkedBlokingQueue 有头节点和尾节点两把锁，相对来说加入和取出元素的时候 LinkedBlokingQueue 效率更高一些\n\n如何确定核心线程数\n高并发，任务时间短：N+1，可以减少上下文切换\n并发不高，任务时间较长\nIO 密集型的任务使用 2N+1\ncpu 密集型使用 N+1\n\n\n\n为什么不建议用 Executors 创建线程池记得 java 开发手册里这个是强制的，因为 Executors 创建的线程有最大线程数、阻塞队列的长度为 Integer.MAX_VALUE 的，可能会导致 OOM\n使用场景线程池使用场景\n使用 java 操作大量的数据的时候，操作全部可能导致 OOM，可以使用 CountDownLatch 和线程池分成一个一个的任务执行\n数据汇总，当一个接口需要多个远程调用时，可以将多个调用提交到线程池中同步执行，提高速度\n异步调用，一个接口值的返回不需要等某一个方法执行结束，比如搜索内容是，记录搜索记录和返回搜索结果，添加记录可以提交到线程池中异步执行\n\n如何控制某个方法允许并发访问线程的数量使用 Semaphore，保存的是一个信号量，进入线程的时候请求信号，信号量-1，只有信号量大于 0 才能请求成功，方法结束后，调用释放信号的方法，把信号量加回去。\n谈谈你对 ThreadLocal 的理解ThreadLocal 是解决线程安全的一个操作类，将数据存储到各自线程中，有 set，get 和 remove 三个主要方法\n","slug":"并发编程","date":"2023-12-07T16:34:56.000Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"标题二级标题 {ignore&#x3D;true}三级标题四级标题五级标题六级标题文本样式强调文本加粗文本\n&#x3D;&#x3D;标记文本&#x3D;&#x3D;\n删除文本\n\n引用文本\n\nH2O is 是液体。\n2^10^ 运算结果是 1024\n列表\n项目\n项目\n项目\n\n\n\n\n\n\n项目 1\n项目 2\n项目 3\n\n\n 计划任务\n 完成任务\n\n图片图片: \n带尺寸的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png &#x3D;60x60)\n宽度确定高度等比例的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png &#x3D;60x)\n高度确定宽度等比例的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png &#x3D;x60)\n居中的图片: \n居中并且带尺寸的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png#pic_center &#x3D;60x60)\n居右的图片: \n链接链接: link\n代码片下面展示一些 内联代码片。\n12// An highlighted blockvar foo = &quot;bar&quot;;\n\n表格\n\n\n项目\nValue\n\n\n\n电脑\n$1600\n\n\n手机\n$12\n\n\n导管\n$1\n\n\n\n\n\nColumn 1\nColumn 2\n\n\n\ncentered 文本居中\nright-aligned 文本居右\n\n\n注脚一个具有注脚的文本。^1\n注释Markdown 将文本转换为 HTML。\n*[HTML]: 超文本标记语言\n自定义列表MarkdownText-to-HTML conversion toolAuthors: JohnLukeLaTeX 数学公式Gamma 公式展示 $\\Gamma(n) &#x3D; (n-1)!\\quad\\foralln\\in\\mathbb N$ 是通过 Euler integral\n$$\\Gamma(z) &#x3D; \\int_0^\\infty t^{z-1}e^{-t}dt,.$$\n插入甘特图1234567gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划中               :         des3, after des2, 5d\n\n插入 UML 图123456789sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?\n\n插入 Mermaid 流程图12345graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D\n\n插入 Flowchart 流程图12345graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;\n\n插入 classDiagram 类图12345678910111213141516classDiagram    Class01 &lt;|-- AveryLongClass : Cool    &lt;&lt;interface&gt;&gt; Class01    Class09 --&gt; C2 : Where am i?    Class09 --* C3    Class09 --|&gt; Class07    Class07 : equals()    Class07 : Object[] elementData    Class01 : size()    Class01 : int chimp    Class01 : int gorilla    class Class10 &#123;        &gt;&gt;service&gt;&gt;        int id        size()    &#125;\n","slug":"MarkDown_All_In_One","date":"2023-12-07T16:06:54.038Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"docker run –name skywalking-oap-server –restart always -e TZ&#x3D;Asia&#x2F;Shanghai –link elasticsearch7:elasticsearch7 -e SW_STORAGE&#x3D;elasticsearch -e SW_STORAGE_ES_CLUSTER_NODES&#x3D;elasticsearch7:9200 -d -p 12800:12800 -p 11800:11800 apache&#x2F;skywalking-oap-server\ndocker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8088:8080 –link skywalking-oap:oap -e SW_OAP_ADDRESS&#x3D;http://oap:12800 apache&#x2F;skywalking-uidocker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8088:8080 –link skywalking-oap-server:skywalking-oap-server -e SW_OAP_ADDRESS&#x3D;http://localhost:12800 apache&#x2F;skywalking-ui\ndocker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8080:8080 –link skywalking-oap:oap -e SW_OAP_ADDRESS&#x3D;http://oap:12800 apache&#x2F;skywalking-ui:9.2.0\n-DSW_AGENT_NAME&#x3D;dispatcher-service -DSW_AGENT_COLLECTOR_BACKEND_SERVICES&#x3D;127.0.0.1:11800 -javaagent:D:\\softWare\\apache-skywalking-java-agent-8.16.0\\skywalking-agent\\skywalking-agent.jar\n","slug":"skywalking","date":"2023-12-07T16:06:54.030Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"docker run -d --name nacos -p 3333:8848 -p 4333:9848 -p 9849:9849 --privileged=true -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -v /f/docker/nacos/logs/:/home/nacos/logs -v /f/docker/nacos/conf/:/home/nacos/conf/ nacos/nacos-server:v2.2.0\n","slug":"dockerCmd","date":"2023-12-07T16:06:53.942Z","categories_index":"","tags_index":"","author_index":"孙冬冬"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-12-07T15:15:01.504Z","categories_index":"","tags_index":"","author_index":"孙冬冬"}]