<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FinancialBigData</title>
      <link href="/2023/12/08/FinancialBigData/"/>
      <url>/2023/12/08/FinancialBigData/</url>
      
        <content type="html"><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h3 id="大数据-2001-孙啸冬"><a href="#大数据-2001-孙啸冬" class="headerlink" title="大数据 2001 孙啸冬"></a>大数据 2001 孙啸冬</h3><ul><li>1.爬取数据<ul><li>(1) 爬取时以股票代码作为 URL 中的参数传入，但遇到没有当前股票代码时 DOM 树的结构和正常的不一样，导致运行报错<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法：在爬取前先用request库中的get方法获取URL的状态码，状态码为<span class="number">200</span>时再继续</span><br></pre></td></tr></table></figure></li><li>(2) 爬取的页面中的数据是通过 js 渲染的，一开始爬取的发现表格只有表头没有内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">解决方法：用HTML_Session库</span><br><span class="line">//创建HTMLSession对象</span><br><span class="line">session = HTMLSession()</span><br><span class="line">//session设置URL</span><br><span class="line">first_page = session.get(url)</span><br><span class="line">//渲染<span class="number">0.5</span>s</span><br><span class="line">first_page.html.render(sleep=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></li><li>(3) 在爬取东方财富网中的数据时，每爬几个就会出现连接被断开的情况，寻找解决方法时想到了用 PowerAutomate 来自动化运行，流程如下图所示：当 vscode 运行窗口出现报错时将 Ctrl+Shift+F5 发送到 vscode 窗口重新运行<br><img src="/image/FinancialBigData/1680161235760.png" alt="1680161235760"></li><li>(4) 通过<code>tushare</code>的 api 获取数据，将股票代码依次传入 api，在这个过程中碰到了一个问题是判断有没有返回的数据，使用<code>result==None</code>的话，返回正常的<code>DataFrame</code>的时候报错说不支持这样的操作，建议用<code>empty</code>方法判断是否为空，但是没有找到的画返回的又是<code>None</code>，最后用<code>isinstance</code>方法解决，返回对象是否是某类示例的 boolean 值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(tmp, pd.DataFrame)</span><br></pre></td></tr></table></figure></li></ul></li><li>2.处理 JSON 数据<br>JSON 中的列表可以用列表表示，对象则可以用字典来表示，本次使用中最后直接把字典传入<code>json.dump</code>函数中即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">result = &#123;date: date <span class="keyword">for</span> date <span class="keyword">in</span> dates[<span class="number">1</span>:-<span class="number">1</span>]&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> dates[<span class="number">1</span>:-<span class="number">1</span>]:</span><br><span class="line">    b = a.get_group(date)</span><br><span class="line">    s = []</span><br><span class="line">    h = []</span><br><span class="line">    <span class="keyword">for</span> index, i <span class="keyword">in</span> b[b.<span class="built_in">type</span> == <span class="string">&#x27;深市&#x27;</span>].iterrows():</span><br><span class="line">        s.append([i[<span class="string">&quot;成交量&quot;</span>], i[<span class="string">&quot;净流出&quot;</span>], i[<span class="string">&#x27;code&#x27;</span>],  i[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;深市&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> index, i <span class="keyword">in</span> b[b.<span class="built_in">type</span> == <span class="string">&#x27;沪市&#x27;</span>].iterrows():</span><br><span class="line">        h.append([i[<span class="string">&quot;成交量&quot;</span>], i[<span class="string">&quot;净流出&quot;</span>], i[<span class="string">&#x27;code&#x27;</span>],  i[<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;沪市&#x27;</span>])<span class="number">1</span></span><br><span class="line">    result[date] = &#123;<span class="string">&quot;S&quot;</span>: s, <span class="string">&quot;H&quot;</span>: h&#125;</span><br><span class="line">json.dump(result, f, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li>3.vue 中的问题<ul><li>(1) 动态图定时器<br>vue 中主要问题在最后动态的散点图中，我是想实现一个点击暂定，点击播放继续播放的效果，理想的实现方式是开始播放时创建定时器，点击停止时销毁定时器，根据文档，在<code>setOption</code>方法将图挂载到 DOM 后就设置定时器，这样的话第一次有效，问题是每次播放后都会再创建一个定时器，定时器中是否更改数据是根据绑定的<code>playing</code>决定的，如果<code>playing==true</code>才更改数据，从而使图表会有根据时间动态播放的效果。于是和往常一样在组件中定义一个变量<code>interval</code>，在挂在后调用初始化方法，在初始化时创建定时器并将值赋给<code>interval</code>，后面根据<code>playing</code>属性的改变创建和销毁定时器，但在实际中发现会有多个定时器同时在工作，多次点击日历后，会出现多个定时器以相隔很短的时间到达设定时间，散点图会出现抽风的情况，目前还未能解决。</li><li>(2) 图表展示过后再回到前面的图表，控制台会有警告说当前画图的元素已经在 DOM 树上了，可是我看了下也没有在，只存在当前图标元素，可能和 UI 框架切换标签的逻辑有关，目前也还没有解决。</li></ul></li><li>4.非技术问题<ul><li>(1)审题不清：一开始没有看仔细导致后面发现还有缺的数据</li><li>(2)沟通问题：爬数据和处理数据没有沟通好，导致后面字段不能很好理解</li><li>(3)规划问题：分配好工作后大家都是按照自己的那部分切入，往往是遇到问题了再去解决，很多时候就只能放弃一些效果或者做了无用功，应该一开始就有大致的规划，需要哪些数据，画什么图，要怎样的效果，大家商量一些，有个较为细致的工作内容后再开始工作。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2023/12/08/python/"/>
      <url>/2023/12/08/python/</url>
      
        <content type="html"><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h3 id="大数据-2001-孙啸冬"><a href="#大数据-2001-孙啸冬" class="headerlink" title="大数据 2001 孙啸冬"></a>大数据 2001 孙啸冬</h3><ul><li>1.DataFrame 类读取一列的方式为<code>dataFrame[‘列名’]</code></li><li>2.DataFrame 类中一列为 Series 类</li><li>3.将字符串转为时间对象为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strptime(字符串,<span class="string">&quot;%a, %d %b %Y %H:%M:%S GMT&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>4.时间对象转换为时间戳：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.mktime(struct_time)</span><br></pre></td></tr></table></figure><ul><li>5.遍历 DataFrame 时可以用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> dataFrame.iterrows():</span><br></pre></td></tr></table></figure><ul><li>6.解析 JSON 方式为<code>json.loads(Str)</code></li><li>7.将 Series 中每项都进行处理可以用 map，例如把数据中作者那列的字符串用空格分隔并转化为列表：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataRaw[<span class="string">&#x27;authors&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: np.array(x.split(<span class="string">&#x27;,&#x27;</span>)))</span><br></pre></td></tr></table></figure><ul><li>8.选取 DataFrame 中的多列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataRaw[[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span><span class="string">&#x27;versionsCount&#x27;</span>, <span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;categories&#x27;</span>, <span class="string">&#x27;update_date&#x27;</span>]]</span><br></pre></td></tr></table></figure><ul><li>9.选取 DataFrame 中符合一定条件的行，例如选取 id 列中专业符合正则表达式的行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataRaw[<span class="string">&#x27;id&#x27;</span>][dataRaw.categories.<span class="built_in">str</span>.contains(<span class="string">&#x27;math.[A-Z]+&#x27;</span>)]</span><br></pre></td></tr></table></figure><ul><li>10.画图时显示调用<code>plt.show()</code>即可不显示相关文字</li><li>11.画图时设置 x 轴标签的大小和旋转角度可以用以下方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">32</span>), labels=tmp[<span class="string">&#x27;type&#x27;</span>], rotation=<span class="number">43</span>, fontsize=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><ul><li>12.对 Series 统计可以用以下方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataRaw[<span class="string">&#x27;update_date&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure><ul><li>13.对 Series 排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataRaw[<span class="string">&#x27;update_date&#x27;</span>].sort_index()</span><br></pre></td></tr></table></figure><ul><li>14.在画时间序列图的时候发现 x 轴时这一整年的刻度，全部挤在一起看着非常难受，百度后发现以下方式更改子图的刻度密度，缺点是上面会多出一张多余的空白子图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(rotation=<span class="number">43</span>, fontsize=<span class="number">8</span>)</span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.plot(dataRaw[<span class="string">&#x27;update_date&#x27;</span>].value_counts().sort_index())</span><br><span class="line">ax.xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">20</span>))</span><br><span class="line">plt.axis()</span><br><span class="line">plt.xticks(rotation=<span class="number">43</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>15.画词云图的方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</span><br><span class="line"><span class="comment"># 需要绘制的目标字符串</span></span><br><span class="line">string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 停止词</span></span><br><span class="line">stopword = [<span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;of&#x27;</span>, <span class="string">&#x27;with&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;by&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;to&#x27;</span>]</span><br><span class="line"><span class="comment"># 读取文件设置词云图的底图</span></span><br><span class="line">d = path.dirname(__file__) <span class="keyword">if</span> <span class="string">&quot;__file__&quot;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">else</span> os.getcwd()</span><br><span class="line">alice_mask = np.array(Image.<span class="built_in">open</span>(path.join(d, <span class="string">&quot;alice_mask.png&quot;</span>)))</span><br><span class="line"><span class="comment"># 用相关属性构造WordCloud对象</span></span><br><span class="line">wc = WordCloud(</span><br><span class="line">    background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    width=<span class="number">1000</span>,</span><br><span class="line">    height=<span class="number">800</span>,</span><br><span class="line">    mask=alice_mask,</span><br><span class="line">    stopwords=stopword</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 生成每个词出现的频率</span></span><br><span class="line">wc.generate_from_text(string)</span><br><span class="line"><span class="comment"># 将词的颜色设置为底图位置上对应的颜色</span></span><br><span class="line">wc.recolor(color_func=ImageColorGenerator(alice_mask))</span><br><span class="line"><span class="comment"># 绘制图片</span></span><br><span class="line">wc.to_image()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>So, what&#39;s next</title>
      <link href="/2023/12/08/So-what-s-next/"/>
      <url>/2023/12/08/So-what-s-next/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/2213682/146607186-8e13ddef-26a4-4ebf-befd-5aac9d77c090.png" alt="logo"></p><div align="center"><p><a href="https://opencollective.com/core-js"><img src="https://opencollective.com/core-js/all/badge.svg?label=fundraising" alt="fundraising"></a> <a href="https://github.com/zloirock/core-js/blob/master/CONTRIBUTING.md"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs welcome"></a> <a href="https://www.npmjs.com/package/core-js"><img src="https://img.shields.io/npm/v/core-js.svg" alt="version"></a> <a href="https://npm-stat.com/charts.html?package=core-js&package=core-js-pure&package=core-js-compat&from=2014-11-18"><img src="https://img.shields.io/npm/dm/core-js.svg?label=npm%20i%20core-js" alt="core-js downloads"></a> <a href="https://npm-stat.com/charts.html?package=core-js&package=core-js-pure&package=core-js-compat&from=2014-11-18"><img src="https://img.shields.io/npm/dm/core-js-pure.svg?label=npm%20i%20core-js-pure" alt="core-js-pure downloads"></a> <a href="https://www.jsdelivr.com/package/npm/core-js-bundle"><img src="https://data.jsdelivr.com/v1/package/npm/core-js-bundle/badge?style=rounded" alt="jsDelivr"></a></p></div><blockquote><p>If you are looking for <code>core-js</code> documentation, it’s temporarily moved <a href="https://github.com/zloirock/core-js/blob/master/ORIGINAL_README.md">here</a>.</p><p>Later, this post will be available <a href="https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md">by this link</a>.</p></blockquote><h1 id="So-what’s-next"><a href="#So-what’s-next" class="headerlink" title="So, what’s next?"></a>So, what’s next?</h1><p>Hi. I am (<strong><a href="https://github.com/zloirock">@zloirock</a></strong>) a full-time open-source developer. I don’t like to write long posts, but it seems this is high time to do it. Initially, this post was supposed to be a post about the start of active development of the new major version of <code>core-js</code> and the roadmap (it was moved to <a href="#roadmap">the second half</a>), however, due to recent events, became a really long post about many different things… I’m fucking tired. Free open-source software is fundamentally broken. I could stop working on this silently, but I want to give open-source one last chance.</p><details><summary><b>🔻 Click to see how you can help 🔻</b></summary><p>If you or your company use <code>core-js</code> in one way or another and are interested in the quality of your supply chain, support the project:</p><ul><li><a href="https://opencollective.com/core-js"><strong>Open Collective</strong></a></li><li><a href="https://patreon.com/zloirock"><strong>Patreon</strong></a></li><li><a href="https://boosty.to/zloirock"><strong>Boosty</strong></a></li><li><strong>Bitcoin ( bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz )</strong></li><li><a href="https://user-images.githubusercontent.com/2213682/219464783-c17ad329-17ce-4795-82a7-f609493345ed.png"><strong>Alipay</strong></a></li></ul><p><strong>Write me if you want to offer a good job on Web-standards and open-source.</strong></p></details><h2 id="What-is-core-js"><a href="#What-is-core-js" class="headerlink" title="What is core-js?"></a>What is <a href="https://github.com/zloirock/core-js"><code>core-js</code></a>?</h2><ul><li>It is the most popular and the most universal polyfill of the JavaScript standard library, which provides support for the latest ECMAScript standard and proposals, from ancient ES5 features to bleeding edge features like <a href="https://github.com/tc39/proposal-iterator-helpers">iterator helpers</a>, and web platform features closely related to ECMAScript, like <code>structuredClone</code>.</li><li>It is the most complex and comprehensive polyfill project. At the time of publishing this post, <code>core-js</code> contains about a half thousand polyfill modules with different levels of complexity - from <code>Object.hasOwn</code> or <code>Array.prototype.at</code> to <code>URL</code>, <code>Promise</code> or <code>Symbol</code> — that designed to work together. With another architecture, each of them could be a separate package - however, it is not so convenient.</li><li>It is maximally modular — you can easily (or even automatically) choose to load only the features you will be using. It can be used without polluting the global namespace (someone calls such a use case “ponyfill”).</li><li>It is designed for integration with tools and provides all that’s required for this — for example, <code>@babel/preset-env</code>, <code>@babel/transform-runtime</code>, and similar SWC features are based on <code>core-js</code>.</li><li>It is one of the main reasons why developers can use modern ECMAScript features in their development process each day for many years, but most developers just don’t know that they have this possibility because of <code>core-js</code> since they use <code>core-js</code> indirectly as it’s provided by their transpilers &#x2F; frameworks &#x2F; intermediate packages like <code>babel-polyfill</code> &#x2F; etc.</li><li>It is not a framework or a library, which usage require the developer to know their API, periodically look at the documentation, or at least remember that he or she is using it. Even if developers use <code>core-js</code> directly — it’s just some lines of import or some lines in the configuration (in most cases — with mistakes, since almost no one read the documentation), after that, they forget about <code>core-js</code> and just use provided by <code>core-js</code> features from web-standards — but sometimes this is the most of JS standard library that they use.</li></ul><p><a href="https://npm-stat.com/charts.html?package=core-js&package=core-js-pure&package=core-js-bundle&from=2014-11-18">About 9 billion NPM downloads &#x2F; 250 million NPM downloads for a month</a>, 19 million dependent GitHub repositories (<a href="https://github.com/zloirock/core-js/network/dependents?package_id=UGFja2FnZS00ODk5NjgyNDU=">global</a> ⋃ <a href="https://github.com/zloirock/core-js/network/dependents?package_id=UGFja2FnZS00MjYyOTI0Ng==">pure</a>) - big numbers, however, they do not show the real spread of <code>core-js</code>. Let’s check it.</p><p>I wrote <a href="https://github.com/zloirock/core-js/blob/master/scripts/usage/usage.mjs">a simple script</a> that checks the usage of <code>core-js</code> in the wild by the Alexa top websites list. We can detect obvious cases of <code>core-js</code> usage and used versions (only modern).</p><p align="center"><img alt="usage" src="https://user-images.githubusercontent.com/2213682/218452738-859e7420-6376-44ec-addd-e91e4bcdec1d.png" /></p><p>At this moment, this script running on the TOP 1000 websites <strong>detects usage of <code>core-js</code> on <a href="https://gist.github.com/zloirock/7ad972bba4b21596a4037ea2d87616f6">52%</a> of tested websites</strong>. Depending on the phase of the moon (the list, websites, etc. are not constants), results may vary by a few percent. However, it’s just a naive detection on initial pages using a modern browser that loses many cases, <strong>manual check shows that it’s additional dozens of percent</strong>. For example, let’s leave the initial pages of some websites from the screenshot above where <code>core-js</code> was <strong>not</strong> found by this script, without repetition of each company (at first — MS that’s already on the screenshot) websites (be patient, after the series of screenshots the number of pictures will decrease):</p><p align="center"><img alt="whatsapp" width="720" src="https://user-images.githubusercontent.com/2213682/153953087-8e3891aa-f00a-4882-a338-f4cc7496581b.png" /></p><hr><p align="center"><img alt="linkedin" width="720" src="https://user-images.githubusercontent.com/2213682/190879234-30c15dbb-cd5e-4056-8f32-2eac67ef9e89.png" /></p><hr><p align="center"><img alt="netflix" width="720" src="https://user-images.githubusercontent.com/2213682/213377001-2af36bac-0577-4e34-a4fc-a49ca06e9f04.png" /></p><hr><p align="center"><img alt="qq" width="720" src="https://user-images.githubusercontent.com/2213682/213378031-57496cb0-b6b6-4cc8-9656-f126820db26f.png" /></p><hr><p align="center"><img alt="ebay" width="720" src="https://user-images.githubusercontent.com/2213682/213379258-eba54efb-1c65-451a-91af-9f9978ece5a7.png" /></p><hr><p align="center"><img alt="apple" width="720" src="https://user-images.githubusercontent.com/2213682/161145359-812efe4c-33c9-4905-96b9-fef23d2d969e.png" /></p><hr><p align="center"><img alt="fandom" width="720" src="https://user-images.githubusercontent.com/2213682/218451581-5cae922c-f782-4e44-8385-a443ef0f8232.png" /></p><hr><p align="center"><img alt="pornhub" width="720" src="https://user-images.githubusercontent.com/2213682/174662177-5767c34b-f347-4045-96da-5b0783a1345b.png" /></p><hr><p align="center"><img alt="paypal" width="720" src="https://user-images.githubusercontent.com/2213682/218453759-d15fc6c4-4246-479d-aea6-b9123ecb59a2.png" /></p><hr><p align="center"><img alt="binance" width="720" src="https://user-images.githubusercontent.com/2213682/213380797-70a61338-2152-4642-b0e7-affebe2c3b71.png" /></p><hr><p align="center"><img alt="spotify" width="720" src="https://user-images.githubusercontent.com/2213682/213381068-fb73821f-3cfa-4f37-9096-305587c16ef8.png" /></p><p><strong>With such a manual check, you can find <code>core-js</code> on about 75-80 of the top 100 websites</strong> while the script found it on about 55-60. On a larger sample the percentage, of course, decreases.</p><p><a href="https://www.wappalyzer.com/technologies/javascript-libraries/">Wappalyzer</a> allows detection of used technologies, including <code>core-js</code>, with a browser plugin and has previously shown interesting results, but now on their website, all the most popular technologies’ public results are limited to only about 5 million positives. Statistics based on Wappalyzer results are available <a href="https://almanac.httparchive.org/en/2022/javascript#library-usage">here</a> and show <code>core-js</code> on 41% and 44% of 8 million mobile and 5 million desktop tested pages. <a href="https://trends.builtwith.com/javascript/core-js">Built With at this moment shows <code>core-js</code> on 54% of TOP 10000 sites</a> (however, I’m not sure about the completeness of their detection and see the graph from another reality).</p><p>Anyway, we can say with confidence that <strong><code>core-js</code> is used by most of the popular websites</strong>. Even if <code>core-js</code> is not used on the main site of any large corporation, it’s definitely used in some of their projects.</p><p>What JS libraries are more widespread on websites? It’s not <a href="https://trends.builtwith.com/javascript/React">React</a>, <a href="https://trends.builtwith.com/javascript/lodash">Lodash</a>, or any other most talked-about library or framework, I am pretty sure only about <a href="https://trends.builtwith.com/javascript/jQuery">“good old” jQuery</a>.</p><p>And <code>core-js</code> is not only about websites frontend — it’s used almost everywhere where JavaScript is used — but I think that’s more than enough statistics.</p><p align="center"><img alt="github" src="https://user-images.githubusercontent.com/2213682/211223204-ec62ea94-1df8-4a91-a9b2-4e85aef24677.png" /></p><p>However, for the above reasons, <a href="https://2022.stateofjs.com/en-US/other-tools"><strong>almost no one remembers that he or she uses <code>core-js</code></strong></a>.</p><p>Why am I posting this? No, not to show how cool I am, but to show how bad everything is. Read on.</p><hr><h2 id="Let’s-start-the-next-part-with-one-popular-xkcd-picture"><a href="#Let’s-start-the-next-part-with-one-popular-xkcd-picture" class="headerlink" title="Let’s start the next part with one popular xkcd picture"></a>Let’s start the next part with one popular <code>xkcd</code> picture</h2><p><a href="https://xkcd.com/2347/"><p align="center"><img alt="xkcd" src="https://user-images.githubusercontent.com/2213682/113476934-c70f0900-94a8-11eb-8723-d080f129a449.png" /></p></a></p><h3 id="Beginning"><a href="#Beginning" class="headerlink" title="Beginning"></a>Beginning</h3><p>I switched my development stack to full-stack JavaScript in 2012. It was a time when JavaScript still was too raw - IE still was more popular than anything else, ES3 era browsers still occupied a significant part of the web, the latest NodeJS version was 0.7 - it was just starting its way. JavaScript still was not adapted for writing serious applications and developers solved problems of lack of required language syntax sugar with compilers from languages like CoffeeScript and lack of proper standard library with libraries like Underscore. However, it wasn’t a standard - over time, these languages and libraries become obsolete together with the projects that use them. So, I took all news of the upcoming ECMAScript <del>Harmony</del> 6 standard with great hope.</p><p>Given the prevalence of old JavaScript engines and the fact that users were in no hurry and often did not have the opportunity to abandon them, even in the case of quick and problem-free adoption of the new ECMAScript standard, the ability to use it only through JavaScript engines was postponed for many and many years. But it was possible to try to get support features from this standard using some tools. Transpilers (this word was not as popular as now) should have to solve the problem with the syntax, and polyfills - with the standard library. However, at that time the necessary toolkit was only just beginning to emerge.</p><p>It was a time when ECMAScript transpilers started to become popular and develop actively. However, at the same time, polyfills almost have not evolved according to users’ and real-life projects’ needs. They were not modular. They were not been able to use without global namespace pollution - so they were not suitable for libraries. They were not one complex - it was required to use some different polyfill libraries from different authors and somehow make them work together - but in some cases, it was almost impossible. Too many necessary fundamental language features were just missed.</p><p>To fix those problems, at the end of 2012, initially for my own projects, I started to work on the project that later was called <code>core-js</code>. I wanted to make the life of all JS developers easier and in November 2014, I published <code>core-js</code> as an open-source project. <em>Maybe it was the biggest mistake in my life.</em></p><p>Since I was not the only one who faced these issues, after a few months, <code>core-js</code> has already become the de facto standard of JavaScript standard library features polyfill. <code>core-js</code> had been integrated into Babel (<code>6to5</code> at that moment) that appeared a couple of months before <code>core-js</code> publishing - some of mentioned above issues were critical for this project too. <code>core-js</code> began to be distributed as <code>6to5/polyfill</code>, after rebranding - <code>babel-polyfill</code>. After some months of collaboration, has appeared a tool that became <code>babel-runtime</code> after rebranding and evolution. After some months <code>core-js</code> was integrated into the key frameworks.</p><h3 id="Ensuring-compatibility-for-the-whole-Web"><a href="#Ensuring-compatibility-for-the-whole-Web" class="headerlink" title="Ensuring compatibility for the whole Web"></a>Ensuring compatibility for the whole Web</h3><p>I didn’t promote myself or the project. <em>This is the second mistake.</em> <code>core-js</code> hadn’t a website or social media accounts, only GitHub. I did not show up at conferences to talk about it. I almost didn’t write posts about it. I was just making a really useful and wanted part of the modern development stack and I was happy about that. I gave developers a chance to use the most modern and really necessary JavaScript features without waiting for years until they are implemented in all required engines, without thinking about compatibility and bugs - and they started to use it. The spread of the project had grown exponentially - very soon it was already used on dozens of percent of popular websites.</p><p>However, it was just the start of the required work. Many years of hard work followed. Almost every day I spent some hours on <code>core-js</code> and related projects (mainly Babel and <a href="https://kangax.github.io/compat-table/es2016plus/"><code>compat-table</code></a>) maintenance.</p><p><img src="https://user-images.githubusercontent.com/2213682/218516268-6ec765a5-50df-4d45-971f-3c3fc4aba7a1.png" alt="github"></p><p><code>core-js</code> is not a several lines library that you can write and forget about it. Unlike the vast majority of libraries, it’s bound to the state of the Web. It should react to any change of JavaScript standards or proposals, to any new JS engine release, to any detection of a bug in JS engines, etc. After ECMAScript <del>6</del> 2015 followed new proposals, new versions of ECMAScript, new non-ECMAScript web standards, new engines and tools, etc. The evolution, the improvement of the project, and the adaptation to the current state of the Web have never stopped - and almost all of this work remains not visible to the average user.</p><p>The scale of required work was constantly growing.</p><p>I tried to find other maintainers or at least constant contributors for <code>core-js</code> in different ways for a long time, but all attempts have failed. Almost every JS developer used <code>core-js</code> indirectly and knew, for example, <code>babel-polyfill</code>, <code>babel-runtime</code>, or that his framework polyfill all required features, but almost no one knew <code>core-js</code>. In some posts about polyfilling where <code>core-js</code> was mentioned, it was called “a small library”. It was not a trendy and widely discussed project, so why help maintain it if it works great anyway? Over time I lost hope for it, but I felt a responsibility to the community, so I was forced to continue working alone.</p><p>After a few years combining full-time work and FOSS became almost impossible - no one wanted to pay money for the working time devoted to FOSS, non-working hours were not enough, and sometimes <code>core-js</code> required complete immersion for weeks. I thought that proper polyfilling is required for the community and money was not my priority.</p><p>I left a high-paying job and did not accept some very good options because in those positions I did not have the opportunity to devote enough time to work on open-source. I started to work on open-source full-time. No one paid me for it. I hoped sooner or later to find a job where I could fully dedicate myself to open-source and web standards. Periodically, I earned the money, required for life and work on FOSS, on short-term contracts. I returned to Russia, where it was possible to have a decent standard of living for relatively small money. <em>One more mistake - as you will see below, money matters.</em></p><hr><p>Until April 2019, for about one and a half years as a whole and about a half-year full-time without distraction to any other work, I worked on <a href="https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md">the <code>core-js@3</code> with a fundamental improvement of polyfilling-related Babel tools</a>, the basement of the toolkit generation that now is used almost everywhere.</p><h3 id="Accident"><a href="#Accident" class="headerlink" title="Accident"></a>Accident</h3><p>Shit happened 3 weeks after the <code>core-js@3</code> release. One April night, at 3 AM, I was driving home. Two deadly drunk 18-years-old girls in dark clothes decided somehow <em>to crawl</em> across a poorly lit highway - one of them lay down on the road, another sat down and dragged the first, but not from the road - directly under my wheels. That’s what the witnesses said. I had absolutely no chance to see them. One more witness said that before the accident they were just jokingly fighting on the road. Nothing unusual, it’s Russia. One of them died and another girl went to a hospital. However, even in this case, according to Russian arbitrage practice, if the driver is not a son of a deputy or someone like that, he almost always will be found guilty - he should see and anticipate everything, and a pedestrian owes nothing to anyone. I could end up in prison for a long time, IIRC later the prosecutor requested 7 years.</p><p>The only way not to end up in prison was reconciliation with “victims” - a standard practice after such accidents - and a good lawyer. Within a few weeks after the accident, I received financial claims totaling about 80 thousand dollars at the exchange rate at that time from “victims’” relatives. A significant amount of money was also needed for a lawyer.</p><p>Maybe it’s not inconceivable much money for a good software engineer, but, as I wrote a little above, for a long time I worked on the <code>core-js@3</code> release full time. Of course, no one paid me for this work, and I completely exhausted all my financial reserves, so, sure, I hadn’t such money and I didn’t have a chance to find the required money from available sources. The time I had was running out.</p><h3 id="Fundraising"><a href="#Fundraising" class="headerlink" title="Fundraising"></a>Fundraising</h3><p>By that time <code>core-js</code> already was used almost as widely as it’s now. As I wrote above, for a long time I looked for contributors for <code>core-js</code> without any success. However, <code>core-js</code> is a project that should be actively maintained and it can’t stay just frozen. My long-term imprisonment would have caused problems not only for me - but it’s also the death of <code>core-js</code> and problems for all who use it - for half of the Web. The notorious <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a>.</p><p>Some months before that, I started raising funds to support the <code>core-js</code> development (mainly it was posted READMEs on GitHub and NPM). The result was… $57 &#x2F; month. Fair pay for full-time work on ensuring compatibility for the whole web 😂</p><p>I decided to make a little experiment - to ask for help from the <code>core-js</code> users - those who will suffer if <code>core-js</code> will be left without maintenance. I added a message on <code>core-js</code> installation:</p><p><img src="https://user-images.githubusercontent.com/2213682/153024428-28b8102c-ce08-461c-af99-d0417dc7d2cd.png" alt="postinstall"></p><p>I understood that hardly I’ll get all the required money on donations, however, every dollar mattered. I added a job search message to get a chance to earn another part. I was thinking that some lines in the NPM installation log asking to help, which can be hidden if it’s required, is an acceptable price for using <code>core-js</code>. The original plan was to delete this post in a few weeks, but everything went against the plan. How wrong I was about people…</p><h3 id="Hate"><a href="#Hate" class="headerlink" title="Hate"></a>Hate</h3><p>Of course, I expected that someone would not like to see a request for help in their console, but the continuous stream of hate that I began to receive went through the roof. It was hundreds of messages, posts, and comments for a day. All this can be reduced to something like:</p><p align="center"><img alt="get-rid" width="720" src="https://user-images.githubusercontent.com/2213682/154875165-2b144651-5769-4f8e-9072-3a1a03bfe164.png" /></p><p>This is far from the funniest thing I’ve seen - if I wanted to, I could collect a huge selection of statements in the style <a href="https://github.com/samdark/opensource-hate">collected here</a> - but why? I already have enough negativity in my life.</p><p><strong>Developers love to use free open-source software - it’s free and works great, they are not interested in that many and many thousands of hours of development, and real people with their own problems and needs are behind it. They consider any mention of this as an invasion of their personal space or even a personal affront. For them, these are just gears that should automatically change without any noise and their participation.</strong></p><p>So, thousands of developers attacked me with insults and claimed that I have no right to ask them for any kind of help. My request for help offended them so much that they began to demand restricting my access to the repository and packages and move them to someone else like it was done with <a href="https://arstechnica.com/information-technology/2016/03/rage-quit-coder-unpublished-17-lines-of-javascript-and-broke-the-internet/"><code>left-pad</code></a>. Almost no one of them understood what <code>core-js</code> does, the scale of the project, and, of course, no one of them wanted to maintain it - it should do “the community”, someone else. Seeing all this hatred, in order not to be led by the haters, I did not delete the help-asking message, that initially planned to add only for a couple of weeks, just out of principle.</p><p><strong>What about companies for whom <code>core-js</code> helped and helps to make big money? It’s almost all big companies. Let’s rephrase <a href="https://twitter.com/AdamRackis/status/931195056479965185">this old tweet</a>:</strong></p><blockquote><p>Company: “We’d like to use SQL Server Enterprise”</p><p>MS: “That’ll be a quarter million dollars + $20K&#x2F;month”</p><p>Company: “Ok!”</p><p>…</p><p>Company: “We’d like to use core-js”</p><p>core-js: “Ok! npm i core-js”</p><p>Company: “Cool”</p><p>core-js: “Would you like to help contribute financially?”</p><p>Company: “lol no”</p></blockquote><p>A few months later, tired of user complaints, NPM presented <a href="https://docs.npmjs.com/cli/v6/commands/npm-fund"><code>npm fund</code></a> - it was not a problem solution, it was just a way to get rid of those complaints. How often did you call <code>npm fund</code>? How often did you pay donations to someone who you saw in <code>npm fund</code>? Who did you see and support at first - <code>core-js</code> or one who maintains a dozen of one-line libraries dependent on each other? It also provided NPM a perfect justification for the future step (read below).</p><p>Within 9 months many thousands of developers, including developers of projects fundamentally dependent on <code>core-js</code>, knew about the situation - but no one offered to maintain <code>core-js</code>. Within many months I talked with maintainers of some significant projects dependent on <code>core-js</code>, but without any success - they hadn’t required time resources. So I was forced to ask some of my friends who were not related to FOSS community (at first <strong><a href="https://github.com/slowcheetah">@slowcheetah</a></strong>, thanks him for his help) to cover me and at least try to fix significant issues until I get free.</p><hr><p>Few users and small companies supported the <code>core-js</code> - and I am very grateful to them. However, within 9 months it was collected only about 1&#x2F;4 of the money that should have been collected within a couple of weeks to change something.</p><p>During the same time, despite everything, the number of <code>core-js</code> downloads for a day almost doubled.</p><p>In January 2020 I ended up in prison.</p><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><p>I don’t wanna say many words about prison and I have no great desire remembering this. It was slave labor at a chemical factory where my health was significantly ruined and where I 24&#x2F;7 had a great time in a company of drug dealers, thieves, and killers (from other regimes), without access to the Internet and computers.</p><p>After about 10 months, I was released early.</p><hr><p>I saw dozens of articles, hundreds of posts, and thousands of comments the essence of many of which can be expressed by this:</p><p align="center"><img alt="reddit" width="720" src="https://user-images.githubusercontent.com/2213682/218419779-d61c9e39-c8c1-412b-83aa-eb1b12d2e760.png" /></p><p>What do you think I did? <em>Of course, I made the same mistake.</em> I saw some people who supported the development of <code>core-js</code>, many issues, questions, and messages - sure, not so much like angry comments. <code>core-js</code> became even more popular and was already used by almost the same percentage of websites as it is now.</p><h3 id="Ensuring-compatibility-for-the-whole-Web-again"><a href="#Ensuring-compatibility-for-the-whole-Web-again" class="headerlink" title="Ensuring compatibility for the whole Web again"></a>Ensuring compatibility for the whole Web again</h3><p>I returned to <code>core-js</code> maintenance like it was before. Moreover, I completely stopped being distracted by contracts and any other work in favor of working on <code>core-js</code>. <code>core-js</code> had some money on funding platforms - not so much, many times less than I received before starting work on <code>core-js</code> full-time - but for me alone it was enough for life. A kind of down-shifting, full-time Open-Source for making the world better… I didn’t think about the tens of thousands of dollars in lawsuits left over from the accident. I didn’t think about my future. I thought about a better future for the Web. And, of course, I was hoping that some company would offer me a position with the opportunity to work on web standards and would sponsor my work on polyfills and FOSS.</p><p><a href="https://github.com/zloirock/core-js/compare/0943d43e98aca9ea7b23cdd23ab8b7f3901d04f1...master">A lot has been accomplished</a> over the next two years - in terms of work, almost the same as in the previous 8 years. This is still <code>core-js@3</code> - but much better. However, the changelog and even the previous diff reflect only a few percent of the work done. Almost all of this work remains in the shadows, not visible to the average user.</p><p>This is a fundamental work with standards and proposals. As a side effect of this work, taking into account the hard work that was done and changes after my feedback and suggestions, I consider many of the ECMAScript proposals that have become part of the language my achievements as much as they are achievements of their champions. This is work with engines and their bug trackers in searching for bugs. This is constant automatic and (too often) manual testing in many hundreds of environments, many thousands of environments &#x2F; builds &#x2F; test suites combinations for ensuring proper work of standard library everywhere and collecting compat data. From a raw prototype, made in a couple of days, <code>core-js</code> compat data became exhaustive data set with proper external and internal tooling. This is the design and prototyping of many features that are yet to appear in the project. And also much, much more.</p><hr><p>As you can see above, <code>core-js</code> is present in most of the popular websites, provides an almost complete JavaScript standard library, and fixes not proper implementations. The number of web page openings with <code>core-js</code> is greater than the number of web page openings in Safari and Firefox. Thus, from a certain point of view, <code>core-js</code> can be called one of the most popular JavaScript runtimes.</p><p>During work on <code>core-js</code>, I am the first implementor of almost all modern and future JavaScript standard library features, almost all of them have my feedback and they have been fixed according to it. <code>core-js</code> is the best playground for experimentation with ECMAScript proposals. In too many cases, proposals have feedback from other users after they play with experimental <code>core-js</code> implementations of proposals.</p><p>The best way forward for JavaScript would be for TC39 and <code>core-js</code> to work together on the future of JavaScript. For example, TC39 invites members of projects like Babel and others as experts. But seems not in the <code>core-js</code> case. Instead of this, too often, I see ignore of my or <code>core-js</code> issues or even making roadblocks by TC39 members and they even don’t hide it:</p><p align="center"><img alt="shu" width="600" src="https://user-images.githubusercontent.com/2213682/140033052-46e53b0c-e1bc-4c84-a1f4-3511d7de604a.png" /></p><hr><p align="center"><img alt="lj" width="800" src="https://user-images.githubusercontent.com/2213682/217476089-604b1629-73a8-4715-9276-a601004f0947.png" /></p><hr><p>After a while, “support” came from NPM. In <code>npm@7</code> which was released at the end of 2020 as a logical continuation of <code>npm fund</code> was disabled console output in post-install scripts. The result was expected - because people stopped seeing the funding request and almost no one uses <code>npm fund</code>, the number of <code>core-js</code> backers began to decline. Excellent support for the project from those who not only earn by distributing my work but also use it themselves -)</p><p align="center"><img alt="npm" width="720" src="https://user-images.githubusercontent.com/2213682/218333796-18bee93f-64e7-4257-8ddd-d16fc4f05989.png" /></p><p>In addition, another factor came into play again. Higher quality - less support. Is the library well-maintained? There are practically almost no open bug reports, and if they happen, is it fixed almost instantly? Does the library already give us almost everything we want? Yes? So why should we support the maintenance of the library? The price at which this is done for the maintainers is not on the surface - for the most, it’s still just “a small library”. Many of those who backed <code>core-js</code> before stopped doing it.</p><p><code>core-js</code> code contains my copyright. As you can see at the top of this post, it’s present in about half of all websites. Regularly someone finds it in the source code of harmful sites &#x2F; applications - but they don’t know what is <code>core-js</code> and their tech level is not good enough even for finding out it. After that, the police call and threaten me, and someone even tries to blackmail me. Sometimes it’s even not funny.</p><p>I have been contacted several times by American and Canadian journalists who discover <code>core-js</code> on American news and government websites. They were very disappointed that I was not an evil Russian hacker who meddles in American elections.</p><p>The endless stream of hatred decreased slightly over time but continued. However, most of it moved from something like GitHub issues or Twitter threads to my mail or IM. Today, one developer wrote to me a message. He called me a parasite on the body of the developer community that makes a lot of money spamming and doing nothing useful. He called me the same murderer as <a href="https://en.wikipedia.org/wiki/Hans_Reiser">Hans Reiser</a>, but who bought the judge and went unpunished. He wished death on me and all my relatives. And there is nothing unusual here, I get several such messages a month. In the last year, this has been added that I am a “Russian fascist”.</p><h3 id="Some-words-about-war"><a href="#Some-words-about-war" class="headerlink" title="Some words about war"></a>Some words about war</h3><p><strong>Open-source should be out of politics.</strong></p><p>I don’t want to choose between two kinds of evil. I will not comment on this in more detail, since there are people close to me on both sides of the border who may suffer because of this.</p><p>Let me remind you what I wrote about above - I returned to Russia because it was a place where it was possible to have a decent standard of living for relatively small money and concentrate on FOSS instead of making money. Now I cannot leave Russia, because after the accident I have outstanding lawsuits in the amount of tens of thousands of dollars and I am forbidden to leave the country until they are paid off.</p><h3 id="What-do-you-think-how-much-money-core-js-earn-for-a-month"><a href="#What-do-you-think-how-much-money-core-js-earn-for-a-month" class="headerlink" title="What do you think, how much money core-js earn for a month?"></a>What do you think, how much money <code>core-js</code> earn for a month?</h3><p>When I started to maintain <code>core-js</code> full-time, without being distracted by contracts and any other work, <strong>it was about $2500 for a month - it was about 4-5 times less than I usually had on full-time contracts</strong>. Remember, a kind of down-shifting, to make the Web better. Temporarily. Reduce issues and bugs to zero, make the highest quality product, which is used by almost everyone - and the project will be sufficiently supported, right? Right?</p><p>After a few months, monthly repeat was <strong>decreased to about $1700</strong> <em>(at least that’s what I thought)</em> - $1000 via Tidelift, $600 via Open Collective, and $100 via Patreon. In addition to the monthly repeat, one-time donations periodically come - on average it was maybe $100 for a month.</p><p>Crypto? Adding a crypto wallet for donations was a very popular request. However, for all the time, only 2 transfers for a total amount of about $200 have been received on crypto wallets, the previous one was more than a year ago. GitHub sponsors? It’s not available for Russia and never was. PayPal? It’s banned for Russians. When it was available, <code>core-js</code> received about 60$ for all time. Grants? I applied for a lot of grants - all were ignored.</p><p><strong>The main part, $400 for a month, from those donations, <code>core-js</code> had from… <a href="https://bower.io/">Bower</a>, another FOSS community. I am also very grateful <a href="https://opencollective.com/core-js#section-contributors">to all other sponsors</a> - because of your donations, I’m still working on this project.</strong></p><p>However, in this list there is no one big corporation or at least a company from the top 1000 website list. Let’s be honest - there are mainly individuals, and only a few small companies on the current list of backers and they pay a few dollars a month.</p><p>If someone will say that they don’t know that <code>core-js</code> requires funding… Come on, I regularly see memes like <a href="https://www.reddit.com/r/ProgrammerHumor/comments/fbfb2o/thank_you_for_using_corejs/">this</a>:</p><p align="center"><img alt="sanders" width="400" src="https://user-images.githubusercontent.com/2213682/218325687-08d58543-4b88-4a39-a0de-420bd325450f.png" /></p><hr><p>A year ago, Tidelift stopped sending me money. They said that because of the political situation, the Hyperwallet that they used is no longer available for Russians (but it was available for me till the previous month when I tried to update some personal data), and for safety, they will store my money on their side. Within a previous few months, I tried to get this money to a bank or a Hyperwallet account but received only replies that they will try to do something (<em>sounds great, doesn’t it?</em>). From the end of the previous year, they just stopped responding to emails. And now, I’ve got this:</p><p><img src="https://user-images.githubusercontent.com/2213682/217650273-548d123d-4ee4-4beb-ad5b-631c55e612a6.png" alt="tidelift"></p><p><strong>In such an amusing way, I found out that I will not receive the money for the previous year, and this year I worked not for $1800, but for $800 a month.</strong> There were, of course, no replies to subsequent emails. However, their site indicated that I received and still receive money through them.</p><p align="center"><img alt="tidelift" width="500" src="https://user-images.githubusercontent.com/2213682/218159794-1ea53543-a8ff-463a-ad36-dc900a34b7c8.png" /></p><p>I wonder how the companies that support their dependencies chain through them will react to such a scam.</p><hr><p>At the same day, on OpenCollective I saw that the monthly repeat was reduced from about $600 to about $300. Apparently, the financial reserves of <code>Bower</code> have come to an end. That means that <strong>for this month I’ll get about $400 at all</strong>.</p><p>In the previous months, I measured how much time takes the work on <code>core-js</code>. It turned out about… <strong>250 hours a month</strong> - significantly more than a full day without any days off, which makes it impossible to have “real” (as many say) full-time work or work any significant contracts. $400 for 250 hours… It will be less than <strong>$2 per hour of work, for the previous year a little more - $4 per hour</strong>. Yes, in some months, I spend less time working on the project - however it does not change much.</p><p>So much willing to pay for ensuring compatibility for the whole Web. And no insurance or social security.</p><p><strong>Awesome earning growth and career, right?</strong></p><p>I think you understand well how much senior software engineers in key IT companies get paid. I received a lot of comparable offers, however, they are not compatible with the proper work on <code>core-js</code>.</p><hr><p>Among the regular threats, accusations, demands, and insults, I often get something like “Stop begging and go to work, idler. Remove your beggarly messages immediately - I don’t wanna see them.” The funny thing is that at least some of these people get over $300,000 a year (which I know for sure because I talk to their colleagues), and (because of the nature of their work) <code>core-js</code> save them many hours of work each month.</p><h3 id="Everything-changes"><a href="#Everything-changes" class="headerlink" title="Everything changes"></a>Everything changes</h3><p>When I started working on <code>core-js</code>, I was alone. Now I have a family. A few over a year ago, I became a father of son. Now I have to provide him with a decent standard of living.</p><p><img src="https://user-images.githubusercontent.com/2213682/208297825-7f98a8e2-088e-47d3-95a6-a853077296b3.png" alt="son"></p><p>I have a wife and sometimes she wants some new shoes or a bag, a new iPhone or Apple Watch. My parents are already at the age that I need to significantly support them.</p><p>I think it is obvious that it is impossible to properly support a family with the money that I have or had from <code>core-js</code> maintenance. Financial reserves I used, have finally come to the end.</p><p>More and more often I hear reproaches like: “Give up your Open-Source, this is pampering. Go back to a normal job. <code>%USERNAME%</code> works as a programmer for just a year. He understands almost nothing about it, works a couple of hours a day, and already earns times more than you.”</p><h1 id="NO-MORE"><a href="#NO-MORE" class="headerlink" title="NO MORE"></a>NO MORE</h1><p>I’m damn tired. I love working on open-source and <code>core-js</code>. But who or what am I doing this for? Let’s summarize the above.</p><ul><li>I ensure no compatibility issues and provide bleeding edge features of the web platform for most of the Web from 2014 and I’m working on it almost all my time for money that now will not be enough even for food.</li><li>Instead of any gratitude, all I see is huge hatred from developers whose life I simplify.</li><li>Companies that save and earn many millions of dollars on <code>core-js</code> usage just ignore <code>core-js</code> funding requests.</li><li>Even in a critical situation, on an ask for help, instead of help, most of them preferred to ignore or hate.</li><li>Instead of working together with standards and browsers developers on a better future for JavaScript, I’m forced to struggle with roadblocks that they make.</li></ul><hr><p>I don’t care about the haters. Otherwise, I would leave open-source a long time ago.</p><p>I can tolerate the lack of normal interaction with the standards developers. First of all, it’s future problems for users and, when the Web will be broken, for standards developers themself.</p><p><strong>However, money matters.</strong> I’ve had enough of sponsoring corporations at the expense of my and my family’s well-being. I should be able to ensure a bright future for my family, for my son.</p><p>The work on <code>core-js</code> takes almost all my time, more than a full working day. This work ensures the proper work the most of the popular websites and this work should be paid properly. I’m not going to keep working for free or for $2 per hour. I’m willing to continue working on a project at least for $80 an hour. This is the money that have, for example, <a href="https://eslint.org/blog/2022/02/paying-contributors-sponsoring-projects/#paying-team-members-per-hour"><code>eslint</code> team members for an hour</a>. And, if work on open-source requires it, I’m ready to pay off my lawsuits and leave Russia - however, it’s not cheap.</p><hr><p>Regularly I see comments like this:</p><p align="center"><img alt="core-js approach" width="600" src="https://user-images.githubusercontent.com/2213682/136879465-88b3d349-6a1a-442e-bb78-fb20916a4679.png" /></p><p>Ok guys, if you want it - let’s use such an approach.</p><hr><h2 id="Depending-on-your-feedback-core-js-will-soon-follow-one-of-the-following-ways"><a href="#Depending-on-your-feedback-core-js-will-soon-follow-one-of-the-following-ways" class="headerlink" title="Depending on your feedback, core-js will soon follow one of the following ways:"></a>Depending on your feedback, <code>core-js</code> will soon follow one of the following ways:</h2><ul><li><p><strong>Appropriate financial backing</strong></p><p>I hope that at least after reading this post corporations, small companies, and developers will finally think about the sustainability of their development stack and will properly back <code>core-js</code> development. In this case, <code>core-js</code> will be appropriately maintained and I’ll be able to concentrate on adding <a href="#roadmap">a new level of functionality</a>.</p><p>The scale of the necessary work goes through the roof, one of me is no longer enough - I can’t work more physically. Some work, for example, improving test coverage or documentation, is simple enough and takes a lot of time, but it’s not the kind of work that volunteers want to do - I don’t remember any PRs with improving test coverage of existent features. So it makes sense to attract at least one or two developers (at least students, better - higher level) on a paid basis.</p><p>Taking into account the involvement of additional maintainers and other expenses, I think that at this moment about 30 thousand dollars for a month could be enough. More money - better product and faster development. A couple times less - it makes sense to resume the work on <code>core-js</code> full-time alone - sure, not as productive as it could be with a team.</p></li><li><p><strong>I may be hired by a company where I will be able to work on Open-Source and Web standards</strong></p><p>and that will give me the resources required for continuation of work.</p></li><li><p><strong><code>core-js</code> will become a commercial project</strong> if it will not have appropriate support from users</p><p>It’s problematic to create a commercial infrastructure around the current <code>core-js</code> packages, so most likely the new <code>core-js</code> major release will change the license. The free version will be significantly limited. All extra functionality will be paid for. <code>core-js</code> will continue to evolve appropriately and, in the scope of this project, will be created many new tools for ensuring web compatibility. Sure, it will significantly reduce the spread of <code>core-js</code> and will cause problems for many developers, however, even some paying customers could be enough and my family will have money for paying bills.</p></li><li><p><strong>Slow death</strong> in case I’ll see that <code>core-js</code> is not required</p><p>I have many ideas for commercial projects, I have a lot of good job offers - all this takes time, which now goes to <code>core-js</code> maintenance. It does not mean that I’ll immediately completely stop to maintain <code>core-js</code> - I’ll just maintain pro-rata donations. If they are at the current level, it will be only a few hours of maintenance a month instead of hundreds now. The project will stop the upgrowth - maybe minor bugs will be fixed and compatibility data will be updated - this time is not enough for more. After a while, <code>core-js</code> will become just useless and will die.</p></li></ul><p>I still hope for the first outcome since <code>core-js</code> is one of the key components of the modern digital infrastructure, but, looking at the current and the past, I am mentally getting ready for other options.</p><h2 id="I-will-answer-in-advance-some-angry-comments-that-I-see-regularly-and-that-will-definitely-be-after-this-post"><a href="#I-will-answer-in-advance-some-angry-comments-that-I-see-regularly-and-that-will-definitely-be-after-this-post" class="headerlink" title="I will answer in advance some angry comments that I see regularly and that will definitely be after this post:"></a>I will answer in advance some angry comments that I see regularly and that will definitely be after this post:</h2><ul><li><p><strong>“Not a problem, we will just pin the <code>core-js</code> dependency.”</strong></p><p>Unlike most projects, <code>core-js</code> should be on the bleeding edge since <code>core-js</code> allows you to be on the bleeding edge of JavaScript - use the most recent JavaScript features and don’t think about engines compatibility and bugs. However, the library has a good safety margin for the future. Maybe for a year or a couple, you will not have serious problems. After that, they will appear - polyfills will be obsolete, but still will be present in your bundles and will be just useless ballast. You will not be able to use new features of the language and will face new bugs in JS engines.</p></li><li><p><strong>“It’s open-source, we will fork it, fuck off.”</strong></p><p>I see such comments regularly, someone even tries to scare me with a fork. I’ve said already too many times that <strong>if someone will fork and properly maintain <code>core-js</code>, I’d be happy</strong> - it makes no sense just to fork it without maintenance. Now I don’t see even anyone who tries to add to <code>core-js</code> something significant or at least contribute regularly. It should react on each new JavaScript engine release to update compatibility data, fix or at least take into account each new (no matter how significant) bug from each engine, take a look and implement each new JavaScript feature that possible, do it maximally properly, test and take into account the specifics of each version of each modern or legacy engine - it’s a hard work - are you ready and have the required knowledge and time for that? For example, when I was in prison, Babel said that they are not:</p><p align="center"><img alt="babel" width="800" src="https://user-images.githubusercontent.com/2213682/154870832-36318fdd-c5a0-45ce-aaed-2d50371a2976.png" /></p></li><li><p><strong>“We don’t need <code>core-js</code>, many alternative projects are available.”</strong></p><p>Nobody is holding you. But where are those alternatives in real life? Sure, <code>core-js</code> is not the only polyfill of the JavaScript standard library. But all other projects are <a href="https://npm-stat.com/charts.html?package=core-js&package=core-js-pure&package=es6-shim&from=2014-11-18">tens</a> <a href="https://user-images.githubusercontent.com/2213682/205467964-2dfcce78-5cdf-4f4f-b0d6-e37c02e1bf01.png">times</a> less popular than <code>core-js</code>, and it’s not unreasonable - all of them provide only a little part of <code>core-js</code> functionality, they are not enough proper and complex, the number of cases where they can be used is significantly limited, they can’t be properly integrated into your project in such simple way and have other significant problems. In case of the existence of proper alternatives, I would stop working on <code>core-js</code> a long time ago.</p></li><li><p><strong>“We can drop IE support, so we no longer need polyfills.”</strong></p><p>As I wrote a little above, nobody is holding you. In some cases, polyfills are really not required and you can avoid them, but it’s only a little part of all cases - almost the same as it was in the IE era. Of course, if you don’t need IE support, polyfills will not expand your possibilities as much as it was with adding ES6 support to IE8. But even the most modern engines do not implement the most modern JavaScript features. Even the most modern engines contain bugs. Are you pretty sure that you and your team perfectly know all limitations of all engines that you support and can work around them? Even I sometimes may forget some moments.</p></li><li><p><strong>“You are an asshole, we will expel you from the FOSS community.”</strong></p><p>Yes, you’re right. I’m such an asshole that gives you a chance to use modern JavaScript features in the real life, have been solving your cross-engine compatibility issues for many years, and had sacrificed for this more than anyone else. I’m such an asshole that just wants his son to be well-fed, wants his family has money to pay bills and does not need anything. Some options above suppose my leaving FOSS in favor of commercial software, so will see.</p></li></ul><hr><p>Now let’s move away from the negative to the second half of this post where we will talk about things that would be nice to implement in <code>core-js</code> and problems of polyfilling at all.</p><h1 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h1><p>JavaScript, browsers, and web development are evolving with amazing speed. The time when almost all of the <code>core-js</code> modules were required for all browsers has gone. The latest browsers have good standards support and, with common use cases, they need only some percentage of the <code>core-js</code> modules for the most recent language features and bug fixes. Some companies are already dropping support for IE11 which recently was “buried” once more. However, even without IE, old browsers will always be, bugs will happen even in modern browsers, and new language features will appear regularly and anyway they will appear in browsers with a delay - so, if we want to use modern JS in development and minimize possible problems, polyfills stay with us for a long time, but they should evolve.</p><p>Here I will not (almost) write about adding new or improving existing specific polyfills (but, sure, it’s one of the main parts of <code>core-js</code> development), let’s talk about some other crucial moments without focusing on minor things. If it is decided to make a commercial project from <code>core-js</code>, the roadmap will be adapted to this condition.</p><p>I am trying to keep <code>core-js</code> as compact as possible, but one of the main conceptions that it should follow is to be maximally useful in the modern web - the client should not load any unnecessary polyfills and polyfills should be maximally compact and optimized. Currently, a maximal <code>core-js</code> bundle size with early-stage proposals <a href="https://bundlephobia.com/package/core-js">is about 220KB minified, 70KB gzipped</a> - it’s not a tiny package, it’s big enough - it’s like jQuery, LoDash, and Axios together - the reason is that the package covers almost the entire standard library of the language. The individual weight of each component is several times less than the weight of quite correct alternatives. It’s possible to load only the <code>core-js</code> features that you use and in minimal cases, the bundle size can be reduced to some kilobytes. When <code>core-js</code> is used correctly, this is usually a couple of tens of kilobytes - however, there is something to strive for. <a href="https://almanac.httparchive.org/en/2022/media#bytesizes">Most pages contain pictures larger</a> even the full <code>core-js</code> bundle, most users have Internet speed in dozens of Mbps, so why is this concept so significant?</p><p>I don’t want to repeat old posts about <a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e">the cost of JavaScript</a> in detail where you can read why adding JS increases the time when the user can start interacting with the page much more than adding a similar size picture - it’s not only downloading, it’s also parsing, compiling, evaluating the script, it blocks the page rendering.</p><p>In too many places, mobile Internet is not perfect and still 3G or even 2G. In the case of 3G, downloading of one full copy of <code>core-js</code> can take a couple of seconds. However, pages contain more than one copy of <code>core-js</code> and many other duplicated polyfills too often. Some (mainly mobile) Internet providers have very limited “unlimited” tariff plans and after some gigabytes reduce the speed to some Kbps. Internet speed is also often limited for many other reasons.</p><p>The speed of the page loading equals the revenue.</p><p align="center"><img alt="conversion" width="600" src="https://user-images.githubusercontent.com/2213682/217910389-7320a726-890d-4f34-a941-f51a069f01a1.png" /></p><blockquote><p>Illustration is from a <a href="https://medium.com/@vikigreen/impact-of-slow-page-load-time-on-website-performance-40d5c9ce568a">random post</a> by googling</p></blockquote><p>The size of <code>core-js</code> is constantly growing because of adding new or improving existing polyfills. This issue also is a block for adding some big polyfills - adding <code>Intl</code>, <code>Temporal</code>, and some other features to <code>core-js</code> could increase the maximal bundle size a dozen times to some megabytes.</p><p>One of the main <code>core-js</code> killer features is that it can be optimized with the usage of Babel, SWC, or manually, however, current approaches solve only a part of the problem. To properly solve them, the modern web requires a new generation of the toolkit that could be simply integrated into the current development stack. And in some cases, as you will see below, this toolkit could help to make the size of your website pages even less than just without <code>core-js</code>.</p><p>I already wrote about some of this in <a href="https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md#look-into-the-future"><strong><code>core-js@3</code>, Babel and a look into the future</strong> post</a>, but that were just raw ideas. Now it’s in the stage of experimentation or even implementation.</p><p>Since the future of the project is in doubt, it makes no sense to write any specific dates here, I do not promise that all of this will be done shortly, but this is what should be strived for.</p><hr><h3 id="New-major-version"><a href="#New-major-version" class="headerlink" title="New major version"></a>New major version</h3><p><code>core-js@3</code> was released about 4 years ago - it’s too much. It’s not a big problem for me to add some breaking changes (rather ensuring backward compatibility is often a challenge) and to mark a new version as a major release - it’s a big problem for users.</p><p>At this moment, about 25% of <code>core-js</code> downloads are critically obsolete <code>core-js@2</code>. Many users wanna update it to <code>core-js@3</code>, but because their dependencies use <code>core-js@2</code> they still use the obsolete version for avoiding multiple copies (I saw such issues on GitHub in too many projects). Too frequent major updates would worsen such cases even more.</p><p>However, it’s better not to get too obsessed with compatibility with older versions. The library contains too much that’s not removed only for compatibility reasons. The absence of some long-needed breaking changes for someone will negatively affect the future. Judging by how the standards, the ecosystem, and the Web change, and how legacy accumulates, it’s better to release a new major version each 2-3 years.</p><p>Adding all the new things that we would like to see in the new major version would take many years, which is unacceptable. However, <code>core-js</code> follows <a href="https://semver.org/">SemVer</a> and makes sense to release a new major release at first with breaking changes (some of them below), most of the new features can be added in minor releases. In this case, such a release can take just about 2-3 months of full-time work and it can be the first <code>core-js</code> version that reduced the size compared to the previous -)</p><h3 id="core-js-package-directly"><a href="#core-js-package-directly" class="headerlink" title="core-js package directly"></a><code>core-js</code> package directly</h3><h3 id="Drop-critically-obsolete-engines-support"><a href="#Drop-critically-obsolete-engines-support" class="headerlink" title="Drop critically obsolete engines support"></a>Drop critically obsolete engines support</h3><p>IE is dead. However, not for all - for many different reasons, someone is still forced to make or maintain websites that should work in IE. <code>core-js</code> is one of the main tools that makes life easier for them.</p><p>At this moment, <code>core-js</code> tries to support all possible engines and platforms, even ES3 - IE8-. But only a small part of developers using <code>core-js</code> needs support of ES3 engines - at this moment, the IE8- segment of browsers is about 0.1%. For many other users, it causes problems - bigger bundle size and slower runtime execution.</p><p>The main problem comes from supporting ES3 engines: most modern ES features are based on ES5 features, which aren’t available in those old engines. Some features (like getters &#x2F; setters) can’t be polyfilled, so some polyfills (like typed arrays) can’t work in IE8- complete. Some others require heavy workarounds. In case you need to polyfill only some simple features, the main part of <code>core-js</code> size in the bundle is the implementation of ES5 methods (in the case of polyfilling a lot of features, it’s only some percent, so this problem is related mainly to minimalistic bundles).</p><p>Even simple replacing internal fallbacks of ES5 features to implementations to direct usage of those native features reduces minimalistic <code>core-js</code> bundle size 2+ times. After reworking the architecture, it will be reduced even more.</p><p>The IE9-10 segment of browsers already is also small - at this moment, the same 0.1%. But it makes no sense to consider dropping their support without dropping support of some other obsolete engines with similar or even greater restrictions, for example, Android 4.4.4 - in total, it’s about 1%. Raising the lower bar higher than ES5 is a more difficult decision at least because of some non-browser engines. However, even dropping IE11 support in the future will not give so many benefits as dropping IE8- support now.</p><h3 id="ECMAScript-modules-and-modern-syntax"><a href="#ECMAScript-modules-and-modern-syntax" class="headerlink" title="ECMAScript modules and modern syntax"></a>ECMAScript modules and modern syntax</h3><p>At this moment, <code>core-js</code> uses CommonJS modules. For a long time, it was the most popular JavaScript modules format, but now ECMAScript provides its own modules format and it’s already very popular and supported <em>almost</em> everywhere. For example, Deno, like browsers, doesn’t support CommonJS, but supports ES modules. <code>core-js</code> should get an ECMAScript modules version in the near future. But, for example, on NodeJS, ECMAScript modules are supported only in the modern versions - but on NodeJS <code>core-js</code> should work without transpiling &#x2F; bundling even in ancient versions, <a href="https://github.com/electron/electron/issues/21457">Electron still does not support it</a>, etc., so it’s problematically to get rid of the CommonJS version immediately.</p><p>The situation with the rest of modern syntax is not so obvious. At this moment, <code>core-js</code> uses ES3 syntax. Initially, it was for maximal optimization since anyway it should be pre-transpiled to old syntax. But it was only initially. Now, <code>core-js</code> just can’t be properly transpiled in userland and should be ignored in transpiler configs. Why? Let’s take a look, for example, at Babel transforms:</p><ul><li>A big part of transforms rely on modern built-ins, for example, transforms which use <code>@@iterator</code> protocol - but <code>Symbol.iterator</code>, iterators, and all other related built-ins are implemented in <code>core-js</code> and absent before <code>core-js</code> loading.</li><li>Another problem is transpiling <code>core-js</code> with transforms that inject <code>core-js</code> polyfills. Obviously, we can’t inject polyfills into the place where they are implemented since it is circular dependencies.</li><li>Some other transforms applied on <code>core-js</code> just break its internals - for example, <a href="https://babeljs.io/docs/en/babel-plugin-transform-typeof-symbol">the <code>typeof</code> transform</a> (that should help to work with polyfilled symbols) breaks the <code>Symbol</code> polyfill.</li></ul><p>However, the usage of modern syntax in polyfills code could significantly improve the readability of the source code, reduce the size and in some cases improve performance if polyfill is bundled for a modern engine, so it’s time to think about rewriting <code>core-js</code> to modern syntax, making it transpilable by getting around those problems and publishing versions with different syntax for different use cases.</p><h3 id="Web-standards-polyfills"><a href="#Web-standards-polyfills" class="headerlink" title="Web standards polyfills"></a>Web standards polyfills</h3><p>I’m thinking about adding the maximum possible web standards (not only ECMAScript and closely related features) support to <code>core-js</code> for a long time. First - about the remaining features from the <a href="https://common-min-api.proposal.wintercg.org/#index">Minimum Common Web Platform API</a> (<a href="https://blog.cloudflare.com/introducing-the-wintercg/">what is it?</a>), but not only about them. It could be good to have one bulletproof polyfills project for all possible web development cases, not only for ECMAScript. At the moment, the situation with the support of web standards in browsers is much worse than with the support of modern ECMAScript features.</p><p>One of the barriers preventing the addition of web standards polyfills to <code>core-js</code> was significantly increasing bundles size, but I think that with current technics of loading only required polyfills and technics which you could see below, we could add polyfills of web standards to <code>core-js</code>.</p><p>But the main problem is that it should not be naive polyfills. As I wrote above, now the correctness of ECMAScript features almost everywhere is not very bad, but we can’t say it about web platform features. For example, <a href="https://github.com/zloirock/core-js#structuredclone">a <code>structuredClone</code> polyfill</a> was relatively recently added. During work on it, taking into account the dependencies, I faced <strong>hundreds</strong> of different JavaScript engines bugs - I don’t remember when I saw something like that when I added new ECMAScript features - for this reason, the work on this simple method, that naively could be implemented for a couple of hours, with resolving all issues and adding required features, lasted for several months. In the case of polyfills, better to do nothing than to do bad. The proper testing, polyfilling, and ensuring cross-platform compatibility web platform features require even more significant resources than what I spend on ECMAScript polyfills. So adding the maximum possible web standards support to <code>core-js</code> will be started only in case I have such resources.</p><hr><h3 id="New-approaches-to-tooling-are-more-interesting"><a href="#New-approaches-to-tooling-are-more-interesting" class="headerlink" title="New approaches to tooling are more interesting"></a>New approaches to tooling are more interesting</h3><p>Someone will ask why it’s here. What do tools, like transpilers, have to do with the <code>core-js</code> project? <code>core-js</code> is just a polyfill, and those tools are written and maintained by other people. Once I also thought that it is enough to write a great project with a good API, explain its possibilities, and when it becomes popular, it will acquire an ecosystem with proper third-party tools. However, over the years, I realized that this will not happen if you do not do, or at least not control, it yourself.</p><p>For example, for many years, instance methods were not able to be polyfilled through Babel <code>runtime</code>, but I explained how to do it too many times. Polyfilling via <code>preset-env</code> was not able to be used in real-life projects because of incomplete detection of required polyfills and a bad source of compatibility data, which I explained from the beginning. Because of such problems, I was forced <a href="https://github.com/babel/babel/pull/7646">to almost completely rewrite those tools in 2018-2019, for the <code>core-js@3</code> release</a>, after that we got the current state of statically analysis-based tools for polyfills injecting.</p><p>I am sure that if the approaches below are not implemented in the scope of <code>core-js</code>, they will not be properly implemented at all.</p><hr><p>For avoiding some questions related to the following text: <code>core-js</code> tools will be moved to scoped packages - tools like <code>core-js-builder</code> and <code>core-js-compat</code> will become <code>@core-js/builder</code> and <code>@core-js/compat</code> respectively.</p><h3 id="Not-only-Babel-plugins-for-transpilers-and-module-bundlers"><a href="#Not-only-Babel-plugins-for-transpilers-and-module-bundlers" class="headerlink" title="Not only Babel: plugins for transpilers and module bundlers"></a>Not only Babel: plugins for transpilers and module bundlers</h3><p>At this moment, some users are forced to use Babel only due to the need to automatically inject &#x2F; optimize required polyfills. At this moment, Babel’s <a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins"><code>preset-env</code></a> and <a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime#core-js-aliasing"><code>runtime</code></a> are the only enough good and well-known ways to optimize usage of <code>core-js</code> with statical analysis. It happened historically because I helped Babel with polyfills. It does not mean that it’s the only or the best place where it could be done.</p><p>Babel is only one of many transpilers. TypeScript is another popular option. Other transpilers are gaining popularity now, for example, <a href="https://swc.rs/">SWC</a> (that already contains <a href="https://swc.rs/docs/configuration/supported-browsers">a tool for automatic polyfilling &#x2F; <code>core-js</code> optimization</a>, but it’s still not perfect). However, why do we talk about the transpilers layer? The bundlers layer and tools like <code>webpack</code> or <a href="https://esbuild.github.io/"><code>esbuild</code></a> (that also contains an integrated transpiler) are more interesting for the optimization of polyfills. <a href="https://rome.tools/">Rome</a> in development for several years and still is not ready, but its conception looks very promising.</p><p>One of the main problems with statical analysis-based automatic polyfilling on the transpiler layer is that usually not all files from the bundle are transpiled - for example, dependencies. If some of your dependencies need a polyfill of a modern built-in feature, but you don’t use this built-in in your userland code, this polyfill will not be added to the bundle. Unnecessary polyfills import also will not be removed from your dependencies (see below). Moving automatic polyfilling to the bundlers layer fixes this problem.</p><p>Sure, writing or using such plugins in many places is difficult compared to Babel. For example, <a href="https://github.com/microsoft/TypeScript/issues/14419">without some extra tools now you can’t use plugins for custom transforms in TypeScript</a>. However, there are always options and there would be a desire.</p><p>Automatic polyfilling &#x2F; optimization of <code>core-js</code> should be available not only in Babel. It’s almost impossible to write and maintain plugins for all transpilers and bundlers in the scope of the <code>core-js</code> project, but it’s possible to do those things:</p><ul><li>Improve provided by <code>core-js</code> data (<code>@core-js/compat</code>) and tools for integration with third-party projects, they should be comprehensive. For example, “built-in definitions” are still on Babel’s side that causing problems with their reuse in other projects.</li><li>Since some tools already provide <code>core-js</code> integration, makes sense to help them, not only Babel.</li><li>Makes sense to write and maintain plugins for some significant tools in the scope of the <code>core-js</code> project. What? Will see.</li></ul><h3 id="Polyfills-collector"><a href="#Polyfills-collector" class="headerlink" title="Polyfills collector"></a>Polyfills collector</h3><p>One of the problems of the statical analysis-based automatic polyfilling on the files layer (<code>usage</code> polyfilling mode of Babel <code>preset-env</code>) was explained above, but it’s not the only problem. Let’s talk about some others.</p><p>Your dependencies could have their own <code>core-js</code> dependencies and they can be incompatible with the <code>core-js</code> version that you use at the root of your project, so injecting <code>core-js</code> imports to your dependencies directly could cause breakage.</p><p>Projects often contain multiple entry points, multiple bundles, and, in some cases, the proper moving of all <code>core-js</code> modules to one chunk can be problematic and it could cause duplication of <code>core-js</code> in each bundle.</p><p>I already posted <a href="https://gist.github.com/zloirock/7331cec2a1ba74feae09e64584ec5d0e">the <code>core-js</code> usage statistics</a> above. In many cases, you could see the duplication of <code>core-js</code> - and it’s only on the first loaded page of the application. Sometimes it’s even like what we see on the Bloomberg website:</p><p align="center"><img alt="bloomberg" width="720" src="https://user-images.githubusercontent.com/2213682/218467140-c475482c-24b0-4420-b510-32f6e2a15743.png" /></p><p><a href="https://user-images.githubusercontent.com/2213682/115339234-87e1f700-a1ce-11eb-853c-8b93b7fc5657.png">Some time ago this number was even more.</a> Of course, a such number of copies and various versions of <code>core-js</code> is not something typical, but a situation with some copies of <code>core-js</code> is too common and you could see it on about half of the websites with <code>core-js</code>, so for preventing this <strong>required a way to collect all polyfills from all entry points, bundles and dependencies of the project in one place.</strong></p><p>Let’s call a tool for this <code>@core-js/collector</code>. This tool should take an entry point or a list of entry points and should use the same statical analysis that’s used in <code>preset-env</code>, however, this tool should not transform code or inject anything, should check full dependencies trees and should return a full list of required <code>core-js</code> modules. Require simple ways to integrate this into the current development stack. One of those ways can be a new polyfilling mode in plugins, let’s call it <code>collected</code> - that will allow loading all collected polyfills of the application in one place and remove unnecessary (see below).</p><h3 id="Removing-unnecessary-third-party-polyfills"><a href="#Removing-unnecessary-third-party-polyfills" class="headerlink" title="Removing unnecessary third-party polyfills"></a>Removing unnecessary third-party polyfills</h3><p>Now it’s typical to see, for example, a dozen copies of <code>Promise</code> polyfills with the same functionality on a website - you load only one <code>Promise</code> polyfill from <code>core-js</code>, but some of your dependencies load <code>Promise</code> polyfills by themself - <code>Promise</code> polyfill from one more <code>core-js</code> copy, <code>es6-promise</code>, <code>promise-polyfill</code>, <code>es6-promise-polyfill</code>, <code>native-promise-only</code>, etc. But it’s just ES6 <code>Promise</code> which is already completely covered by <code>core-js</code> - and available in most browsers without polyfills. Sometimes, due to this, the size of all polyfills in the bundle swells to several megabytes.</p><p>It’s not an ideal illustration for this issue, many other examples would have been better, but since above we started to talk about the Bloomberg website, let’s take a look at this site one more time. We have no access to the source code, however, we have, for example, such an awesome tool as <a href="https://bundlescanner.com/website/bloomberg.com%2Feurope/all"><code>bundlescanner.com</code></a> (I hope that the Bloomberg team will fix it ASAP, so the result could be outdated).</p><p align="center"><img alt="bundlescanner" width="720" src="https://user-images.githubusercontent.com/2213682/181242201-ec16dd17-f4dd-4706-abf5-36e764c72e22.png" /></p><p>As shown in the practice, since such analysis it’s not a simple work, this tool detects only about half of libraries’ code. However, in addition to 4.5 hundred kilobytes of <code>core-js</code>, we see hundreds of kilobytes of other polyfills - many copies of <code>es6-promise</code>, <code>promise-polyfill</code>, <code>whatwg-fetch</code> (<a href="#web-standards-polyfills">for the above reason</a>, <code>core-js</code> <em>still</em> does not polyfill it), <code>string.prototype.codepointat</code>, <code>object-assign</code> (it’s a <em>ponyfill</em> and about them the next section), <code>array-find-index</code>, etc.</p><p>But how many polyfills were not detected? What’s the size of all polyfills that this website loads? It seems a couple of megabytes. However, even for <em>very</em> old browsers, maximally a hundred kilobytes more than be enough… And this situation is not something unique - it’s a too common problem.</p><p>Since many of those polyfills contain just a subset of <code>core-js</code> functionality, in the scope of <code>@core-js/compat</code>, we could collect data that will show if a module is an unnecessary third-party polyfill or not and, if this functionality is contained in <code>core-js</code>, a transpiler or bundler plugin will remove the import of this module or will replace it to the import of suitable <code>core-js</code> modules.</p><p>The same approach could be applied to rid dependencies from old <code>core-js</code> versions.</p><h3 id="Globalization-of-pure-version-polyfills-ponyfills"><a href="#Globalization-of-pure-version-polyfills-ponyfills" class="headerlink" title="Globalization of pure version polyfills &#x2F; ponyfills"></a>Globalization of pure version polyfills &#x2F; ponyfills</h3><p>One more popular and similar issue is a duplication of polyfills from global and pure <code>core-js</code> versions. The pure version of <code>core-js</code> &#x2F; <code>babel-runtime</code> is intended for usage in libraries code, so it’s a normal situation if you use a global version of <code>core-js</code> and your dependencies also load some copies of <code>core-js</code> without global namespace pollution. They use different internals and it’s problematic to share similar code between them.</p><p>I’m thinking about resolving this issue on the transpiler or bundler plugins side similarly to the previous one (but, sure, a little more complex) - we could replace imports from the pure version with imports from the global version and remove polyfills unnecessary for the target engines.</p><p>That also could be applied to third-party ponyfills or obsolete libraries that implement something already available in the JS standard library. For example, usage of <code>has</code> package can be replaced by <code>Object.hasOwn</code>, <code>left-pad</code> by <code>String.prototype.padStart</code>, some <code>lodash</code> methods by related modern built-in JS methods, etc.</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Loading the same polyfills, for example, in IE11, iOS Safari 14.8, and the latest Firefox is wrong - too much dead code will be loaded in modern browsers. At this moment, a popular pattern is a usage 2 bundles - for “modern” browsers that will be loaded if native modules are supported, <code>&lt;script type=&quot;module&quot;&gt;</code>, and for obsolete browsers which do not support native modules, <code>&lt;script nomodule&gt;</code> (a little harder in a practice). For example, Lighthouse can detect some cases of polyfills that are not required with the <code>esmodules</code> target, <a href="https://googlechrome.github.io/lighthouse/viewer/?psiurl=https://www.bloomberg.com/europe&strategy=mobile&category=performance">let’s check the long-suffering Bloomberg website</a>:</p><p align="center"><img alt="lighthouse" width="720" src="https://user-images.githubusercontent.com/2213682/148652288-bd6e452a-f6ba-417d-8972-9d98d2f715a4.png" /></p><p>Lighthouse shows just about 200KB in all resources, 0.56s. Let’s remember that the site contains about a couple of megabytes of polyfills. <a href="https://github.com/GoogleChrome/lighthouse/issues/13440">Now Lighthouse detects less than half of the features that it should</a>, but even with another half, it’s only a little part of all loaded polyfills. Where are the rest? Are they really required for a modern browser? The problem is that the lower bar of native modules support is too low - “modern” browsers, in this case, will need most of the polyfills of stable JS features that are required for old IE, so a part of polyfills is shown in the “unused JavaScript” section that takes 6.41s, a part is not shown at all…</p><p>From the very beginning of work on <code>core-js</code>, I’m thinking about creating a web service that gives only the polyfills that are needed for the requesting browser.</p><p>The availability of a such service is the only moment in which <code>core-js</code> have lagged behind another project. <a href="https://polyfill.io/"><code>polyfill-service</code></a> project from Financial Times is based on this conception and it’s a great service. The main problem with this project - it’s a great service that uses bad polyfills. This project polyfill only a little part of ECMAScript features that <code>core-js</code> provides, the main part of polyfills are third-party and are not designed to work together, too many don’t properly follow specs, too raw or just dangerous for usage (for example, <a href="https://github.com/Financial-Times/polyfill-library/blob/554248173eae7554ef0a7776549d2901f02a7d51/polyfills/WeakMap/polyfill.js"><code>WeakMap</code> looks like a step-by-step implementation of the spec text</a>, but the absence of some non-spec magic cause memory leaking and linear access time that makes it harmful, more other - instead of patching, fixing and reusage of native implementation in engines like IE11 where it’s available, but does not accept an iterable argument, <a href="https://github.com/Financial-Times/polyfill-library/blob/554248173eae7554ef0a7776549d2901f02a7d51/polyfills/WeakMap/detect.js"><code>WeakMap</code> will be completely replaced</a>). Some good developers try to fix this from time to time, but polyfills themselves are given unforgivably little time, so it’s still too far from something that could be recommended for usage.</p><p>Creating such a service in the proper form requires the creation and maintenance of many new components. I work on <code>core-js</code> alone, the project does not have the necessary support from any company, and the development is carried out with pure enthusiasm, I need to look for funds to feed myself and my family, so I have no time and other resources required for that. However, in the scope of other tasks, I already made some required components, and discussions with some users convinced me that creating a maximally simplified service that you could start on your own server could be enough.</p><p>We already have the best set of polyfills, the proper compatibility data, and the builder which already could create a bundle for a target browser. Already mentioned above <code>@core-js/collector</code> could be used for optimization - getting only the required subset of modules, plugins for transpilers &#x2F; bundlers - for removing unnecessary polyfills. Missed a tool for the normalization of the user agent and a service that will bind those components together. Let’s call it <code>@core-js/service</code>.</p><h4 id="How-should-it-look-in-the-perfect-world"><a href="#How-should-it-look-in-the-perfect-world" class="headerlink" title="How should it look in the perfect world?"></a>How should it look in the perfect world?</h4><ul><li>You bundle your project. A plugin on the bundlers side removes all polyfills import (including third-party, without global pollution, from your dependencies, etc.). Your bundles will not contain any polyfills.</li><li>You run <code>@core-js/service</code>. When you run it, <code>@core-js/collector</code> checks all your frontend codebase, all your entry points, including dependencies, and collects a list of all required polyfills.</li><li>A user loads a page and requests a polyfill bundle from the service. The service gives the client a bundle compiled for the target browser that contains the required subset of polyfills and uses allowed syntax.</li></ul><p>So, with this complex of tools, modern browsers will not load polyfills at all if they are not required, old browsers will load only required and maximally optimized polyfills.</p><hr><p>Most of the above are about minimizing the size of polyfills sent to the client - but these are just a little subset of the concepts that it would be good to implement in the scope of <code>core-js</code>, however, I think that it’s enough for understanding that still required a huge work and this work could significantly improve web development. Whether it will be implemented in practice and whether it will be available as FOSS or as a commercial project is up to you.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This was the last attempt to keep <code>core-js</code> as a free open-source project with a proper quality and functionality level. It was the last attempt to convey that there are real people on the other side of open-source with families to feed and problems to solve.</p><p>If you or your company use <code>core-js</code> in one way or another and are interested in the quality of your supply chain, support the project:</p><ul><li><a href="https://opencollective.com/core-js"><strong>Open Collective</strong></a></li><li><a href="https://patreon.com/zloirock"><strong>Patreon</strong></a></li><li><a href="https://boosty.to/zloirock"><strong>Boosty</strong></a></li><li><strong>Bitcoin ( bc1qlea7544qtsmj2rayg0lthvza9fau63ux0fstcz )</strong></li></ul><p><strong>Write me if you want to offer a good job on Web-standards and open-source.</strong></p><hr><p><strong>Feel free to add comments to this post <a href="https://github.com/zloirock/core-js/issues/1179">here.</a></strong></p><p><strong><a href="https://github.com/zloirock">Denis Pushkarev</a>, February 14th 2023</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录SpringSecurity的一次实践</title>
      <link href="/2023/12/08/%E8%AE%B0%E5%BD%95SpringSecurity%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/12/08/%E8%AE%B0%E5%BD%95SpringSecurity%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;在项目中需要有用户和管理员登录的功能，用户登陆后观看视频记录观看时长，起先那做的真的时太潦草了完全没有意识，user 一张表，admin 一张表，然后不同的 RequestMapping，后来猛然惊醒，那用户不是可以在不同地方一起登录，一起看视频刷多倍的时长了么，这可不行啊，后来百度了一大圈，最后决定还是用 springsecurity，其实也不是很确定用哪个，但是就感觉它主流一点?</p><p>&ensp;&ensp;一开始看别人的博客的时候都是一头雾水，这怎么怎么就可以了，很少有对每个部分有详细的解释的，后来看了松哥的教程才渐渐的理解，链接：<a href="http://www.javaboy.org/springsecurity/">江南一点雨</a>，这篇博客也是看了松哥文章后的一次总结。</p><hr><h1 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h1><p>SpringSecurity 是一个权限管理框架，包括验证用户的密码是否正确，用户的角色是普通用户还是管理员，某项操作是否得到授权等，框架的作用就是让我们少些代码少配置，缺点就是对于初学者来说就一开始比较难上手，在 springboot 中，它可以很方便和其他部分结合，只需要引入依赖就可以保护所有的接口。我们操作的主要是三个部分</p><ul><li><ol><li>实体类 User，它就是 SpringSecurity 给我们定义的实体类<br><img src="/image/%E8%AE%B0%E5%BD%95SpringSecurity%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/1678377525493.png" alt="1678377525493"><br>从源码中我们可以看到它实现了 UserDetails 接口，但是他这里实例变量很多，我们可以自己创建实体类并实现 UserDetails 接口</li></ol></li><li><ol start="2"><li>UserDetailsService 它是用来获取用户信息，返回 UserDetails 类，我们也可以创建一个类并实现 UserDetailsService 来自定义返回的内容，例如我在项目中的实现：<br><img src="/image/%E8%AE%B0%E5%BD%95SpringSecurity%E7%9A%84%E4%B8%80%E6%AC%A1%E5%AE%9E%E8%B7%B5/1678377576565.png" alt="1678377576565"><br>在数据库中查找是否有对应 userId 的用户没有就抛出 UsernameNotFound 异常，然后在授权中加入用户的角色，最后返回 userBean。</li></ol></li><li>3.WebSecurityConfig 配置类</li></ul><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><p>在 pom.xml 中加入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖后我们可以先直接运行试一下</p><h2 id="2-读入数据"><a href="#2-读入数据" class="headerlink" title="2.读入数据"></a>2.读入数据</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2023/12/08/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/12/08/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h4 id="常见组件有哪些"><a href="#常见组件有哪些" class="headerlink" title="常见组件有哪些"></a>常见组件有哪些</h4><ul><li>注册中心：nacos</li><li>负载均衡：ribben</li><li>远程调用：feign</li><li>服务熔断降级：sentinel</li><li>网关：gateway</li></ul><h4 id="服务注册和发现是什么意思？"><a href="#服务注册和发现是什么意思？" class="headerlink" title="服务注册和发现是什么意思？"></a>服务注册和发现是什么意思？</h4><p>服务将自己的服务名和 ip 端口号信息发送到注册中心，注册中心保存这些信息并且定时发送心跳信息，判断服务的存活状态<br>服务发现是服务和注册中心会推送和拉取服务信息，发起远程调用时根据负载均衡策略向目标服务发起请求</p><h4 id="注册中心-nacos"><a href="#注册中心-nacos" class="headerlink" title="注册中心 nacos"></a>注册中心 nacos</h4><p>nacos同时支持配置中心，集群默认采用AP模式</p><h4 id="ribbon-负载均衡，负载均衡策略，自定义负载均衡"><a href="#ribbon-负载均衡，负载均衡策略，自定义负载均衡" class="headerlink" title="ribbon 负载均衡，负载均衡策略，自定义负载均衡"></a>ribbon 负载均衡，负载均衡策略，自定义负载均衡</h4><p>feign中已经集成了ribbon，发起调用时，会先从注册中心拉去服务的地址，按照负载均衡策略选择一个地址发送<br>负载均衡有轮询，随机，权重和地域的方式<br>可以通过实现IRule接口自定义，这是全局的负载均衡策略<br>也可以通过再配置文件中配置调用每个服务的负载均衡策略</p><h4 id="服务雪崩、熔断降级"><a href="#服务雪崩、熔断降级" class="headerlink" title="服务雪崩、熔断降级"></a>服务雪崩、熔断降级</h4><p>服务雪崩是指服务的调用链路较长时，后面的服务发生了阻塞等问题，导致整个服务链路的不可用<br>可以使用服务熔断和服务降级的方式避免<br>服务降级：当调用的服务出现异常时的策略<br>服务熔断：当对服务的多次请求出现失败时，会触发熔断机制</p><h4 id="微服务的监控-skywalking"><a href="#微服务的监控-skywalking" class="headerlink" title="微服务的监控-skywalking"></a>微服务的监控-skywalking</h4><p>可以监控接口服务的状态，可以看到哪些服务和结构速度较慢，可以进行针对性的优化</p><h4 id="微服务限流（漏桶算法、令牌桶算法）"><a href="#微服务限流（漏桶算法、令牌桶算法）" class="headerlink" title="微服务限流（漏桶算法、令牌桶算法）"></a>微服务限流（漏桶算法、令牌桶算法）</h4><h4 id="分布式系统理论-CAP-和-BASE"><a href="#分布式系统理论-CAP-和-BASE" class="headerlink" title="分布式系统理论-CAP 和 BASE"></a>分布式系统理论-CAP 和 BASE</h4><p>CAP是分布式项目的一个理论，包括一致性，可用性，分区容错性</p><p>对分布式系统来说分区容错性是必须的，另外在一致性和可用性中只能二选一</p><p>BASE是CAP中AP的延申，主要思想是采取一些措施，使得数据达到最终的一致性。</p><h4 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h4><p>主要是使用MQ实现的分布式事务，对数据的即时性要求没有那么高，数据是最终一致性的</p><h4 id="分布式服务的接口幂等性如何设计"><a href="#分布式服务的接口幂等性如何设计" class="headerlink" title="分布式服务的接口幂等性如何设计"></a>分布式服务的接口幂等性如何设计</h4><p>使用token的方式，比如在打开订单页面的时候后端返回一个toke给前端，前端提交订单信息时携带token，后端检查token是否存在，存在就往下执行，然后删除token</p><h4 id="你们项目中使用了什么分布式任务调度-xxl-job"><a href="#你们项目中使用了什么分布式任务调度-xxl-job" class="headerlink" title="你们项目中使用了什么分布式任务调度-xxl-job"></a>你们项目中使用了什么分布式任务调度-xxl-job</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2023/12/08/JVM/"/>
      <url>/2023/12/08/JVM/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h4 id="什么是类加载器"><a href="#什么是类加载器" class="headerlink" title="什么是类加载器"></a>什么是类加载器</h4><p>类加载器是将 class 文件加载到 jvm 中，jvm 中有四个类加载器</p><ul><li>启动类加载器：由 C++编写，加载 java 的核心类</li><li>扩展类加载器：加载 java 的扩展类</li><li>应用程序加载器：加载 classPath 中的类，也就是用户自己编写的类</li><li>自定义类加载器：用户自定义</li></ul><h4 id="什么是双亲委派模型"><a href="#什么是双亲委派模型" class="headerlink" title="什么是双亲委派模型"></a>什么是双亲委派模型</h4><p>加载一个类时如果类有上级类加载器，则将类的加载委托给上级，如果上级类加载器不能加载这个类，就将这个类的请求向下传递，让下级的类加载器加载</p><p>原因：</p><ul><li>确保 JVM 中类的唯一性，防止重复加载</li><li>保证类库 API 的安全性</li></ul><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><ul><li>加载：将类的字节码加载成 java 类模型，创建这个类的 Class 对象</li><li>验证：检查这个类是否符合 JVM 规范</li><li>准备：为static修饰的变量赋初始值，static final的直接赋值</li><li>解析：将类中的符号引用转换为直接引用</li><li>初始化：为类变量赋值，执行静态代码块</li><li>使用：从main方法中开始执行</li><li>销毁：销毁Class对象</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity6.0.1中角色继承无效的问题</title>
      <link href="/2023/12/08/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/08/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><hr><h1 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h1><p>&ensp;&ensp;我在 SpringSecurity 中做了不少的实验，但总感觉对这个框架还是有点模糊，最近在复习 SpringSecurity，进行到角色继承时，发现角色继承并没有起作用，折腾了很久最后在 SpringSecurity 的 issue 中找到了解决方法，主要问题就是 6.0.1 的版本还没有很好地兼容 RoleHierarchy 这个 Bean。</p><h1 id="二、通常做法"><a href="#二、通常做法" class="headerlink" title="二、通常做法"></a>二、通常做法</h1><p>&ensp;&ensp;通常我们做角色继承只需要自定义注入一个 <code>RoleHierarchy</code> 的 Bean 就可以了，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">static</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RoleHierarchyImpl</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、试验"><a href="#三、试验" class="headerlink" title="三、试验"></a>三、试验</h1><p>&ensp;&ensp;准备三个接口，其中 <code>getAll</code> 不设置访问权限，<code>getUser</code> 只允许有 User 权限的用户访问，<code>getAdmin</code> 只允许有 Admin 权限的用户访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">(<span class="meta">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">&quot; ALL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;user&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">&quot; USER&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getAdmin&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAdmin</span><span class="params">(<span class="meta">@RequestParam(&quot;msg&quot;)</span> String msg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">&quot; ADMIN&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后向登录接口发送请求，在这里用户 1111 的角色是管理员，111 则是普通用户，这两个账号是在保存再数据库中的，登录成功后返回用户名</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157532410.png#pic_center" alt="1678157532410"></p><p>之后访问 <code>getAll</code></p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157741520.png" alt="1678157741520"></p><p>访问成功,再访问 <code>getAdmin</code></p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157776037.png" alt="1678157776037"><br>也能访问到，最后再访问 <code>getUser</code> 看看角色继承是否有效<br><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678157826069.png" alt="1678157826069"></p><p>这里报 403 禁止访问了，为了探究是哪出的问题，我们在类 <code>SecurityExpressionRoot</code> 的 <code>hasRole</code> 方法中打个断点，之后一直步入到方法 <code>hasAnyAuthorityName</code>，该方法的第一行是将方法 <code>getAuthoritySet</code> 的结果放到 <code>roleSet</code> 中，根据名字这个方法应该是获取当前用户的角色集合。</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678158151080.png" alt="1678158151080"></p><p>步过该方法，发现这集合里面只有 ROLE*ADMIN</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678159673712.png" alt="1678159673712"></p><p>方法 <code>hasAnyAuthorityName</code> 后面的部分则是把 <code>haseRole</code> 中的角色加上前缀 ROLE*，并判断这个角色是否在 <code>roleSet</code> 里，那这肯定是不包括的，最后返回 False，所以就访问不到这个接口了。<br>我们重新在发送一次请求到 <code>getUser</code>，步入方法 <code>getAuthoritySet</code>，</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678159809157.png" alt="1678159809157"></p><p>其中关键的第三行可以看到就是判断当前对象的 <code>roleHierachy</code> 是否为空，不为空则将返回所有可访问权限的集合</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678161022293.png" alt="1678161022293"></p><p>之后将权限集合转换为 <code>Set</code></p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678161087471.png" alt="1678161087471"></p><p>但在这里 <code>roleHierachy</code> 是 null 啊，what？我们配置的角色继承哪去了？</p><p>后面去翻了翻 <a href="https://docs.spring.io/spring-security/reference/6.0.1/servlet/authorization/architecture.html#authz-hierarchical-roles">SpringSecurity 的文档</a>，它给的示例是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">AccessDecisionVoter <span class="title function_">hierarchyVoter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RoleHierarchy</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">    hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_STAFF\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ROLE_STAFF &gt; ROLE_USER\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyVoter</span>(hierarchy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照这个方法写了之后依旧还是不行。。。<br>idea 也提示类 <code>AccessDecisionVoter</code> 和 <code>RoleHierarchyVoter</code> 已经弃用了，进入这两个类都提示改用 <code>AuthorizationManager</code></p><p>在 SpringSecurity 的<a href="https://github.com/spring-projects/spring-security/issues/12766">一个 issue</a> 中发现有关文档中给的示例无效的问题<br>后面的回复中有一个解决方法。</p><blockquote><p>Thanks for the report, @istoony. <code>RoleHierarchy</code> bean configuration is not fully ported over as of 6.0.x. As such, I think what should be done here is add a note about that in the documentation and then update it once completed. I’ve also added #12783 detailing what needs to be done to support <code>RoleHierarchy</code> bean configuration.<br>In the meantime, to configure <code>RoleHierarchy</code> for pre-post method security, use <code>DefaultMethodSecurityExpressionHandler</code>:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">static</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RoleHierarchy</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">    hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_STAFF\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ROLE_STAFF &gt; ROLE_USER\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyVoter</span>(hierarchy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">static</span> DefaultMethodSecurityExpressionHandler <span class="title function_">methodSecurityExpressionHandler</span><span class="params">(RoleHierarchy roleHierarchy)</span> &#123;</span><br><span class="line">    <span class="type">DefaultMethodSecurityExpressionHandler</span> <span class="variable">expressionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodSecurityExpressionHandler</span>();</span><br><span class="line">    expressionHandler.setRoleHierarchy(roleHierarchy);</span><br><span class="line">    <span class="keyword">return</span> expressionHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>And to configure it for filter security, use the <code>access(AuthorizationManager)</code> method instead of <code>hasRole</code>, like so:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AuthorityAuthorizationManager&lt;RequestAuthorizationContext&gt; hasRoleUser =</span><br><span class="line">    AuthorityAuthorizationManager.hasRole(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">hasRoleUser.setRoleHierarchy(roleHierarchy);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    .authorizeHttpRequests((authorize) -&gt; authorize</span><br><span class="line">        .requestMatchers(<span class="string">&quot;/needs/user/**&quot;</span>).access(hasRoleUser)</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>按照这个示例将角色继承的配置修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">static</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RoleHierarchyImpl</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">static</span> DefaultMethodSecurityExpressionHandler <span class="title function_">methodSecurityExpressionHandler</span><span class="params">(RoleHierarchy roleHierarchy)</span> &#123;</span><br><span class="line">        <span class="type">DefaultMethodSecurityExpressionHandler</span> <span class="variable">expressionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodSecurityExpressionHandler</span>();</span><br><span class="line">        expressionHandler.setRoleHierarchy(roleHierarchy);</span><br><span class="line">        <span class="keyword">return</span> expressionHandler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过测试，角色为 ADMIN 的用户都可以访问到 <code>hasRole(&quot;user&quot;)</code>的接口，并且 user 角色也还是访问不了 <code>hasRole(&quot;ADMIN&quot;)</code>的接口，角色继承生效了！</p><h1 id="通常做法无效的原因"><a href="#通常做法无效的原因" class="headerlink" title="通常做法无效的原因"></a>通常做法无效的原因</h1><p>在 6.1.0-SNAPSHOT 版本的文档中对应角色继承的位置有这么一个提示</p><p><img src="/image/SpringSecurity6.0.1%E4%B8%AD%E8%A7%92%E8%89%B2%E7%BB%A7%E6%89%BF%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/1678168778522.png" alt="1678168778522"><br><code>RoleHierarchy</code> 这个 Bean 还没有适配@EnableMethodSecurity 这个注解，需要等到这个 issues 修完。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows搭建RabbitMq集群</title>
      <link href="/2023/12/08/Windows%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4/"/>
      <url>/2023/12/08/Windows%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><hr><h1 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h1><p>&ensp;&ensp;RabbitMQ 在 Linux 端的集群搭建可参考的教程很多，但 windows 端的相对较少，虽然生产环境肯定还是要在 Linux 上整的，但是本着不整好不痛快的精神，参考了好几篇博客，踩了一些坑，终于搭好了。😆😆😆</p><h1 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h1><p>集群包括一个主节点，两个从节点，以下是操作步骤</p><ol><li><p>打开 windows 命令提示符，注意不是 powershell(后续需要在这个终端设置变量)<br><img src="/image/Windows%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4/1687607312573.png" alt="1687607312573"></p></li><li><p>新建三个命令提示符，每个终端负责每个节点的环境配置和启动，在每个命令提示符中依次执行设置环境变量，启动节点的命令。<br><code>第一、三行命令中的值是端口号，第二行的值是节点名称，可以根据需求更改</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置主节点</span></span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODE_PORT=5673</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODENAME=master</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15673&#125;]</span><br><span class="line">rabbitmq-server.bat</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置从1节点</span></span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODE_PORT=5674</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODENAME=slave1</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15674&#125;]</span><br><span class="line">rabbitmq-server.bat</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置从2节点</span></span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODE_PORT=5675</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_NODENAME=slave2</span><br><span class="line"><span class="built_in">set</span> RABBITMQ_SERVER_START_ARGS=-rabbitmq_management listener [&#123;port,15675&#125;]</span><br><span class="line">rabbitmq-server.bat</span><br></pre></td></tr></table></figure></li><li><p>新建一个终端，在终端内停止每个节点的运行并重置每个节点(防止创建集群时出现不同步等问题)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat -n master stop_app</span><br><span class="line">rabbitmqctl.bat -n master reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl.bat -n slave1 stop_app</span><br><span class="line">rabbitmqctl.bat -n slave1 reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl.bat -n slave2 stop_app</span><br><span class="line">rabbitmqctl.bat -n slave2 reset</span><br></pre></td></tr></table></figure></li><li><p>启动主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat -n master start_app</span><br></pre></td></tr></table></figure></li><li><p>从节点挂载到主节点下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat -n slave1 join_cluster master@workMachine</span><br><span class="line">rabbitmqctl.bat -n slave2 join_cluster master@workMachine</span><br></pre></td></tr></table></figure></li><li><p>启动从节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl.bat -n slave1 start_app</span><br><span class="line">rabbitmqctl.bat -n slave2 start_app</span><br></pre></td></tr></table></figure></li></ol><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>这时再进入主节点的控制界面就可以看到三个节点都在线了<br><img src="/image/Windows%E6%90%AD%E5%BB%BARabbitMq%E9%9B%86%E7%BE%A4/1687607211343.png" alt="1687607211343"><br>通过命令<code>rabbitmqctl.bat cluster_status -n master</code>也可以看到三个节点的运行状况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\hahaha&gt; rabbitmqctl.bat cluster_status -n master</span><br><span class="line">Cluster status of node master@workMachine ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: master@workMachine</span><br><span class="line">Total CPU cores available cluster-wide: 48</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">master@workMachine</span><br><span class="line">slave1@workMachine</span><br><span class="line">slave2@workMachine</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">master@workMachine</span><br><span class="line">slave1@workMachine</span><br><span class="line">slave2@workMachine</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">master@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1</span><br><span class="line">slave1@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1</span><br><span class="line">slave2@workMachine: RabbitMQ 3.12.0 on Erlang 26.0.1</span><br><span class="line"></span><br><span class="line">CPU Cores</span><br><span class="line"></span><br><span class="line">Node: master@workMachine, available CPU cores: 16</span><br><span class="line">Node: slave1@workMachine, available CPU cores: 16</span><br><span class="line">Node: slave2@workMachine, available CPU cores: 16</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合类</title>
      <link href="/2023/12/08/collection/"/>
      <url>/2023/12/08/collection/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h4 id="底层原理及构造函数相关"><a href="#底层原理及构造函数相关" class="headerlink" title="底层原理及构造函数相关"></a>底层原理及构造函数相关</h4><p>ArrayList 底层维护一个数组 elementData，共有三个构造函数</p><ul><li>无参构造：将一个空数组赋值给 elementData</li><li>参数 int initialCapacity：初始化手动指定数组长度，小于 0 抛出异常，等于 0 将 elementData 赋值为空数组，大于 0 赋值为指定长度的数组</li><li>参数 Collection&lt;? extends E&gt; c：将 c 转化为数组后更具情况赋值</li></ul><p>在增加元素时，首先会判断当前数组的空间是否足够，如果不够，调用 grow 方法需要扩容为原大小的 1.5 倍，然后再将元素存储到数组中 size 的位置中</p><h4 id="如何实现数组和-List-之间的转换"><a href="#如何实现数组和-List-之间的转换" class="headerlink" title="如何实现数组和 List 之间的转换"></a>如何实现数组和 List 之间的转换</h4><p>List 转数组，调用 List 的 toArray 方法，更改数组，list 不会变，因为是将数据拷贝到数组<br>数组转 List，工具类 Arrays 的 asList 方法（注意：返回的 ArrayList 不能操作，因为返回的是 Arrays 内部的类，不是常见的那个），更改数组，list 会变，因为底层只是将数组的地址赋给了 ArrayList 中的数组</p><h4 id="ArrayList-和-LinkedList-的区别是什么？"><a href="#ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="ArrayList 和 LinkedList 的区别是什么？"></a>ArrayList 和 LinkedList 的区别是什么？</h4><p>ArrayList 底层为数组，LinkedList 底层为链表<br>访问元素时，ArrayList 的时间复杂度为 O(1)，链表为 O(n)<br>LinkedList 在头尾增加或删除时间复杂度为 O(1)，其他部分需要遍历链表时间复杂度为 O(n)<br>ArrayList 在后面增加元素时间复杂度为 O(1)，其他部分需要时间复杂度为 O(n)</p><p>链表占用的空间会大一些，因为还需要存储两个指针</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h4 id="HashMap-的实现原理"><a href="#HashMap-的实现原理" class="headerlink" title="HashMap 的实现原理"></a>HashMap 的实现原理</h4><p>根据 key 计算出 hash 值得到一个索引的位置，然后将元素放置到对应的位置，如果存在元素就将元素挂载到已有元素的下方，变成一个双向链表，当链表长度大于 8，数组长度大于 64 时，会将对应索引位置的链表转换成红黑树</p><h4 id="put-方法的具体流程"><a href="#put-方法的具体流程" class="headerlink" title="put 方法的具体流程"></a>put 方法的具体流程</h4><p>首先判断当前的数组是否为空，不充足则先扩容，然后再计算 key 的索引值，再查看索引位置是否有元素，已经存在元素则比较索引位置值的 key 和插入数据的 key 是否相同，相同就直接更新，不相同判断是否为红黑树，不是红黑树那就是链表，随后遍历链表，如果存在相同的 key 则更新，遍历完还没有相同的，直接在尾部插入，判断长度是否大于 8，考虑是否需要转化成红黑树，如果是红黑树，则直接执行红黑树的插入方法，插入完成后判断++size 和四分之三数组长度的大小，大于则需要扩容</p><h4 id="HashMap-的扩容机制"><a href="#HashMap-的扩容机制" class="headerlink" title="HashMap 的扩容机制"></a>HashMap 的扩容机制</h4><p>首先判断是否大于 0，否则直接设置数组容量为 16，阈值为 12 并且新建数组，如果大于 0，则创建值为现在长度的两倍的变量作为新数组的长度，并且创建一个新数组，之后需要遍历数组，如果只有下标位置一个元素就直接放入新数组的对应位置，对应位置由索引模新数组长度计算得到，如果下标位置之后还有元素再判断是否为红黑树，是红黑树则直接添加红黑树，不是红黑树，那么说明是链表，需要遍历链表，对链表的元素做拆分的操作，链表元素的 hash 值模老数组的长度，等于 0 则直接添加到新数组相同下标，其他情况添加到新数组中下标为下标值加上老数组的长度</p><h4 id="HashMap-的寻址算法和数组长度为什么是-2-的-n-次幂"><a href="#HashMap-的寻址算法和数组长度为什么是-2-的-n-次幂" class="headerlink" title="HashMap 的寻址算法和数组长度为什么是 2 的 n 次幂"></a>HashMap 的寻址算法和数组长度为什么是 2 的 n 次幂</h4><p>因为一个值模 2 的 n 次幂可以转换成（值-1）&amp;2 的 n 次幂<br>便于扩容时对 hash 值进行计算</p><h1 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>框架</title>
      <link href="/2023/12/08/framework/"/>
      <url>/2023/12/08/framework/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h4 id="1-单例-bean-线程安全"><a href="#1-单例-bean-线程安全" class="headerlink" title="1. 单例 bean 线程安全"></a>1. 单例 bean 线程安全</h4><p>单例 bean 不是线程安全的</p><h4 id="2-Spring-AOP"><a href="#2-Spring-AOP" class="headerlink" title="2. Spring-AOP"></a>2. Spring-AOP</h4><p>面向切面编程，可以增强某些类的功能，其中需要设置切面，比如设置加了注解的类方法、某个包下的类，抛出某些异常的类等，另外可以设置环绕或者前置后置等方法</p><h4 id="3-事务失效的场景"><a href="#3-事务失效的场景" class="headerlink" title="3. 事务失效的场景"></a>3. 事务失效的场景</h4><ul><li>方法中存在 trycatch，异常已经被内部捕获处理，可以在处理异常时再向外抛出</li><li>方法抛出了检查异常，再注解中加入 <code>rollbackFor = Exception.class</code> 让事务根据所有的异常回滚</li><li>方法不是 public</li></ul><h4 id="4-bean-的生命周期"><a href="#4-bean-的生命周期" class="headerlink" title="4. bean 的生命周期"></a>4. bean 的生命周期</h4><ul><li>构造函数创建 bean</li><li>注入相关依赖</li><li>处理 Aware 接口，bean 实现了 Aware 接口就会重写方法执行</li><li>执行后置处理器 BeanPostProcessor 的前置</li><li>执行初始化方法，比如加了 PostContruct 注解的方法</li><li>执行后置处理器 BeanPostProcessor 的后置，通常会对类进行增强</li><li>销毁</li></ul><h4 id="5-bean-的循环依赖"><a href="#5-bean-的循环依赖" class="headerlink" title="5. bean 的循环依赖"></a>5. bean 的循环依赖</h4><p>比如 A 中注入了 B，B 中注入了 A<br>spring 能为我们解决大多数的循环依赖问题，因为 spring 中存在三个保存 bean 的区域，第一个是单例池，是已经初始化完成的类，第二个保存的是早期的 bean，第三个是保存类工厂</p><ul><li><p>先实例 A 对象，同时会创建 ObjectFactory 对象存入三级缓存 singletonFactories</p></li><li><p>A 在初始化的时候需要 B 对象，这个走 B 的创建的逻辑</p></li><li><p>B 实例化完成，也会创建 ObjectFactory 对象存入三级缓存 singletonFactories</p></li><li><p>B 需要注入 A，通过三级缓存中获取 ObjectFactory 来生成一个 A 的对象同时存入二级缓存，这个是有两种情况，一个是可能是 A 的普通对象，另外一个是 A 的代理对象，都可以让 ObjectFactory 来生产对应的对象，这也是三级缓存的关键</p></li><li><p>B 通过从通过二级缓存 earlySingletonObjects 获得到 A 的对象后可以正常注入，B 创建成功，存入一级缓存 singletonObjects</p></li><li><p>回到 A 对象初始化，因为 B 对象已经创建完成，则可以直接注入 B，A 创建成功存入一次缓存 singletonObjects</p></li><li><p>二级缓存中的临时对象 A 清除</p></li></ul><p>spring 无法解决构造方法中的循环引用，可以再构造方法中加入@Lazy 注解等到需要用到依赖类的时候再创建依赖类</p><h2 id="Springmvc-执行流程"><a href="#Springmvc-执行流程" class="headerlink" title="Springmvc-执行流程"></a>Springmvc-执行流程</h2><ul><li>请求进来后进入 DispatcherServlet</li><li>DispatcherServlet 调用 HandlerMapper，Handler 根据路径找到对应的处理器，如果有过滤器也一起打包返回给 DispatcherServlet</li><li>DispatcherServlet 再调用 HandlerHandlerAdapter，HandlerHandlerAdapter 负责处理参数和返回值，如果是纯接口将执行的结果转换并且返回，如果是模板，则将结果返回给 DispatcherServlet，之后再由视图解析器解析成 html 返回</li></ul><h2 id="Springboot-自动配置原理"><a href="#Springboot-自动配置原理" class="headerlink" title="Springboot-自动配置原理"></a>Springboot-自动配置原理</h2><p><code>@SpringBootApplication</code> 注解中包含<code>@EnableAutoConfiguration</code> 、<code>@SpringBootConfigration</code> 和<code>@ComponentScan</code>，关键在于<code>@EnableAutoConfiguration</code>，该注解通过<code>@Import</code>注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的 Jar 包的的 classpath 路径下<strong>META-INF&#x2F;spring.factories</strong>文件中的所配置的类的全类名。</p><p>在这些配置类中所定义的 Bean 会根据条件注解所<strong>指定的条件来决定</strong>是否需要将其导入到 Spring 容器中。</p><p>一般条件判断会有像<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的 class 文件，如果有则加载该类，把这个配置类的所有的 Bean 放入 spring 容器中使用。</p><h2 id="spring-框架常见的注解（spring、springmvc、springboot）"><a href="#spring-框架常见的注解（spring、springmvc、springboot）" class="headerlink" title="spring 框架常见的注解（spring、springmvc、springboot）"></a>spring 框架常见的注解（spring、springmvc、springboot）</h2><ul><li>Spring<ul><li>配置：@Configuration、@ComponentScan、@Bean</li><li>依赖注入：@Autowired、@Qualifier、@Resourse</li><li>声明 bean：@Component、@Service、@Repository、@Controller</li><li>aop：@Aspect、@Before、@After、@Around、@Pointcut</li></ul></li><li>SpringMVC：@RequestMapping、@RequestBody、@RequestParam、@PathViriable</li><li>SpringBoot：@SpringBootApplication</li></ul><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h4 id="1-执行流程"><a href="#1-执行流程" class="headerlink" title="1. 执行流程"></a>1. 执行流程</h4><ul><li>读取配置文件</li><li>创建 <code>SqlSessionFactory</code></li><li>使用 <code>SqlSessionFactory</code> 创建 <code>SqlSession</code></li><li>创建 <code>Excutor</code></li><li>在 <code>Excutor</code> 中执行，其中包含 <code>MappedStatement</code> 保存了映射信息</li><li>将 java 对象转化成数据库类型</li><li>之后执行</li><li>将类型转化成 java 对象并返回</li></ul><h4 id="2-延迟加载使用及原理"><a href="#2-延迟加载使用及原理" class="headerlink" title="2. 延迟加载使用及原理"></a>2. 延迟加载使用及原理</h4><p>在一个对象中存在其他的对象，比如用户实体中存在订单实体，xml 文件中查找用户的订单也是单独的 sql 语句，此时可以设置查找订单的语句为延迟加载，只有访问用户实体中的订单时才会从数据库中查找，延迟加载在底层主要使用的 CGLIB 动态代理完成的</p><ul><li>使用 CGLIB 创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的 mapper</li><li>当调用目标方法时，进入拦截器 invoke 方法，发现目标方法是 null 值，再执行 sql 查询</li><li>获取数据以后，调用 set 方法设置属性值，再继续查询目标方法，就有值了</li></ul><h4 id="3-一级、二级缓存"><a href="#3-一级、二级缓存" class="headerlink" title="3. 一级、二级缓存"></a>3. 一级、二级缓存</h4><h1 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2023/12/08/mysql/"/>
      <url>/2023/12/08/mysql/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h4 id="1-如何定位慢查询"><a href="#1-如何定位慢查询" class="headerlink" title="1. 如何定位慢查询"></a>1. 如何定位慢查询</h4><p>使用 skywalking 等工具，追踪分析接口的执行时长，使用 mysql 的慢查询日志</p><h4 id="2-sql-语句执行的很慢，如何分析"><a href="#2-sql-语句执行的很慢，如何分析" class="headerlink" title="2. sql 语句执行的很慢，如何分析"></a>2. sql 语句执行的很慢，如何分析</h4><p>使用 explan 语句分析 sql 的执行计划，结果会展示走了哪个索引，索引长度走了多少，语句的优化建议等信息。</p><h4 id="3-索引概念及索引底层数据结构"><a href="#3-索引概念及索引底层数据结构" class="headerlink" title="3. 索引概念及索引底层数据结构"></a>3. 索引概念及索引底层数据结构</h4><p>索引是 mysql 额外维护的一些数据，用于快速查找到数据，和排序数据，底层是 B+树，和 B-树相比，B+树每个数据都储存在叶子节点，并且数据之间使用前后指针相连，形成一个双向链表，便于对数据进行范围查询，查找效率也更稳定。</p><h4 id="4-聚簇索引和非聚簇索引、回表查询"><a href="#4-聚簇索引和非聚簇索引、回表查询" class="headerlink" title="4. 聚簇索引和非聚簇索引、回表查询"></a>4. 聚簇索引和非聚簇索引、回表查询</h4><p>聚簇索引是指索引下的是一行的数据，非聚簇索引是指索引下的数据不是完整的一行，回表查询是指走了非聚集索引，但非聚集索引下的数据不完整，需要根据非聚集索引中的聚集索引再去聚集索引中找到完整的数据</p><h4 id="5-覆盖索引、超大分页优化"><a href="#5-覆盖索引、超大分页优化" class="headerlink" title="5. 覆盖索引、超大分页优化"></a>5. 覆盖索引、超大分页优化</h4><p>索引覆盖是指，走非聚集索引，非聚集索引中包含了要查找的所有字段，因此不需要再回表查询，因此我们常常将经常查找的字段设为联合索引，超大分页优化是使用子查询，在子查询中查找到主键的范围，然后再去聚簇索引中查找对应的行，提高性能。</p><h4 id="6-索引创建的原则"><a href="#6-索引创建的原则" class="headerlink" title="6. 索引创建的原则"></a>6. 索引创建的原则</h4><ul><li>很长的字段作为索引时使用前缀索引</li><li>对需要经常一起查询的数据创建联合索引</li></ul><h4 id="7-什么情况下索引会失效"><a href="#7-什么情况下索引会失效" class="headerlink" title="7. 什么情况下索引会失效"></a>7. 什么情况下索引会失效</h4><ul><li>违反最左前缀法则</li><li>索引字段出现条件右边的索引会失效</li><li>出现字符串左边的模糊匹配</li><li>在索引的字段上进行计算</li><li>字符串没有加引号</li></ul><h4 id="8-谈一谈你对-sql-优化的经验"><a href="#8-谈一谈你对-sql-优化的经验" class="headerlink" title="8. 谈一谈你对 sql 优化的经验"></a>8. 谈一谈你对 sql 优化的经验</h4><ul><li>建表时根据数据的实际情况使用适合的数据类型</li><li>如果字段定长，使用固定长度 char 类型，相比于不定长效率会更高</li><li>为经常一起查询的字段建立索引</li><li>分库分表</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h4 id="1-事务的特性"><a href="#1-事务的特性" class="headerlink" title="1. 事务的特性"></a>1. 事务的特性</h4><ul><li>A：原子性，一个事务是执行的最小单元</li><li>C：一致性，要么全都执行成功，要么全部执行失败</li><li>I：隔离性，别的事务的操作不会影响当前事务</li><li>D：持久性，事务提交后对数据的更改是永久的</li></ul><h4 id="2-并发事务问题、隔离级别"><a href="#2-并发事务问题、隔离级别" class="headerlink" title="2. 并发事务问题、隔离级别"></a>2. 并发事务问题、隔离级别</h4><p>在并发事务中存在三个问题</p><ul><li>脏读，读取到了别的事务还没有提交的事务</li><li>不可重复读，一个事务中两次读取到的同一条记录中有字段值不同</li><li>幻读，查找时不存在这条记录，插入时却发现已经存在了这条记录</li></ul><p>为了解决这三个问题，事务又有四个不同的隔离级别</p><ul><li>读未提交，脏读、不可重复读和幻读都可能出现</li><li>读已提交：只能避免脏读</li><li>可重复读：可以避免脏读和不可重复读</li><li>串行化：可以避免所有问题<br>mysql 默认的隔离级别时可重复读，这四个隔离级别中越往下数据安全性越高，但是性能越差</li></ul><h4 id="3-事务-undo-log-和-redo-log-的区别"><a href="#3-事务-undo-log-和-redo-log-的区别" class="headerlink" title="3. 事务-undo log 和 redo log 的区别"></a>3. 事务-undo log 和 redo log 的区别</h4><p>undo log 储存的是事务的回滚语句，比如事务中执行 delete，redo log 会生成 insert 语句。</p><p>redo log 储存的是数据页的物理变化，mysql 直接操作的是内存中的缓冲池中的片，按照一定的频率同步到磁盘中，但有可能出现宕机，数据未同步到磁盘，造成数据丢失的情况，undo log 就是记录这种情况下的操作，数据库恢复时，读取 undo log 恢复未同步的数据</p><h2 id="解释一下-mvcc"><a href="#解释一下-mvcc" class="headerlink" title="解释一下 mvcc"></a>解释一下 mvcc</h2><p>mvcc 是多版本并发控制，用于记录多个事务对数据的操作的版本，是的读操作和写操作没有冲突，主要由隐藏字段、undo log 和读视图组成 。</p><ul><li><p>隐藏字段：在每个表中mysql 会默认生成几个字段，包括了当前事务的 id，上一个版本的指针等信息。</p></li><li><p>undo log：存储版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本</p></li></ul><p> readView 解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务 id 判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是 rc 隔离级别，每一次执行快照读时生成 ReadView，如果是 rr 隔离级别仅在事务中第一次执行快照读时生成 ReadView，后续复用</p><h4 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h4><p>主库将 DML 和 DDL 生成 binlog 二进制文件，但不包括 selet 和 show 命令，然后从机获取主机中的 binlog，加载到从机的中间日志，从机读取中间日志，执行命令，完成同步</p><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h1 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h1><ol><li></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2023/12/08/redis/"/>
      <url>/2023/12/08/redis/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h4 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h4><p>有大量的请求访问不存在的 key，首先访问 redis，发现不存在当前 key 后 后再访问数据库，因为并不存在这条数据，当前查询的结果为<code>null</code>，也不会在 redis 中建立缓存，导致所有的请求全都打在数据库上，导致数据库崩溃</p><ul><li>缓存中添加空值<br>优点：实现简单<br>缺点：造成内存资源的浪费</li><li>布隆过滤器：创建一个比较大的数组，利用比特位，通过计算 key 的多个 hash 值，将对应位的值变为 1，请求时先经过布隆过滤器，通过计算目标 key 的 hash 判断对应位置的值是否全为 1 判断是否存在，但有误判的可能：一个 key 的 hash 对应到两个不同 key 的 hash 的比特位。<br>优点：不会造成内存资源的浪费<br>缺点：增加过滤器，会降低一些性能，实现较为复杂，有一定概率会误判。</li></ul><h4 id="1-缓存击穿"><a href="#1-缓存击穿" class="headerlink" title="1. 缓存击穿"></a>1. 缓存击穿</h4><p>某个热点 key 突然失效，所有的请求都打到数据库，导致数据库的崩溃</p><ul><li>设置互斥锁：当缓存失效后，通过 setnx 设置一个互斥锁，拿到这把锁的线程去进行缓存重建<br>优点：数据一致性较强<br>缺点：性能较低，可能产生死锁问题</li><li>设置逻辑过期时间：在建立缓存时当前缓存不设置过期时间，而是加入一个逻辑过期时间，查询后直接返回值并判断比较当前时间和逻辑过期时间，如果过期，开启另一个线程进行数据的同步。<br>优点：效率较高，性能不会有明显下降<br>缺点：过期后，返回的仍旧是旧数据，数据一致性较差</li></ul><h4 id="2-缓存雪崩"><a href="#2-缓存雪崩" class="headerlink" title="2. 缓存雪崩"></a>2. 缓存雪崩</h4><p>在某个时间，大量的 key 同时失效</p><ul><li>在创建缓存时，在设置的过期时间后添加一个随机数</li></ul><h4 id="3-双写一致性"><a href="#3-双写一致性" class="headerlink" title="3. 双写一致性"></a>3. 双写一致性</h4><p>数据库和缓存数据的一致性</p><ul><li>可以接受一定延时：双删，删除缓存，更新数据库，再删除一次缓存<br>更新数据时分为先更新数据库和先删除缓存，两者都有可能产生数据的不一致<br><img src="/image/redis/1689438549264.png" alt="1689438549264"><br><img src="/image/redis/1689438479837.png" alt="1689438479837"><br>其中先删数据库的方式发生的概率要远远小于先删除缓存<br>优点：实现较为简单<br>缺点：延时的时长不好控制，有一定的概率产生脏数据，可以使用消息队列，对缓存进行更改，避免脏数据的产生（canal）</li><li>强一致性：采用的是 redisson 实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据</li></ul><h4 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4. 持久化"></a>4. 持久化</h4><ul><li>RDB（内存快照）保存的是 redis 某一时刻的数据快照，主线程 fork 一个子线程，在内存空间中共享一个页表，能够访问到相同的内存，子线程完成内存快照的保存，可以通过配置 save 设置多少时间内修改多少个 key 保存快照<br>优点：数据量较小<br>缺点：发生宕机时，丢失的数据相对较多</li><li>AOF（命令）保存的是一条一条的 redis 命令，可以通过更改 appendfsync 配置保存增加命令的时间间隔，通过！！！配置将指令重排，将对同一个 key 的多次操作合并成一个，以减少数据量<br>优点：发生宕机时丢失数据相对较少<br>缺点：数据量较大</li></ul><h4 id="5-数据过期策略"><a href="#5-数据过期策略" class="headerlink" title="5. 数据过期策略"></a>5. 数据过期策略</h4><p>当到了 key 设置的过期时间后，从内存中删除 key 的策略</p><ul><li>惰性删除：到了过期时间后，不会立即删除内存中的 key 而是等到再次访问这个 key 的时候返回<code>null</code>并从内存中删除</li><li>定期删除：按照一定的时间间隔扫描所有的 key，发现到了过期时间了再删除，该操作的时间不能超过设置的时长，超过设置时长会直接结束，等待下一轮</li></ul><h4 id="6-数据淘汰策略"><a href="#6-数据淘汰策略" class="headerlink" title="6. 数据淘汰策略"></a>6. 数据淘汰策略</h4><p>当系统无可用内存时 redis 的行为，默认设置的是直接拒绝设置 key 的请求，另外还可以设置淘汰策略，例如随机，按照访问频率等，其中有两个重要概念 LRU 和 LFU，LRU（最近最少使用）当前时间减去每个 key 最后一次访问的时间，得到每个 key 没有被访问的时长，LFU（最少频率使用）一段时间内每个 key 的访问次数</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><ol><li>使用场景<br>分布式系统中一个应用部署在多台服务器上，内存不在同一个空间</li><li>分布式锁-实现原理（setnx、redisson）<br>使用 setnx 命令（实际使用 set lock 1 nx ex 10 的形式，相比 setnx 保证锁和过期时间命令的原子性），如果返回 true 说明拿到了锁，false 则表示没有拿到锁。<br>使用 redisson，redisson 可以控制锁的失效时间和等待时间，执行过程中，会引入一个看门狗机制，每个一段时间会检查业务是否还持有锁，还有锁就给这把锁延长失效时间，没有锁就释放锁。一个客户持有锁的时候，另外的客户进来不会立刻拒绝而是会自旋等待，提高性能，锁可以重入</li></ol><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><ol><li>主从复制、主从同步流程<br>从机发起 replication 请求，携带 repid（数据集 Id）和 offside，主机根据从机 repid 和自己的 repid 是否一致选择全量同步还是增量同步，全量同步时，fork 子线程执行 bgsave 生成 RDB 文件，传输到从机，从机清空数据，加载 RDB，主机生成 RDB 文件时若有新的操作，会将操作加载到一个日志文件，发送 RDB 后再发送日志文件，保证数据的一致性，增量同步时，</li><li>哨兵模式、集群脑裂<br>使用哨兵集群对集群进行监控，发现主节点下线后后，从从节点中选举新的主节点，并通知客户端要往新的主节点写。<br>集群脑裂是指因为网络等原因哨兵发现主节点下线，从从机中选举新主节点，但实际主节点并没有下线，客户端仍旧在主节点写入数据，后续网络恢复正常后，旧的主节点加入集群会变成从节点，会删除已有的所有数据，导致客户端后续写入内容的丢失。</li><li>分片集群、数据读写规则<br>Redis 有数据分片！！！<br>在该模式下，每个数据节点都是含有主从节点的集群，哈希槽，设置 key 时，更具 key 的 hash 值计算出对应的数据节点位置，并且自动路由到对应的数据节点主节点</li></ol><h1 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h1><ol><li></li><li>docker run –name redis -p 6379:6379 -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;data&#x2F;:&#x2F;data&#x2F; -v &#x2F;f&#x2F;docker&#x2F;redis&#x2F;log&#x2F;redis-server.log:&#x2F;log&#x2F;redis-server.log -d redis:7.2.2 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</li><li>docker run –name redis -p 6379:6379 -d redis:7.2.2</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="/2023/12/08/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/12/08/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><hr><h1 id="一、内容整理"><a href="#一、内容整理" class="headerlink" title="一、内容整理"></a>一、内容整理</h1><h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><h4 id="线程和进程的区别？"><a href="#线程和进程的区别？" class="headerlink" title="线程和进程的区别？"></a>线程和进程的区别？</h4><p>当系统从磁盘中将硬盘中的某个程序代码到内存，就开启了一个进程，一个进程可以有多个线程，线程由一条一条的指令组成</p><p>进程是运行中程序的实例，包含了线程，以便同时执行多个任务<br>进程间的内存空间不是共享的，但线程中的空间对进程中的线程是共享的<br>线程更轻量，上下文切换的成本比进程更低</p><h4 id="并行和并发有什么区别？"><a href="#并行和并发有什么区别？" class="headerlink" title="并行和并发有什么区别？"></a>并行和并发有什么区别？</h4><p>并发是不同的线程以极短的时间在 cpu 中交替执行<br>并行是多个线程在不同的 cpu 核心中执行<br>并行是同时执行多个任务的能力，并发是可以应对多个任务的能力</p><h4 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h4><ul><li>继承<code>Thread</code>类，重写 <code>run</code> 方法</li><li>实现 <code>Runnable</code> 接口，实现 <code>run</code> 方法</li><li>实现 <code>Callable</code> 接口，实现 <code>call</code> 方法</li><li>使用线程池创建线程</li></ul><h4 id="runnable-和-callable-有什么区别"><a href="#runnable-和-callable-有什么区别" class="headerlink" title="runnable 和 callable 有什么区别"></a>runnable 和 callable 有什么区别</h4><ul><li>Runnable 接口的方法没有返回值，Callable 接口可以有返回值，通过 FutureTask 中的 get 方法获取异步执行的返回值，但执行这个方法会阻塞主进程</li><li>Runnable 不能抛出异常，Callable 可以抛出异常</li></ul><h4 id="线程的-run-和-start-有什么区别？"><a href="#线程的-run-和-start-有什么区别？" class="headerlink" title="线程的 run()和 start()有什么区别？"></a>线程的 run()和 start()有什么区别？</h4><ul><li>run 只是调用普通方法，可以多次执行</li><li>start 方法会启动线程，会调用 native 的 start0 方法，只能调用一次</li></ul><h4 id="线程包括哪些状态，状态之间是如何变化的"><a href="#线程包括哪些状态，状态之间是如何变化的" class="headerlink" title="线程包括哪些状态，状态之间是如何变化的"></a>线程包括哪些状态，状态之间是如何变化的</h4><ul><li>New</li><li>Runnable</li><li>Blocked</li><li>Waitting</li><li>TimeWaitting</li><li>Terminated</li></ul><p>创建线程时时 New 状态，调用 start 方法后会进入 Runnable 状态，Runnable 状态中会根据争抢 cpu 时间片的情况会在就绪和运行状态来回切换，如果出现需要等待锁，会进入 Blocked 状态，拿到锁后再次变成 Runnable 状态，线程中调用了 wait 方法时会进入 Waitting 状态，调用 notify 或者 notifyAll 方法后，线程被唤醒，进入 Runnable 状态，运行中遇到 sleep 会进入 TimeWaitting 状态，执行完毕或线程死亡后会进入 Terminated 状态。</p><h4 id="新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？"><a href="#新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？" class="headerlink" title="新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？"></a>新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</h4><p>在 t2 中调用 t1 的 join 方法，在 t3 中调用 t2 的 join 方法</p><h4 id="notify-和-notifyAll-有什么区别？"><a href="#notify-和-notifyAll-有什么区别？" class="headerlink" title="notify()和 notifyAll()有什么区别？"></a>notify()和 notifyAll()有什么区别？</h4><p>notify 只会随机唤醒一个线程，notifyAll 会唤醒所有的线程</p><h4 id="在-java-中-wait-和-sleep-方法的不同？"><a href="#在-java-中-wait-和-sleep-方法的不同？" class="headerlink" title="在 java 中 wait 和 sleep 方法的不同？"></a>在 java 中 wait 和 sleep 方法的不同？</h4><ul><li>wait 是 Object 类中的方法，可以被唤醒，必须先获取 wait 对象的锁，会释放锁，</li><li>sleep 是 Thread 中的静态方法，不可以被唤醒， 不会释放锁</li></ul><h4 id="如何停止一个正在运行的线程？"><a href="#如何停止一个正在运行的线程？" class="headerlink" title="如何停止一个正在运行的线程？"></a>如何停止一个正在运行的线程？</h4><p>使用线程的 interrupt 方法</p><h2 id="线程中并发锁"><a href="#线程中并发锁" class="headerlink" title="线程中并发锁"></a>线程中并发锁</h2><h4 id="讲一下-synchronized-关键字的底层原理？"><a href="#讲一下-synchronized-关键字的底层原理？" class="headerlink" title="讲一下 synchronized 关键字的底层原理？"></a>讲一下 synchronized 关键字的底层原理？</h4><p>底层是由 Monitor 实现的，Moniter 是用 C++编写的，进入 synchronized 方法块时，对象锁会先关联 Monitor，Monitor 中存在三个属性，owner：持有锁的线程、entrylist：处于阻塞状态的线程 和 waitset 处于 waitting 状态的线程</p><h4 id="synchronized-关键字的底层原理-进阶"><a href="#synchronized-关键字的底层原理-进阶" class="headerlink" title="synchronized 关键字的底层原理-进阶"></a>synchronized 关键字的底层原理-进阶</h4><h4 id="你谈谈-JMM（Java-内存模型）"><a href="#你谈谈-JMM（Java-内存模型）" class="headerlink" title="你谈谈 JMM（Java 内存模型）"></a>你谈谈 JMM（Java 内存模型）</h4><p>是 java 虚拟机规范中定义的一种内存模型，每个线程中都有自己的工作内存，线程之间无法互相访问，共享的变量存放在主内存中，线程工作时，需要用到共享变量的话会在自己的工作内存中创建一个共享变量的副本，线程只能操作自己工作内存中的副本，由 JMM 负责将副本同步到共享内存和将共享变量加载到线程的工作内存中</p><h4 id="CAS-你知道吗？"><a href="#CAS-你知道吗？" class="headerlink" title="CAS 你知道吗？"></a>CAS 你知道吗？</h4><p>比较并交换，保证操作的原子性，比较旧的值相同才会将旧的值更改为新的值，CAS 中包含自旋锁，是一种乐观锁，发现旧值不相同时会不断地重置，CAS 的底层时使用 Unsafe 类中的 native 方法，</p><h4 id="请谈谈你对-volatile-的理解"><a href="#请谈谈你对-volatile-的理解" class="headerlink" title="请谈谈你对 volatile 的理解"></a>请谈谈你对 volatile 的理解</h4><ul><li>保证可见性：保证不同线程对变量操作的可见性，会强制将对副本修改的值立刻同步到主存中，其目的时防止 JIT 编译器对代码进行优化</li><li>防止指令重排：在变量的操作中加入屏障，防止其他的写操作到该变量写下面，防止其他读的操作到该变量读上面</li></ul><h4 id="什么是-AQS？"><a href="#什么是-AQS？" class="headerlink" title="什么是 AQS？"></a>什么是 AQS？</h4><p>抽象同步队列，是构建锁和同步组件的基础框架，包含了锁的状态，拿到锁的线程，等待队列的头节点和尾节点，时一种非公平锁</p><h4 id="ReentrantLock-的实现原理"><a href="#ReentrantLock-的实现原理" class="headerlink" title="ReentrantLock 的实现原理"></a>ReentrantLock 的实现原理</h4><p>是由 CAS 和 AQS 实现的，它支持公平锁和非公平锁</p><h4 id="synchronized-和-Lock-有什么区别"><a href="#synchronized-和-Lock-有什么区别" class="headerlink" title="synchronized 和 Lock 有什么区别"></a>synchronized 和 Lock 有什么区别</h4><p>synchronized 是关键字，由 c++实现，lock 是接口，由 java 语言实现<br>Lock 支持更细粒度的锁控制，功能更多，支持公平锁，可打断，可超时，多条件变量，有多种不同的实现</p><h4 id="死锁产生的条件以及死锁排查方案"><a href="#死锁产生的条件以及死锁排查方案" class="headerlink" title="死锁产生的条件以及死锁排查方案"></a>死锁产生的条件以及死锁排查方案</h4><p>线程中同时获取多把锁的情况，jps 获取线程的 PID，再用 jstack 获取线程的运行情况</p><h4 id="聊一下-ConcurrentHashMap"><a href="#聊一下-ConcurrentHashMap" class="headerlink" title="聊一下 ConcurrentHashMap"></a>聊一下 ConcurrentHashMap</h4><p>是线程安全版本的 HashMap，数据结构和 HashMap 一样，它在空节点插入时是 CAS 的操作，在链表或者红黑树的节点是锁的头节点。</p><h4 id="导致并发程序出现问题的根本原因是什么"><a href="#导致并发程序出现问题的根本原因是什么" class="headerlink" title="导致并发程序出现问题的根本原因是什么"></a>导致并发程序出现问题的根本原因是什么</h4><p>并发编程三大特性是</p><ul><li>原子性：线程要么执行要么不执行</li><li>可见性：对数据副本的修改能及时同步到别的线程</li><li>有序性：防止指令重排<br>违反了特性就可能产生问题</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h4 id="说一下线程池的核心参数（线程池的执行原理知道嘛）"><a href="#说一下线程池的核心参数（线程池的执行原理知道嘛）" class="headerlink" title="说一下线程池的核心参数（线程池的执行原理知道嘛）"></a>说一下线程池的核心参数（线程池的执行原理知道嘛）</h4><p>线程池有七大参数</p><ul><li>核心线程池数</li><li>最大线程数</li><li>非核心线程存活时间</li><li>非核心线程存活时间单位</li><li>阻塞队列</li><li>线程工厂</li><li>拒绝策略</li></ul><p>其中拒绝策略是达到最大先乘除，并且阻塞队列也满了的时候拒绝策略分为</p><ul><li>AbortPolicy：直接抛出异常，默认策略</li><li>CallerRunsPolicy：用调用者所在的线程来执行任务</li><li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务</li><li>DiscardPolicy：直接丢弃任务</li></ul><h4 id="线程池中有哪些常见的阻塞队列"><a href="#线程池中有哪些常见的阻塞队列" class="headerlink" title="线程池中有哪些常见的阻塞队列"></a>线程池中有哪些常见的阻塞队列</h4><p>常见的有 ArrayBlokingQueue 和 LinkedBlokingQueue<br>不同之处：</p><ul><li>ArrayBlokingQueue 是有界的，LinkedBlokingQueue 则是可以设置为无界</li><li>ArrayBlokingQueue 只有一把锁，锁整个数组，而 LinkedBlokingQueue 有头节点和尾节点两把锁，相对来说加入和取出元素的时候 LinkedBlokingQueue 效率更高一些</li></ul><h4 id="如何确定核心线程数"><a href="#如何确定核心线程数" class="headerlink" title="如何确定核心线程数"></a>如何确定核心线程数</h4><ul><li>高并发，任务时间短：N+1，可以减少上下文切换</li><li>并发不高，任务时间较长<ul><li>IO 密集型的任务使用 2N+1</li><li>cpu 密集型使用 N+1</li></ul></li></ul><h4 id="为什么不建议用-Executors-创建线程池"><a href="#为什么不建议用-Executors-创建线程池" class="headerlink" title="为什么不建议用 Executors 创建线程池"></a>为什么不建议用 Executors 创建线程池</h4><p>记得 java 开发手册里这个是强制的，因为 Executors 创建的线程有最大线程数、阻塞队列的长度为 Integer.MAX_VALUE 的，可能会导致 OOM</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h4 id="线程池使用场景"><a href="#线程池使用场景" class="headerlink" title="线程池使用场景"></a>线程池使用场景</h4><ul><li>使用 java 操作大量的数据的时候，操作全部可能导致 OOM，可以使用 CountDownLatch 和线程池分成一个一个的任务执行</li><li>数据汇总，当一个接口需要多个远程调用时，可以将多个调用提交到线程池中同步执行，提高速度</li><li>异步调用，一个接口值的返回不需要等某一个方法执行结束，比如搜索内容是，记录搜索记录和返回搜索结果，添加记录可以提交到线程池中异步执行</li></ul><h4 id="如何控制某个方法允许并发访问线程的数量"><a href="#如何控制某个方法允许并发访问线程的数量" class="headerlink" title="如何控制某个方法允许并发访问线程的数量"></a>如何控制某个方法允许并发访问线程的数量</h4><p>使用 Semaphore，保存的是一个信号量，进入线程的时候请求信号，信号量-1，只有信号量大于 0 才能请求成功，方法结束后，调用释放信号的方法，把信号量加回去。</p><h2 id="谈谈你对-ThreadLocal-的理解"><a href="#谈谈你对-ThreadLocal-的理解" class="headerlink" title="谈谈你对 ThreadLocal 的理解"></a>谈谈你对 ThreadLocal 的理解</h2><p>ThreadLocal 是解决线程安全的一个操作类，将数据存储到各自线程中，有 set，get 和 remove 三个主要方法</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/12/08/MarkDown_All_In_One/"/>
      <url>/2023/12/08/MarkDown_All_In_One/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="二级标题-ignore-true"><a href="#二级标题-ignore-true" class="headerlink" title="二级标题 {ignore&#x3D;true}"></a>二级标题 {ignore&#x3D;true}</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><p><em>强调文本</em><br><strong>加粗文本</strong></p><p>&#x3D;&#x3D;标记文本&#x3D;&#x3D;</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is 是液体。</p><p>2^10^ 运算结果是 1024</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目 1</li><li>项目 2</li><li>项目 3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> &#x3D;60x60)</p><p>宽度确定高度等比例的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> &#x3D;60x)</p><p>高度确定宽度等比例的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png">https://img-home.csdnimg.cn/images/20220524100510.png</a> &#x3D;x60)</p><p>居中的图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://img-home.csdnimg.cn/images/20220524100510.png#pic_center">https://img-home.csdnimg.cn/images/20220524100510.png#pic_center</a> &#x3D;60x60)</p><p>居右的图片: <img src="https://img-home.csdnimg.cn/images/20220524100510.png#pic_right" alt="Alt"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>链接: <a href="https://www.csdn.net/">link</a></p><h1 id="代码片"><a href="#代码片" class="headerlink" title="代码片"></a>代码片</h1><p>下面展示一些 <code>内联代码片</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><table><thead><tr><th align="center">Column 1</th><th align="right">Column 2</th></tr></thead><tbody><tr><td align="center">centered 文本居中</td><td align="right">right-aligned 文本居右</td></tr></tbody></table><h1 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h1><p>一个具有注脚的文本。<a href="%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A">^1</a></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>Markdown 将文本转换为 HTML。</p><p>*[HTML]: 超文本标记语言</p><h1 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h1><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>: John</dt><dd>Luke</dd></dl><h1 id="LaTeX-数学公式"><a href="#LaTeX-数学公式" class="headerlink" title="LaTeX 数学公式"></a>LaTeX 数学公式</h1><p>Gamma 公式展示 $\Gamma(n) &#x3D; (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过 Euler integral</p><p>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><h1 id="插入甘特图"><a href="#插入甘特图" class="headerlink" title="插入甘特图"></a>插入甘特图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划中               :         des3, after des2, 5d</span><br></pre></td></tr></table></figure><h1 id="插入-UML-图"><a href="#插入-UML-图" class="headerlink" title="插入 UML 图"></a>插入 UML 图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><h1 id="插入-Mermaid-流程图"><a href="#插入-Mermaid-流程图" class="headerlink" title="插入 Mermaid 流程图"></a>插入 Mermaid 流程图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><h1 id="插入-Flowchart-流程图"><a href="#插入-Flowchart-流程图" class="headerlink" title="插入 Flowchart 流程图"></a>插入 Flowchart 流程图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><h1 id="插入-classDiagram-类图"><a href="#插入-classDiagram-类图" class="headerlink" title="插入 classDiagram 类图"></a>插入 classDiagram 类图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">    &lt;&lt;interface&gt;&gt; Class01</span><br><span class="line">    Class09 --&gt; C2 : Where am i?</span><br><span class="line">    Class09 --* C3</span><br><span class="line">    Class09 --|&gt; Class07</span><br><span class="line">    Class07 : equals()</span><br><span class="line">    Class07 : Object[] elementData</span><br><span class="line">    Class01 : size()</span><br><span class="line">    Class01 : int chimp</span><br><span class="line">    Class01 : int gorilla</span><br><span class="line">    class Class10 &#123;</span><br><span class="line">        &gt;&gt;service&gt;&gt;</span><br><span class="line">        int id</span><br><span class="line">        size()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/12/08/skywalking/"/>
      <url>/2023/12/08/skywalking/</url>
      
        <content type="html"><![CDATA[<p>docker run –name skywalking-oap-server –restart always -e TZ&#x3D;Asia&#x2F;Shanghai –link elasticsearch7:elasticsearch7 -e SW_STORAGE&#x3D;elasticsearch -e SW_STORAGE_ES_CLUSTER_NODES&#x3D;elasticsearch7:9200 -d -p 12800:12800 -p 11800:11800 apache&#x2F;skywalking-oap-server</p><p>docker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8088:8080 –link skywalking-oap:oap -e SW_OAP_ADDRESS&#x3D;<a href="http://oap:12800/">http://oap:12800</a> apache&#x2F;skywalking-ui<br>docker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8088:8080 –link skywalking-oap-server:skywalking-oap-server -e SW_OAP_ADDRESS&#x3D;<a href="http://localhost:12800/">http://localhost:12800</a> apache&#x2F;skywalking-ui</p><p>docker run -d –name skywalking-ui –restart&#x3D;always -e TZ&#x3D;Asia&#x2F;Shanghai -p 8080:8080 –link skywalking-oap:oap -e SW_OAP_ADDRESS&#x3D;<a href="http://oap:12800/">http://oap:12800</a> apache&#x2F;skywalking-ui:9.2.0</p><p>-DSW_AGENT_NAME&#x3D;dispatcher-service -DSW_AGENT_COLLECTOR_BACKEND_SERVICES&#x3D;127.0.0.1:11800 -javaagent:D:\softWare\apache-skywalking-java-agent-8.16.0\skywalking-agent\skywalking-agent.jar</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/12/08/dockerCmd/"/>
      <url>/2023/12/08/dockerCmd/</url>
      
        <content type="html"><![CDATA[<p><code>docker run -d --name nacos -p 3333:8848 -p 4333:9848 -p 9849:9849 --privileged=true -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -v /f/docker/nacos/logs/:/home/nacos/logs -v /f/docker/nacos/conf/:/home/nacos/conf/ nacos/nacos-server:v2.2.0</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/12/08/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/12/08/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="每日报表文档"><a href="#每日报表文档" class="headerlink" title="每日报表文档"></a>每日报表文档</h1><h2 id="涉及到的表格"><a href="#涉及到的表格" class="headerlink" title="涉及到的表格"></a>涉及到的表格</h2><ol><li><code>杭州支队巡检2.0.xlsx</code>中<code>每日巡检表</code>：卡口相机点位的信息，前几列为具体信息，最后面列名是日期的是每天的在线状况。</li><li><code>每日外场点位.xlsx</code>：每天离线卡口的信息，每天早间巡检时将当天离线的卡口复制到此表</li><li><code>外场维修台账.xlsx</code>：卡口相机的离线和恢复情况，每日巡检时根据当天卡口相机的变化情况到该表中添加或更新</li><li><code>[当天日期]运维日报表.xlsx</code>：主要制作的报表，该文件需要复制前一天的并重命名，以下是对每个表的说明：<br>（1）卡口：卡口相机的在线率等信息，全表根据公式由<code>故障相机</code>表中的数据计算得到，不需要修改<br>（2）监控：监控的在线情况等信息，全表除所属道路部分的当日故障数需要手动统计外，都由<code>离线监控清单</code>表数据计算得到，不需要修改<br>（3）离线监控清单：离线监控清单，为了方便手动统计<code>监控</code>表中的离线数通常在最后一列加上监控所在的高速（这一列只是为报表制作人员提供便利，不作为报表内容）<br>（4）故障相机：当天离线的卡口<br>（5）完好率抽查相机：抽查当天相机拍摄效果的情况<br>（6）总表：全表使用公式自动计算得到，不需要修改<br>（7）Sheet1：由<code>故障相机</code>和<code>离线监控清单</code>表复制上下拼接得到</li><li><code>[当天日期]运维日报表.word</code>：主要制作的文档，该文件需要复制前一天的并重命名，主要包含<code>[当天日期]运维日报表.xlsx</code>中的几张表和离线情况、抽查监控拍摄不清晰的截图</li></ol><h2 id="需要使用的工具"><a href="#需要使用的工具" class="headerlink" title="需要使用的工具"></a>需要使用的工具</h2><ol><li>WPS Office：用于编辑 Excel 和 Word</li><li>PingInfoView：群 Ping 软件，测试卡口 IP 能否连通</li><li>Chrome：访问收藏栏中的<code>浙江省高速交警……</code>，用于抽查相机拍摄效果</li><li>InfovisionSMAG-HTPC（高速交通安全检测与治理平台）：查看监控的离线情况</li></ol><blockquote><p>注意：3 中的网页和 4 中 APP 界面相似，但功能不同，需要注意区分</p></blockquote><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>卡口离线：群 Ping 软件中经过多轮（十轮以上）后，失败率为 100%的</li><li>卡口丢包严重：连续多个 IP 失败率接近 100%，将这一批 IP 的相机（相机名称通常非常相似）都视为丢包严重</li></ol><h2 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h2><ol><li><p>早间巡检：巡检卡口，找出离线的卡口<br>1.1 进入<code>杭州支队巡检2.0.xlsx</code>，去掉所有筛选条件，复制昨天的在线情况到表格最右边，并重命名为今天<br>1.2 依次筛选出每个大队的数据并复制到群 Ping 软件并执行<br>1.3 Ping 过多轮等到每个 IP 的失败率相对稳定后，将每个 IP 的在线情况和表中的昨日的在线情况做比较，根据<code>卡口离线</code>判断离线情况，发现昨天离线但今天在线的和今天新增离线的需要在<code>杭州支队巡检2.0.xlsx</code>今日在线情况中更改。<br>1.4 筛选出今天离线的相机，将筛选结果中<code>[大队，新公里桩，密码，IP]</code>这几个字段复制到<code>每日外场点位.xlsx</code>，此时可以再复制今日离线 IP 到群 Ping 中检查是否有误。<br>1.5 把<code>每日外场点位.xlsx</code>复制到一个<code>金属外壳，盖口有红线，印有thinkplus</code>的 U 盘中，覆盖 U 盘原有文件，把文件发给刘炳。</p><!--</li><li><p>填写卡口的修复和新增离线信息<br>2.1 进入<code>杭州支队巡检2.0.xlsx</code><br>2.2 筛选今天修好的（筛选昨日是离线，今日是 ✔ 的），到<code>外场维修台账.xlsx</code>中查找修复的点位名称，将恢复时间设置为今天，故障原因和修复经过询问炳哥。<br>2.3 筛选今天新坏的（筛选昨日是 ✔，今日是离线的），将筛选结果复制到<code>外场维修台账.xlsx</code>的最下方，掉线时间填写为今日。 –&gt;</p></li><li><p>完好率抽查相机（主要检查相机在夜间能否拍摄清楚车辆车牌）<br>2.1 进入<code>[今日日期]运维日报表.xlsx</code>中的<code>完好率抽查相机</code>表，删除抽查设备名称和抓拍效果这两列<br>2.2 在 Chrome 浏览器中打开<code>高速交通安全监测与治理平台</code>（通过点击浏览器收藏夹最后一个进入网页）<br>2.3 打开在网页中的<code>车辆检索模块</code>中的<code>正常车辆查询</code>功能，筛选时间段为自定义，时间设置为当天凌晨的时间段<br>2.4 点击选择范围，在树选择中进入<code>杭州市&gt;高速卡口</code><br>2.5 根据<code>完好率抽查相机</code>表中每个大队需要抽查的数量，在树选择中打开对应大队，随机选择一个相机点位并查询（若显示没有符合条件的数据，则需要重新选择相机），查看当前相机拍摄的照片中车牌，若无法分辨，需要将浏览器最大化并且截全屏（方便后续排版和证明相机的抽查是今天做的），将截屏粘贴到<code>[今日日期]运维日报表.word</code>中<code>三、附图&gt;2.抓拍效果图片</code>对应大队的部分，并填写 excel 中的抓拍效果为<code>夜间拍摄车牌看不清</code>。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(在Chrome中打开高速交通安全监测与治理平台) --&gt; B(选择`车辆检索模块`中的`正常车辆查询`功能)</span><br><span class="line">B --&gt; C(筛选时间段为自定义，时间设置为当天凌晨的时间段)</span><br><span class="line">C --&gt; D(点击选择范围，在树选择中进入`杭州市&gt;高速卡口`)</span><br><span class="line">D --&gt; E(进入运维日报表中的`完好率抽查相机`表)</span><br><span class="line">E --&gt; F(按照`完好率抽查相机`表中大队列，按照大队依次选择n个)</span><br><span class="line">F --&gt; G(随机选择相机)</span><br><span class="line">G --&gt; H(`完好率抽查相机`表中填入当前监控名)</span><br><span class="line">H --&gt; I(查看照片中车牌是否清晰)</span><br><span class="line">I -- 清晰 --&gt; G</span><br><span class="line">I -- 不清晰 --&gt; J(浏览器最大化并且截全屏\n将截屏粘贴到`运维日报表.word`中`三、附图&gt;2.抓拍效果图片`对应大队的部分)</span><br><span class="line">J --&gt; K(`完好率抽查相机`填写为`夜间拍摄车牌看不清`)</span><br><span class="line">K --&gt; G</span><br></pre></td></tr></table></figure><ol start="3"><li><p>监控运维（15:30 左右做）<br>3.1 打开<code>[当天日期]运维日报表.xlsx</code>，进入工作簿<code>离线监控清单</code>，进入查看视频的软件。<br>3.2 首先检查昨日离线设备今日是否恢复（在视频软件中搜索设备名称并双击查看视频），显示取流失败说明未恢复，能正常显示视频则在<code>离线监控清单</code>中删除当前点位。<br>3.2 在视频软件中从上往下查找有离线的监控，找到灰色的监控需要双击查看是否能观看，取流失败则将该监控添加到<code>离线监控清单</code>中，同时标记大队、故障日期和所属高速（便于后续统计各高速离线数）。<br>3.3 进入<code>[今日日期]运维日报表.xlsx</code>中的<code>监控</code>表，根据<code>离线监控清单</code>中的数据统计每条高速的离线数量，我们只需要填写所属道路中的当日故障数这一列，其余都由公式计算得到。</p></li><li><p>检查卡口相机离线情况，完成报表（15:30 左右做）<br>5.1 再次操作<code>1.3-1.4</code>这里需要将 ping 出来有离线的结果对失败百分比降序排列，等到只有离线的为红点时截图，并放到 word 的<code>三、附图&gt;1.在线率图片中</code><br>5.2 进入<code>[今日日期]运维日报表.xlsx</code>中的<code>故障相机</code>表，根据<code>杭州支队巡检2.0.xlsx</code>中的数据，移除<code>故障相机中</code>今天修好了的，再添加中今天新增的，<code>外场维修台账.xlsx</code>中也许哟啊对应修改<br>5.3 检查<code>[今日日期]运维日报表.xlsx</code>，进入<code>卡口表</code>将卡口在线率低于 95%和完好率低于 98%的百分比 单元格标红，<code>监控</code>表也按照上述的规则标红，<code>故障相机</code>表把今天新增的标黄，<code>总表</code>更改第二行的时间，按照规则标红，<code>Sheet1</code>表只需复制表<code>故障相机</code>和<code>离线监控清单</code><br>5.4 打开<code>[今日日期]运维日报表.word</code>，更改第二行的日期，之后根据内容从<code>[今日日期]运维日报表.xlsx</code>中复制对应的内容过去。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/07/hello-world/"/>
      <url>/2023/12/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
